
TestProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  0800c3c8  0800c3c8  0001c3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db24  0800db24  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db2c  0800db2c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db2c  0800db2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db30  0800db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800db34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0800dbbc  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0800dc5c  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000825c  200001c8  0800dcfc  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008424  0800dcfc  00028424  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002364a  00000000  00000000  000201f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005529  00000000  00000000  00043840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  00048d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001920  00000000  00000000  0004a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003471d  00000000  00000000  0004c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029549  00000000  00000000  000808bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114528  00000000  00000000  000a9e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001be32e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007950  00000000  00000000  001be380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c3b0 	.word	0x0800c3b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	0800c3b0 	.word	0x0800c3b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	udp_send_msg();
 80005ec:	f000 fc72 	bl	8000ed4 <udp_send_msg>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fe40 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f814 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f92e 	bl	8000864 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f8ce 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060c:	f000 f8fc 	bl	8000808 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000610:	f000 f87c 	bl	800070c <MX_TIM2_Init>
  MX_LWIP_Init();
 8000614:	f005 fa3c 	bl	8005a90 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udp_create_socket();
 8000618:	f000 fc24 	bl	8000e64 <udp_create_socket>
  HAL_TIM_Base_Start_IT(&htim2);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <main+0x30>)
 800061e:	f003 fe6b 	bl	80042f8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000622:	f005 fb81 	bl	8005d28 <MX_LWIP_Process>
 8000626:	e7fc      	b.n	8000622 <main+0x2a>
 8000628:	200001e4 	.word	0x200001e4

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f00a fe60 	bl	800b300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000650:	f002 fc9e 	bl	8002f90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <SystemClock_Config+0xd8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a2a      	ldr	r2, [pc, #168]	; (8000704 <SystemClock_Config+0xd8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xd8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a25      	ldr	r2, [pc, #148]	; (8000708 <SystemClock_Config+0xdc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xdc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800069c:	23d8      	movs	r3, #216	; 0xd8
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fccd 	bl	8003050 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 f974 	bl	80009a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f002 fc76 	bl	8002fb0 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ca:	f000 f96d 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2107      	movs	r1, #7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 ff5d 	bl	80035ac <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f8:	f000 f956 	bl	80009a8 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_TIM2_Init+0x94>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000734:	226b      	movs	r2, #107	; 0x6b
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_TIM2_Init+0x94>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <MX_TIM2_Init+0x98>)
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM2_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <MX_TIM2_Init+0x94>)
 8000752:	f003 fd79 	bl	8004248 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800075c:	f000 f924 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM2_Init+0x94>)
 800076e:	f003 ff5b 	bl	8004628 <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 f916 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM2_Init+0x94>)
 800078a:	f004 f979 	bl	8004a80 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f908 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001e4 	.word	0x200001e4
 80007a4:	000f423f 	.word	0x000f423f

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_USART3_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART3_UART_Init+0x58>)
 80007ec:	f004 f9f4 	bl	8004bd8 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f8d7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000230 	.word	0x20000230
 8000804:	40004800 	.word	0x40004800

08000808 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000812:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2206      	movs	r2, #6
 8000818:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2202      	movs	r2, #2
 800082a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	2201      	movs	r2, #1
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084c:	f002 fa57 	bl	8002cfe <HAL_PCD_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000856:	f000 f8a7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002b8 	.word	0x200002b8

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b47      	ldr	r3, [pc, #284]	; (8000998 <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a46      	ldr	r2, [pc, #280]	; (8000998 <MX_GPIO_Init+0x134>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b44      	ldr	r3, [pc, #272]	; (8000998 <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	4b41      	ldr	r3, [pc, #260]	; (8000998 <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a40      	ldr	r2, [pc, #256]	; (8000998 <MX_GPIO_Init+0x134>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3a      	ldr	r2, [pc, #232]	; (8000998 <MX_GPIO_Init+0x134>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b38      	ldr	r3, [pc, #224]	; (8000998 <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <MX_GPIO_Init+0x134>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b32      	ldr	r3, [pc, #200]	; (8000998 <MX_GPIO_Init+0x134>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <MX_GPIO_Init+0x134>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <MX_GPIO_Init+0x134>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_GPIO_Init+0x134>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0x134>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_GPIO_Init+0x134>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x138>)
 8000912:	f002 f9db 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4821      	ldr	r0, [pc, #132]	; (80009a0 <MX_GPIO_Init+0x13c>)
 800091c:	f002 f9d6 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	; (80009a4 <MX_GPIO_Init+0x140>)
 8000938:	f002 f81c 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800093c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0x138>)
 8000956:	f002 f80d 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x13c>)
 8000972:	f001 ffff 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x13c>)
 800098a:	f001 fff3 	bl	8002974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021800 	.word	0x40021800
 80009a4:	40020800 	.word	0x40020800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x44>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d113      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f000 fd85 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 fd9e 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ae      	sub	sp, #184	; 0xb8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2290      	movs	r2, #144	; 0x90
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00a fc4b 	bl	800b300 <memset>
  if(huart->Instance==USART3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d13c      	bne.n	8000aee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 ffb8 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8e:	f7ff ff8b 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0xb8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000adc:	2307      	movs	r3, #7
 8000ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0xbc>)
 8000aea:	f001 ff43 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	37b8      	adds	r7, #184	; 0xb8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004800 	.word	0x40004800
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020c00 	.word	0x40020c00

08000b04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ae      	sub	sp, #184	; 0xb8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2290      	movs	r2, #144	; 0x90
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00a fbeb 	bl	800b300 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b32:	d166      	bne.n	8000c02 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b46:	2303      	movs	r3, #3
 8000b48:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000b52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 ff4a 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8000b6a:	f7ff ff1d 	bl	80009a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b86:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <HAL_PCD_MspInit+0x10c>)
 8000bae:	f001 fee1 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_PCD_MspInit+0x10c>)
 8000bce:	f001 fed1 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6353      	str	r3, [r2, #52]	; 0x34
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_PCD_MspInit+0x108>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	37b8      	adds	r7, #184	; 0xb8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 fb4c 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM2_IRQHandler+0x10>)
 8000c6e:	f003 fbbb 	bl	80043e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001e4 	.word	0x200001e4

08000c7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <ETH_IRQHandler+0x10>)
 8000c82:	f000 ff91 	bl	8001ba8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200051a8 	.word	0x200051a8

08000c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_kill>:

int _kill(int pid, int sig)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_kill+0x20>)
 8000cac:	2216      	movs	r2, #22
 8000cae:	601a      	str	r2, [r3, #0]
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20008414 	.word	0x20008414

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe5 	bl	8000ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd6:	e7fe      	b.n	8000cd6 <_exit+0x12>

08000cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
  }

  return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
  }
  return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
  return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d205      	bcs.n	8000df0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <_sbrk+0x6c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20080000 	.word	0x20080000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200007c0 	.word	0x200007c0
 8000e1c:	20008428 	.word	0x20008428
 8000e20:	20008414 	.word	0x20008414

08000e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <udp_receive_callback>:

static struct udp_pcb* upcb = NULL;

static void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
	    const ip_addr_t *addr, u16_t port)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	603b      	str	r3, [r7, #0]
	pbuf_free(p);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f006 fe6a 	bl	8007b30 <pbuf_free>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <udp_create_socket>:

err_t udp_create_socket()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	if (upcb == NULL)
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <udp_create_socket+0x64>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10b      	bne.n	8000e8a <udp_create_socket+0x26>
	{
		upcb = udp_new();
 8000e72:	f007 feff 	bl	8008c74 <udp_new>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <udp_create_socket+0x64>)
 8000e7a:	6013      	str	r3, [r2, #0]

		if (upcb == NULL)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <udp_create_socket+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <udp_create_socket+0x26>
		{
			return ERR_ABRT;
 8000e84:	f06f 030c 	mvn.w	r3, #12
 8000e88:	e01a      	b.n	8000ec0 <udp_create_socket+0x5c>
		}
	}

	ip4_addr_t dest;
	IP4_ADDR(&dest, 192, 168, 0, 11);
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <udp_create_socket+0x68>)
 8000e8c:	603b      	str	r3, [r7, #0]
	err_t err = udp_connect(upcb, &dest, 3333);
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <udp_create_socket+0x64>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4639      	mov	r1, r7
 8000e94:	f640 5205 	movw	r2, #3333	; 0xd05
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 fe5d 	bl	8008b58 <udp_connect>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	if (ERR_OK != err)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <udp_create_socket+0x4c>
	{
		return err;
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	e007      	b.n	8000ec0 <udp_create_socket+0x5c>
	}

	udp_recv(upcb, udp_receive_callback, NULL);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <udp_create_socket+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <udp_create_socket+0x6c>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 febb 	bl	8008c34 <udp_recv>
	return ERR_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200007c4 	.word	0x200007c4
 8000ecc:	0b00a8c0 	.word	0x0b00a8c0
 8000ed0:	08000e49 	.word	0x08000e49

08000ed4 <udp_send_msg>:

err_t udp_send_msg()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
	if (upcb == NULL)
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <udp_send_msg+0x90>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <udp_send_msg+0x14>
	{
		return ERR_ABRT;
 8000ee2:	f06f 030c 	mvn.w	r3, #12
 8000ee6:	e038      	b.n	8000f5a <udp_send_msg+0x86>
	}
	struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, 5, PBUF_RAM);
 8000ee8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000eec:	2105      	movs	r1, #5
 8000eee:	2036      	movs	r0, #54	; 0x36
 8000ef0:	f006 fb3c 	bl	800756c <pbuf_alloc>
 8000ef4:	60f8      	str	r0, [r7, #12]
	if (p != NULL)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d02d      	beq.n	8000f58 <udp_send_msg+0x84>
	{
		char data[5] = "Test";
 8000efc:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <udp_send_msg+0x94>)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f04:	6018      	str	r0, [r3, #0]
 8000f06:	3304      	adds	r3, #4
 8000f08:	7019      	strb	r1, [r3, #0]
		err_t err = pbuf_take(p, data, 5);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	4619      	mov	r1, r3
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f007 f807 	bl	8007f24 <pbuf_take>
 8000f16:	4603      	mov	r3, r0
 8000f18:	72fb      	strb	r3, [r7, #11]
		if (ERR_OK != err)
 8000f1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <udp_send_msg+0x5a>
		{
			pbuf_free(p);
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f006 fe04 	bl	8007b30 <pbuf_free>
			return err;
 8000f28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f2c:	e015      	b.n	8000f5a <udp_send_msg+0x86>
		}

		err = udp_send(upcb, p);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <udp_send_msg+0x90>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fb9d 	bl	8008674 <udp_send>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	72fb      	strb	r3, [r7, #11]
		if (ERR_OK != err)
 8000f3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <udp_send_msg+0x7e>
		{
			pbuf_free(p);
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f006 fdf2 	bl	8007b30 <pbuf_free>
			return err;
 8000f4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f50:	e003      	b.n	8000f5a <udp_send_msg+0x86>
		}
		pbuf_free(p);
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f006 fdec 	bl	8007b30 <pbuf_free>
	}
	return ERR_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200007c4 	.word	0x200007c4
 8000f68:	0800c3c8 	.word	0x0800c3c8

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ff45 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f00a f96f 	bl	800b27c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fb2b 	bl	80005f8 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fb0:	0800db34 	.word	0x0800db34
  ldr r2, =_sbss
 8000fb4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000fb8:	20008424 	.word	0x20008424

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>

08000fbe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <LAN8742_RegisterBusIO+0x28>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <LAN8742_RegisterBusIO+0x28>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <LAN8742_RegisterBusIO+0x28>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	e014      	b.n	8001016 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d17c      	bne.n	800113c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e01c      	b.n	8001096 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f107 0208 	add.w	r2, r7, #8
 8001064:	2112      	movs	r1, #18
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	4798      	blx	r3
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da03      	bge.n	8001078 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001070:	f06f 0304 	mvn.w	r3, #4
 8001074:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001076:	e00b      	b.n	8001090 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	d105      	bne.n	8001090 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
         break;
 800108e:	e005      	b.n	800109c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2b1f      	cmp	r3, #31
 800109a:	d9df      	bls.n	800105c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b1f      	cmp	r3, #31
 80010a2:	d902      	bls.n	80010aa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80010a4:	f06f 0302 	mvn.w	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d145      	bne.n	800113c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6810      	ldr	r0, [r2, #0]
 80010b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010bc:	2100      	movs	r1, #0
 80010be:	4798      	blx	r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db37      	blt.n	8001136 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6810      	ldr	r0, [r2, #0]
 80010ce:	f107 0208 	add.w	r2, r7, #8
 80010d2:	2100      	movs	r1, #0
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db28      	blt.n	800112e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4798      	blx	r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010e6:	e01c      	b.n	8001122 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4798      	blx	r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010fa:	d80e      	bhi.n	800111a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6810      	ldr	r0, [r2, #0]
 8001104:	f107 0208 	add.w	r2, r7, #8
 8001108:	2100      	movs	r1, #0
 800110a:	4798      	blx	r3
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	da07      	bge.n	8001122 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001112:	f06f 0304 	mvn.w	r3, #4
 8001116:	613b      	str	r3, [r7, #16]
                 break;
 8001118:	e010      	b.n	800113c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800111a:	f06f 0301 	mvn.w	r3, #1
 800111e:	613b      	str	r3, [r7, #16]
               break;
 8001120:	e00c      	b.n	800113c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1dd      	bne.n	80010e8 <LAN8742_Init+0xc6>
 800112c:	e006      	b.n	800113c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800112e:	f06f 0304 	mvn.w	r3, #4
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e002      	b.n	800113c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001136:	f06f 0303 	mvn.w	r3, #3
 800113a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d112      	bne.n	8001168 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4798      	blx	r3
 8001148:	4603      	mov	r3, r0
 800114a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800114c:	bf00      	nop
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001160:	d9f5      	bls.n	800114e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001168:	693b      	ldr	r3, [r7, #16]
 }
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6810      	ldr	r0, [r2, #0]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	2101      	movs	r1, #1
 800118c:	4798      	blx	r3
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	da02      	bge.n	800119a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001194:	f06f 0304 	mvn.w	r3, #4
 8001198:	e06e      	b.n	8001278 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6810      	ldr	r0, [r2, #0]
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	2101      	movs	r1, #1
 80011a8:	4798      	blx	r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	da02      	bge.n	80011b6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011b0:	f06f 0304 	mvn.w	r3, #4
 80011b4:	e060      	b.n	8001278 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80011c0:	2301      	movs	r3, #1
 80011c2:	e059      	b.n	8001278 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	f107 020c 	add.w	r2, r7, #12
 80011d0:	2100      	movs	r1, #0
 80011d2:	4798      	blx	r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da02      	bge.n	80011e0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011da:	f06f 0304 	mvn.w	r3, #4
 80011de:	e04b      	b.n	8001278 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11b      	bne.n	8001222 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <LAN8742_GetLinkState+0x90>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011fe:	2302      	movs	r3, #2
 8001200:	e03a      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800120c:	2303      	movs	r3, #3
 800120e:	e033      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800121a:	2304      	movs	r3, #4
 800121c:	e02c      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800121e:	2305      	movs	r3, #5
 8001220:	e02a      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6810      	ldr	r0, [r2, #0]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	211f      	movs	r1, #31
 8001230:	4798      	blx	r3
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	da02      	bge.n	800123e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001238:	f06f 0304 	mvn.w	r3, #4
 800123c:	e01c      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001248:	2306      	movs	r3, #6
 800124a:	e015      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 031c 	and.w	r3, r3, #28
 8001252:	2b18      	cmp	r3, #24
 8001254:	d101      	bne.n	800125a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001256:	2302      	movs	r3, #2
 8001258:	e00e      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 031c 	and.w	r3, r3, #28
 8001260:	2b08      	cmp	r3, #8
 8001262:	d101      	bne.n	8001268 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001264:	2303      	movs	r3, #3
 8001266:	e007      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 031c 	and.w	r3, r3, #28
 800126e:	2b14      	cmp	r3, #20
 8001270:	d101      	bne.n	8001276 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001272:	2304      	movs	r3, #4
 8001274:	e000      	b.n	8001278 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001276:	2305      	movs	r3, #5
    }				
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f94d 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f806 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fb90 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f967 	bl	800158e <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f000 f92f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	200007c8 	.word	0x200007c8

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200007c8 	.word	0x200007c8

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x40>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	05fa0000 	.word	0x05fa0000

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06a      	b.n	8001690 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2223      	movs	r2, #35	; 0x23
 80015c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f004 fd93 	bl	80060f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_ETH_Init+0xf0>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_ETH_Init+0xf0>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_ETH_Init+0xf0>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <HAL_ETH_Init+0xf4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a2b      	ldr	r2, [pc, #172]	; (800169c <HAL_ETH_Init+0xf4>)
 80015f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_ETH_Init+0xf4>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4927      	ldr	r1, [pc, #156]	; (800169c <HAL_ETH_Init+0xf4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_ETH_Init+0xf4>)
 8001606:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001620:	f7ff fe80 	bl	8001324 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001626:	e011      	b.n	800164c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001628:	f7ff fe7c 	bl	8001324 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001636:	d909      	bls.n	800164c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2204      	movs	r2, #4
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	22e0      	movs	r2, #224	; 0xe0
 8001644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e021      	b.n	8001690 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e4      	bne.n	8001628 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fee4 	bl	800242c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 ff8b 	bl	8002580 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 ffe1 	bl	8002632 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	461a      	mov	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 ff49 	bl	8002510 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2210      	movs	r2, #16
 800168a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800

080016a0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d150      	bne.n	8001754 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2223      	movs	r2, #35	; 0x23
 80016b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f9fd 	bl	8001ac0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f042 0208 	orr.w	r2, r2, #8
 80016d4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fe2c 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0204 	orr.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff fe19 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd2a 	bl	800216c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	f043 0302 	orr.w	r3, r3, #2
 8001742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001746:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2223      	movs	r2, #35	; 0x23
 800174c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e000      	b.n	8001756 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176c:	2b23      	cmp	r3, #35	; 0x23
 800176e:	d14a      	bne.n	8001806 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2223      	movs	r2, #35	; 0x23
 8001774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800178e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	f023 0302 	bic.w	r3, r3, #2
 80017a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fdbb 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fccc 	bl	800216c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fda5 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07c      	b.n	8001930 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800183c:	2b23      	cmp	r3, #35	; 0x23
 800183e:	d176      	bne.n	800192e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001840:	2200      	movs	r2, #0
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 ff61 	bl	800270c <ETH_Prepare_Tx_Descriptors>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d009      	beq.n	8001864 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e065      	b.n	8001930 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001864:	f3bf 8f4f 	dsb	sy
}
 8001868:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3206      	adds	r2, #6
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	2b03      	cmp	r3, #3
 8001888:	d904      	bls.n	8001894 <HAL_ETH_Transmit+0x84>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	1f1a      	subs	r2, r3, #4
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3106      	adds	r1, #6
 80018a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80018aa:	f7ff fd3b 	bl	8001324 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018b0:	e037      	b.n	8001922 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d011      	beq.n	80018e8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	f043 0208 	orr.w	r2, r3, #8
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e023      	b.n	8001930 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ee:	d018      	beq.n	8001922 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff fd18 	bl	8001324 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <HAL_ETH_Transmit+0xf6>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10d      	bne.n	8001922 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190c:	f043 0204 	orr.w	r2, r3, #4
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800191c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e006      	b.n	8001930 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	dbc3      	blt.n	80018b2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0a8      	b.n	8001ab6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196a:	2b23      	cmp	r3, #35	; 0x23
 800196c:	d001      	beq.n	8001972 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0a1      	b.n	8001ab6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	3212      	adds	r2, #18
 800197e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001982:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001988:	f1c3 0304 	rsb	r3, r3, #4
 800198c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800198e:	e06a      	b.n	8001a66 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <HAL_ETH_ReadData+0x88>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d040      	beq.n	8001a42 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019f4:	3b04      	subs	r3, #4
 80019f6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f004 fd33 	bl	800648c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	441a      	add	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3301      	adds	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d902      	bls.n	8001a54 <HAL_ETH_ReadData+0x11c>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b04      	subs	r3, #4
 8001a52:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	3212      	adds	r2, #18
 8001a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db06      	blt.n	8001a7c <HAL_ETH_ReadData+0x144>
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d202      	bcs.n	8001a7c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d089      	beq.n	8001990 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	441a      	add	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f815 	bl	8001ac0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001acc:	2301      	movs	r3, #1
 8001ace:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ad4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	3212      	adds	r2, #18
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ae6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ae8:	e040      	b.n	8001b6c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d112      	bne.n	8001b18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fc98 	bl	800642c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	74fb      	strb	r3, [r7, #19]
 8001b06:	e007      	b.n	8001b18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d026      	beq.n	8001b6c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <ETH_UpdateDescriptor+0xe4>)
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	e003      	b.n	8001b36 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001b34:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b36:	f3bf 8f5f 	dmb	sy
}
 8001b3a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d902      	bls.n	8001b5a <ETH_UpdateDescriptor+0x9a>
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3b04      	subs	r3, #4
 8001b58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	3212      	adds	r2, #18
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <ETH_UpdateDescriptor+0xb8>
 8001b72:	7cfb      	ldrb	r3, [r7, #19]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1b8      	bne.n	8001aea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d00c      	beq.n	8001b9c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	80004600 	.word	0x80004600

08001ba8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbe:	2b40      	cmp	r3, #64	; 0x40
 8001bc0:	d112      	bne.n	8001be8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d109      	bne.n	8001be8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_ETH_IRQHandler+0x178>)
 8001be0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8ac 	bl	8001d40 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d113      	bne.n	8001c22 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10a      	bne.n	8001c22 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c1a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f885 	bl	8001d2c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c34:	d14c      	bne.n	8001cd0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c48:	d142      	bne.n	8001cd0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	f043 0208 	orr.w	r2, r3, #8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_ETH_IRQHandler+0x17c>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c98:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	22e0      	movs	r2, #224	; 0xe0
 8001c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ca2:	e012      	b.n	8001cca <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	f248 6380 	movw	r3, #34432	; 0x8680
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f248 6380 	movw	r3, #34432	; 0x8680
 8001cc8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f842 	bl	8001d54 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d10e      	bne.n	8001cfc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f83a 	bl	8001d68 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_ETH_IRQHandler+0x180>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_ETH_IRQHandler+0x180>)
 8001d0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d0e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f833 	bl	8001d7c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	00010040 	.word	0x00010040
 8001d24:	007e2000 	.word	0x007e2000
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 031c 	and.w	r3, r3, #28
 8001dac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	02db      	lsls	r3, r3, #11
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 0302 	bic.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001de0:	f7ff faa0 	bl	8001324 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de6:	e00d      	b.n	8001e04 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001de8:	f7ff fa9c 	bl	8001324 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d301      	bcc.n	8001dfc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e010      	b.n	8001e1e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ec      	bne.n	8001de8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 031c 	and.w	r3, r3, #28
 8001e42:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	02db      	lsls	r3, r3, #11
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e80:	f7ff fa50 	bl	8001324 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e86:	e00d      	b.n	8001ea4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e88:	f7ff fa4c 	bl	8001324 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d301      	bcc.n	8001e9c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e009      	b.n	8001eb0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ec      	bne.n	8001e88 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0d9      	b.n	8002080 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf14      	ite	ne
 8001fe6:	2301      	movne	r3, #1
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	b29a      	uxth	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e00b      	b.n	80020b8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d105      	bne.n	80020b6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020aa:	6839      	ldr	r1, [r7, #0]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f883 	bl	80021b8 <ETH_SetMACConfig>

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 031c 	bic.w	r3, r3, #28
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020d8:	f001 fc5a 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80020dc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_ETH_SetMDIOClockRange+0x98>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d908      	bls.n	80020f8 <HAL_ETH_SetMDIOClockRange+0x38>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d804      	bhi.n	80020f8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e027      	b.n	8002148 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d908      	bls.n	8002112 <HAL_ETH_SetMDIOClockRange+0x52>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d204      	bcs.n	8002112 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 030c 	orr.w	r3, r3, #12
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e01a      	b.n	8002148 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d303      	bcc.n	8002122 <HAL_ETH_SetMDIOClockRange+0x62>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d911      	bls.n	8002146 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d908      	bls.n	800213c <HAL_ETH_SetMDIOClockRange+0x7c>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d804      	bhi.n	800213c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e005      	b.n	8002148 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f043 0310 	orr.w	r3, r3, #16
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e000      	b.n	8002148 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002146:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	611a      	str	r2, [r3, #16]
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	01312cff 	.word	0x01312cff
 800215c:	02160ebf 	.word	0x02160ebf
 8002160:	03938700 	.word	0x03938700
 8002164:	05f5e0ff 	.word	0x05f5e0ff
 8002168:	08f0d17f 	.word	0x08f0d17f

0800216c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800218e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800219c:	2001      	movs	r0, #1
 800219e:	f7ff f8cd 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ac:	6193      	str	r3, [r2, #24]
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4b51      	ldr	r3, [pc, #324]	; (8002314 <ETH_SetMACConfig+0x15c>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7c1b      	ldrb	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <ETH_SetMACConfig+0x28>
 80021da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021de:	e000      	b.n	80021e2 <ETH_SetMACConfig+0x2a>
 80021e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	7c5b      	ldrb	r3, [r3, #17]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <ETH_SetMACConfig+0x38>
 80021ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ee:	e000      	b.n	80021f2 <ETH_SetMACConfig+0x3a>
 80021f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7fdb      	ldrb	r3, [r3, #31]
 80021fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002200:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002206:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	7f92      	ldrb	r2, [r2, #30]
 800220c:	2a00      	cmp	r2, #0
 800220e:	d102      	bne.n	8002216 <ETH_SetMACConfig+0x5e>
 8002210:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002214:	e000      	b.n	8002218 <ETH_SetMACConfig+0x60>
 8002216:	2200      	movs	r2, #0
                        macconf->Speed |
 8002218:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7f1b      	ldrb	r3, [r3, #28]
 800221e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002220:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002226:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800222e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002236:	2a00      	cmp	r2, #0
 8002238:	d102      	bne.n	8002240 <ETH_SetMACConfig+0x88>
 800223a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800223e:	e000      	b.n	8002242 <ETH_SetMACConfig+0x8a>
 8002240:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002242:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	7bdb      	ldrb	r3, [r3, #15]
 8002248:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800224a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002258:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800225a:	4313      	orrs	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002272:	2001      	movs	r0, #1
 8002274:	f7ff f862 	bl	800133c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800228e:	4013      	ands	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002296:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d101      	bne.n	80022a6 <ETH_SetMACConfig+0xee>
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	e000      	b.n	80022a8 <ETH_SetMACConfig+0xf0>
 80022a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022b6:	2a01      	cmp	r2, #1
 80022b8:	d101      	bne.n	80022be <ETH_SetMACConfig+0x106>
 80022ba:	2208      	movs	r2, #8
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0x108>
 80022be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022c8:	2a01      	cmp	r2, #1
 80022ca:	d101      	bne.n	80022d0 <ETH_SetMACConfig+0x118>
 80022cc:	2204      	movs	r2, #4
 80022ce:	e000      	b.n	80022d2 <ETH_SetMACConfig+0x11a>
 80022d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d101      	bne.n	80022e2 <ETH_SetMACConfig+0x12a>
 80022de:	2202      	movs	r2, #2
 80022e0:	e000      	b.n	80022e4 <ETH_SetMACConfig+0x12c>
 80022e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e4:	4313      	orrs	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff f81d 	bl	800133c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	ff20810f 	.word	0xff20810f

08002318 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <ETH_SetDMAConfig+0x110>)
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <ETH_SetDMAConfig+0x2c>
 800233e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002342:	e000      	b.n	8002346 <ETH_SetDMAConfig+0x2e>
 8002344:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	7b5b      	ldrb	r3, [r3, #13]
 800234a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800234c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	7f52      	ldrb	r2, [r2, #29]
 8002352:	2a00      	cmp	r2, #0
 8002354:	d102      	bne.n	800235c <ETH_SetDMAConfig+0x44>
 8002356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800235a:	e000      	b.n	800235e <ETH_SetDMAConfig+0x46>
 800235c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800235e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7b9b      	ldrb	r3, [r3, #14]
 8002364:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002366:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800236c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7f1b      	ldrb	r3, [r3, #28]
 8002372:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002374:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	7f9b      	ldrb	r3, [r3, #30]
 800237a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800237c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002382:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800238a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800238c:	4313      	orrs	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	461a      	mov	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7fe ffc4 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	461a      	mov	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe ff95 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	f8de3f23 	.word	0xf8de3f23

0800242c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0a6      	sub	sp, #152	; 0x98
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002468:	2300      	movs	r3, #0
 800246a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002472:	2300      	movs	r3, #0
 8002474:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800248e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe86 	bl	80021b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024b0:	2301      	movs	r3, #1
 80024b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024d8:	2301      	movs	r3, #1
 80024da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff08 	bl	8002318 <ETH_SetDMAConfig>
}
 8002508:	bf00      	nop
 800250a:	3798      	adds	r7, #152	; 0x98
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3305      	adds	r3, #5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	3204      	adds	r2, #4
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <ETH_MACAddressConfig+0x68>)
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3303      	adds	r3, #3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	061a      	lsls	r2, r3, #24
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3302      	adds	r3, #2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	041b      	lsls	r3, r3, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3301      	adds	r3, #1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	4313      	orrs	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <ETH_MACAddressConfig+0x6c>)
 8002562:	4413      	add	r3, r2
 8002564:	461a      	mov	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6013      	str	r3, [r2, #0]
}
 800256a:	bf00      	nop
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40028040 	.word	0x40028040
 800257c:	40028044 	.word	0x40028044

08002580 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e03e      	b.n	800260c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2200      	movs	r2, #0
 80025b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	3206      	adds	r2, #6
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d80c      	bhi.n	80025f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68d9      	ldr	r1, [r3, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	e004      	b.n	80025fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	461a      	mov	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d9bd      	bls.n	800258e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002624:	611a      	str	r2, [r3, #16]
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e046      	b.n	80026ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6919      	ldr	r1, [r3, #16]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800267c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002684:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	3212      	adds	r2, #18
 800269a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d80c      	bhi.n	80026be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6919      	ldr	r1, [r3, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	e004      	b.n	80026c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d9b5      	bls.n	8002640 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800270c:	b480      	push	{r7}
 800270e:	b08d      	sub	sp, #52	; 0x34
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3318      	adds	r3, #24
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002736:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800274e:	d007      	beq.n	8002760 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	3304      	adds	r3, #4
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	e0ff      	b.n	8002964 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3301      	adds	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4b7d      	ldr	r3, [pc, #500]	; (8002970 <ETH_Prepare_Tx_Descriptors+0x264>)
 800277a:	4013      	ands	r3, r2
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	6852      	ldr	r2, [r2, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	431a      	orrs	r2, r3
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	431a      	orrs	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80027e6:	f3bf 8f5f 	dmb	sy
}
 80027ea:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027f8:	e082      	b.n	8002900 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d006      	beq.n	800281a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e005      	b.n	8002826 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	3301      	adds	r3, #1
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	2b03      	cmp	r3, #3
 8002830:	d902      	bls.n	8002838 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	3b04      	subs	r3, #4
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285a:	d007      	beq.n	800286c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	3304      	adds	r3, #4
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d029      	beq.n	80028c0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
 800287e:	e019      	b.n	80028b4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002880:	f3bf 8f5f 	dmb	sy
}
 8002884:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	3301      	adds	r3, #1
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b03      	cmp	r3, #3
 800289c:	d902      	bls.n	80028a4 <ETH_Prepare_Tx_Descriptors+0x198>
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	3b04      	subs	r3, #4
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	3301      	adds	r3, #1
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3e1      	bcc.n	8002880 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	e051      	b.n	8002964 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3301      	adds	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <ETH_Prepare_Tx_Descriptors+0x264>)
 80028dc:	4013      	ands	r3, r2
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	6852      	ldr	r2, [r2, #4]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028ee:	f3bf 8f5f 	dmb	sy
}
 80028f2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af78 	bne.w	80027fa <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e005      	b.n	800292a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	3304      	adds	r3, #4
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800295e:	b662      	cpsie	i
}
 8002960:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3734      	adds	r7, #52	; 0x34
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	ffffe000 	.word	0xffffe000

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e175      	b.n	8002c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f040 8164 	bne.w	8002c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d005      	beq.n	80029ca <HAL_GPIO_Init+0x56>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d130      	bne.n	8002a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 0201 	and.w	r2, r3, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d017      	beq.n	8002a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d123      	bne.n	8002abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	69b9      	ldr	r1, [r7, #24]
 8002ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80be 	beq.w	8002c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a65      	ldr	r2, [pc, #404]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <HAL_GPIO_Init+0x328>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_GPIO_Init+0x32c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d037      	beq.n	8002bb2 <HAL_GPIO_Init+0x23e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a57      	ldr	r2, [pc, #348]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d031      	beq.n	8002bae <HAL_GPIO_Init+0x23a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a56      	ldr	r2, [pc, #344]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x236>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a55      	ldr	r2, [pc, #340]	; (8002cac <HAL_GPIO_Init+0x338>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x232>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_GPIO_Init+0x33c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x22e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <HAL_GPIO_Init+0x340>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x22a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x344>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x226>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <HAL_GPIO_Init+0x348>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <HAL_GPIO_Init+0x34c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x21a>
 8002b8a:	2309      	movs	r3, #9
 8002b8c:	e012      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b8e:	230a      	movs	r3, #10
 8002b90:	e010      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e00e      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00c      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00a      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002b9e:	2305      	movs	r3, #5
 8002ba0:	e008      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e004      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e002      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_GPIO_Init+0x240>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f002 0203 	and.w	r2, r2, #3
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	4093      	lsls	r3, r2
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc4:	4935      	ldr	r1, [pc, #212]	; (8002c9c <HAL_GPIO_Init+0x328>)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf6:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c20:	4a29      	ldr	r2, [pc, #164]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c50:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_GPIO_Init+0x354>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f67f ae86 	bls.w	8002994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3724      	adds	r7, #36	; 0x24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40020800 	.word	0x40020800
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40021400 	.word	0x40021400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40021c00 	.word	0x40021c00
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40022400 	.word	0x40022400
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d00:	b08f      	sub	sp, #60	; 0x3c
 8002d02:	af0a      	add	r7, sp, #40	; 0x28
 8002d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e116      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd feea 	bl	8000b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2203      	movs	r2, #3
 8002d34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fc02 	bl	8005558 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	687e      	ldr	r6, [r7, #4]
 8002d5c:	466d      	mov	r5, sp
 8002d5e:	f106 0410 	add.w	r4, r6, #16
 8002d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d72:	1d33      	adds	r3, r6, #4
 8002d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	f002 fb96 	bl	80054a8 <USB_CoreInit>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0d7      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fbf0 	bl	800557a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e04a      	b.n	8002e36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	333d      	adds	r3, #61	; 0x3d
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	333c      	adds	r3, #60	; 0x3c
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	b298      	uxth	r0, r3
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	4602      	mov	r2, r0
 8002dde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3340      	adds	r3, #64	; 0x40
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3348      	adds	r3, #72	; 0x48
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334c      	adds	r3, #76	; 0x4c
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3354      	adds	r3, #84	; 0x54
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	3301      	adds	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d3af      	bcc.n	8002da0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	e044      	b.n	8002ed0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d3b5      	bcc.n	8002e46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	687e      	ldr	r6, [r7, #4]
 8002ee2:	466d      	mov	r5, sp
 8002ee4:	f106 0410 	add.w	r4, r6, #16
 8002ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ef8:	1d33      	adds	r3, r6, #4
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f002 fb89 	bl	8005614 <USB_DevInit>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e014      	b.n	8002f3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f80b 	bl	8002f48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fd47 	bl	80059ca <USB_DevDisconnect>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	10000003 	.word	0x10000003

08002f90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40007000 	.word	0x40007000

08002fb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fde:	f7fe f9a1 	bl	8001324 <HAL_GetTick>
 8002fe2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe4:	e009      	b.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe6:	f7fe f99d 	bl	8001324 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff4:	d901      	bls.n	8002ffa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e022      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d1ee      	bne.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003012:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003014:	f7fe f986 	bl	8001324 <HAL_GetTick>
 8003018:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301a:	e009      	b.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800301c:	f7fe f982 	bl	8001324 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	d901      	bls.n	8003030 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e007      	b.n	8003040 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303c:	d1ee      	bne.n	800301c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e29b      	b.n	800359e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	4b96      	ldr	r3, [pc, #600]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00c      	beq.n	800309a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003080:	4b93      	ldr	r3, [pc, #588]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
 800308c:	4b90      	ldr	r3, [pc, #576]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06c      	beq.n	8003180 <HAL_RCC_OscConfig+0x130>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e275      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x7a>
 80030bc:	4b84      	ldr	r3, [pc, #528]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a83      	ldr	r2, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x9c>
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7b      	ldr	r2, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xc0>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd8>
 8003110:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe f8f8 	bl	8001324 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe f8f4 	bl	8001324 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e229      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe f8e4 	bl	8001324 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe f8e0 	bl	8001324 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e215      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x110>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d069      	beq.n	8003262 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1e9      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	493d      	ldr	r1, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e040      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d023      	beq.n	8003230 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f896 	bl	8001324 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fc:	f7fe f892 	bl	8001324 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1c7      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4929      	ldr	r1, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
 800322e:	e018      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f872 	bl	8001324 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7fe f86e 	bl	8001324 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1a3      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d038      	beq.n	80032e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe f84f 	bl	8001324 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe f84b 	bl	8001324 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e180      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x23a>
 80032a8:	e01a      	b.n	80032e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032aa:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4a08      	ldr	r2, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x280>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe f835 	bl	8001324 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032be:	f7fe f831 	bl	8001324 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d903      	bls.n	80032d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e166      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
 80032d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a4 	beq.w	8003436 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b89      	ldr	r3, [pc, #548]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a88      	ldr	r2, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b86      	ldr	r3, [pc, #536]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	4b83      	ldr	r3, [pc, #524]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003322:	4b80      	ldr	r3, [pc, #512]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a7f      	ldr	r2, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fd fff9 	bl	8001324 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fff5 	bl	8001324 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e12a      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x4d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x31a>
 800335c:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a6f      	ldr	r2, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x33c>
 8003372:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b68      	ldr	r3, [pc, #416]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x35e>
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a61      	ldr	r2, [pc, #388]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a58      	ldr	r2, [pc, #352]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fd ffa9 	bl	8001324 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fd ffa5 	bl	8001324 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x386>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fd ff93 	bl	8001324 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd ff8f 	bl	8001324 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0c2      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a3c      	ldr	r2, [pc, #240]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80ae 	beq.w	800359c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d06d      	beq.n	8003528 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d14b      	bne.n	80034ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fd ff60 	bl	8001324 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7fd ff5c 	bl	8001324 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e091      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd ff2e 	bl	8001324 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd ff2a 	bl	8001324 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e05f      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x47c>
 80034ea:	e057      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fd ff14 	bl	8001324 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd ff10 	bl	8001324 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e045      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x4d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x4b0>
 800351e:	e03d      	b.n	800359c <HAL_RCC_OscConfig+0x54c>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_RCC_OscConfig+0x558>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d129      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d122      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003560:	4293      	cmp	r3, r2
 8003562:	d119      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d10f      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800

080035ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0d0      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 020f 	bic.w	r2, r3, #15
 80035da:	4965      	ldr	r1, [pc, #404]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0b8      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d020      	beq.n	8003642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b50      	ldr	r3, [pc, #320]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	494d      	ldr	r1, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d040      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d107      	bne.n	8003666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d115      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e07f      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e073      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06b      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f023 0203 	bic.w	r2, r3, #3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4936      	ldr	r1, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fd fe40 	bl	8001324 <HAL_GetTick>
 80036a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a6:	e00a      	b.n	80036be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a8:	f7fd fe3c 	bl	8001324 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e053      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 020c 	and.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1eb      	bne.n	80036a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d210      	bcs.n	8003700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4922      	ldr	r1, [pc, #136]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e032      	b.n	8003766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4916      	ldr	r1, [pc, #88]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373e:	f000 f821 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8003742:	4602      	mov	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	490a      	ldr	r1, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x1cc>)
 8003750:	5ccb      	ldrb	r3, [r1, r3]
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1d0>)
 8003758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fd9c 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00
 8003774:	40023800 	.word	0x40023800
 8003778:	0800d934 	.word	0x0800d934
 800377c:	20000000 	.word	0x20000000
 8003780:	20000004 	.word	0x20000004

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b094      	sub	sp, #80	; 0x50
 800378a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379c:	4b79      	ldr	r3, [pc, #484]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d00d      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x40>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 80e1 	bhi.w	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x34>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x3a>
 80037b6:	e0db      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037bc:	e0db      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <HAL_RCC_GetSysClockFreq+0x208>)
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037c2:	e0d8      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4621      	mov	r1, r4
 8003810:	1a51      	subs	r1, r2, r1
 8003812:	6139      	str	r1, [r7, #16]
 8003814:	4629      	mov	r1, r5
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003832:	4651      	mov	r1, sl
 8003834:	018a      	lsls	r2, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ebb2 0801 	subs.w	r8, r2, r1
 800383c:	4659      	mov	r1, fp
 800383e:	eb63 0901 	sbc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	462b      	mov	r3, r5
 8003864:	eb49 0303 	adc.w	r3, r9, r3
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003876:	4629      	mov	r1, r5
 8003878:	024b      	lsls	r3, r1, #9
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003880:	4621      	mov	r1, r4
 8003882:	024a      	lsls	r2, r1, #9
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003894:	f7fc fd24 	bl	80002e0 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	e058      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ce:	0150      	lsls	r0, r2, #5
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4641      	mov	r1, r8
 80038d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038da:	4649      	mov	r1, r9
 80038dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f4:	ebb2 040a 	subs.w	r4, r2, sl
 80038f8:	eb63 050b 	sbc.w	r5, r3, fp
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	61fa      	str	r2, [r7, #28]
 8003944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003948:	f7fc fcca 	bl	80002e0 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800396e:	e002      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetSysClockFreq+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	; 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	0800d944 	.word	0x0800d944

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	0800d944 	.word	0x0800d944

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a20:	4b69      	ldr	r3, [pc, #420]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a68      	ldr	r2, [pc, #416]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	4964      	ldr	r1, [pc, #400]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a52:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	4959      	ldr	r1, [pc, #356]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8e:	4b4e      	ldr	r3, [pc, #312]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	494a      	ldr	r1, [pc, #296]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808b 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae8:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fc10 	bl	8001324 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd fc0c 	bl	8001324 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e38f      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d035      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d02e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b6c:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d114      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fbd4 	bl	8001324 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd fbd0 	bl	8001324 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e351      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4901      	ldr	r1, [pc, #4]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	0ffffcff 	.word	0x0ffffcff
 8003bd4:	4bac      	ldr	r3, [pc, #688]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4aab      	ldr	r2, [pc, #684]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	4ba9      	ldr	r3, [pc, #676]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	49a6      	ldr	r1, [pc, #664]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfe:	4ba2      	ldr	r3, [pc, #648]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c04:	4aa0      	ldr	r2, [pc, #640]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c0e:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	499b      	ldr	r1, [pc, #620]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2c:	4b96      	ldr	r3, [pc, #600]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c3a:	4993      	ldr	r1, [pc, #588]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4e:	4b8e      	ldr	r3, [pc, #568]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5c:	498a      	ldr	r1, [pc, #552]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c70:	4b85      	ldr	r3, [pc, #532]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	4982      	ldr	r1, [pc, #520]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c92:	4b7d      	ldr	r3, [pc, #500]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4979      	ldr	r1, [pc, #484]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb4:	4b74      	ldr	r3, [pc, #464]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4971      	ldr	r1, [pc, #452]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd6:	4b6c      	ldr	r3, [pc, #432]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 020c 	bic.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	4968      	ldr	r1, [pc, #416]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf8:	4b63      	ldr	r3, [pc, #396]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	4960      	ldr	r1, [pc, #384]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	4957      	ldr	r1, [pc, #348]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3c:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	494f      	ldr	r1, [pc, #316]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5e:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	4946      	ldr	r1, [pc, #280]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	493e      	ldr	r1, [pc, #248]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	4935      	ldr	r1, [pc, #212]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	492d      	ldr	r1, [pc, #180]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df4:	4924      	ldr	r1, [pc, #144]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e34:	4914      	ldr	r1, [pc, #80]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e58:	490b      	ldr	r1, [pc, #44]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00f      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7c:	4902      	ldr	r1, [pc, #8]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e98:	4b8a      	ldr	r3, [pc, #552]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	4986      	ldr	r1, [pc, #536]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ebc:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	497d      	ldr	r1, [pc, #500]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d006      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80d6 	beq.w	8004094 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee8:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fa16 	bl	8001324 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003efc:	f7fd fa12 	bl	8001324 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e195      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f0e:	4b6d      	ldr	r3, [pc, #436]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d021      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f3c:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f42:	0e1b      	lsrs	r3, r3, #24
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	019a      	lsls	r2, r3, #6
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	4958      	ldr	r1, [pc, #352]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f94:	d129      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f96:	4b4b      	ldr	r3, [pc, #300]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa4:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	493e      	ldr	r1, [pc, #248]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	f023 021f 	bic.w	r2, r3, #31
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4938      	ldr	r1, [pc, #224]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffc:	0e1b      	lsrs	r3, r3, #24
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004004:	4b2f      	ldr	r3, [pc, #188]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400a:	0f1b      	lsrs	r3, r3, #28
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	019a      	lsls	r2, r3, #6
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	071b      	lsls	r3, r3, #28
 800402a:	4926      	ldr	r1, [pc, #152]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d011      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	019a      	lsls	r2, r3, #6
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	491a      	ldr	r1, [pc, #104]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fd f959 	bl	8001324 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004076:	f7fd f955 	bl	8001324 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0d8      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004088:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	f040 80ce 	bne.w	8004238 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800409c:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a8:	f7fd f93c 	bl	8001324 <HAL_GetTick>
 80040ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040ae:	e00b      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b0:	f7fd f938 	bl	8001324 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d904      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e0bb      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c8:	4b5e      	ldr	r3, [pc, #376]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040d4:	d0ec      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d12a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040fe:	4b51      	ldr	r3, [pc, #324]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800410c:	4b4d      	ldr	r3, [pc, #308]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	0f1b      	lsrs	r3, r3, #28
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	431a      	orrs	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4944      	ldr	r1, [pc, #272]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800413a:	4b42      	ldr	r3, [pc, #264]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	493d      	ldr	r1, [pc, #244]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d022      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004168:	d11d      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004178:	4b32      	ldr	r3, [pc, #200]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	0f1b      	lsrs	r3, r3, #28
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	019a      	lsls	r2, r3, #6
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	4929      	ldr	r1, [pc, #164]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d028      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	0e1b      	lsrs	r3, r3, #24
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041c0:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	0c1b      	lsrs	r3, r3, #16
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4911      	ldr	r1, [pc, #68]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0e      	ldr	r2, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fd f888 	bl	8001324 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004218:	f7fd f884 	bl	8001324 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e007      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004236:	d1ef      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e049      	b.n	80042ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fbc4 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fac0 	bl	800480c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d001      	beq.n	8004310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e054      	b.n	80043ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d01d      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIM_Base_Start_IT+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d115      	bne.n	80043a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d015      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0xbe>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d011      	beq.n	80043b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	e008      	b.n	80043b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e000      	b.n	80043b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40010400 	.word	0x40010400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40001800 	.word	0x40001800
 80043e4:	00010007 	.word	0x00010007

080043e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0202 	mvn.w	r2, #2
 8004414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9d0 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9c2 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9d3 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0204 	mvn.w	r2, #4
 8004468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f9a6 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f998 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f9a9 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0208 	mvn.w	r2, #8
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f97c 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f96e 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f97f 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b10      	cmp	r3, #16
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0210 	mvn.w	r2, #16
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2208      	movs	r2, #8
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f952 	bl	80047d0 <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f944 	bl	80047bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f955 	bl	80047e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0201 	mvn.w	r2, #1
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc f83c 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fb0c 	bl	8004bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d10e      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d107      	bne.n	80045c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 faff 	bl	8004bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d10e      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d107      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f903 	bl	80047f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b20      	cmp	r3, #32
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0220 	mvn.w	r2, #32
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fabf 	bl	8004b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_TIM_ConfigClockSource+0x1c>
 8004640:	2302      	movs	r3, #2
 8004642:	e0b4      	b.n	80047ae <HAL_TIM_ConfigClockSource+0x186>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <HAL_TIM_ConfigClockSource+0x190>)
 8004660:	4013      	ands	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	d03e      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0xd4>
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004682:	f200 8087 	bhi.w	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	f000 8086 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x172>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d87f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d01a      	beq.n	80046ce <HAL_TIM_ConfigClockSource+0xa6>
 8004698:	2b70      	cmp	r3, #112	; 0x70
 800469a:	d87b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b60      	cmp	r3, #96	; 0x60
 800469e:	d050      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x11a>
 80046a0:	2b60      	cmp	r3, #96	; 0x60
 80046a2:	d877      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b50      	cmp	r3, #80	; 0x50
 80046a6:	d03c      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0xfa>
 80046a8:	2b50      	cmp	r3, #80	; 0x50
 80046aa:	d873      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d058      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x13a>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d86f      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d064      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d86b      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d060      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d867      	bhi.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d05a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	e062      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f000 f9af 	bl	8004a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
      break;
 80046fa:	e04f      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f000 f998 	bl	8004a40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471e:	609a      	str	r2, [r3, #8]
      break;
 8004720:	e03c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	461a      	mov	r2, r3
 8004730:	f000 f90c 	bl	800494c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2150      	movs	r1, #80	; 0x50
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f965 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004740:	e02c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	f000 f92b 	bl	80049aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2160      	movs	r1, #96	; 0x60
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f955 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004760:	e01c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	f000 f8ec 	bl	800494c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f945 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004780:	e00c      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f000 f93c 	bl	8004a0a <TIM_ITRx_SetConfig>
      break;
 8004792:	e003      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	73fb      	strb	r3, [r7, #15]
      break;
 8004798:	e000      	b.n	800479c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	fffeff88 	.word	0xfffeff88

080047bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <TIM_Base_SetConfig+0x114>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d013      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d00f      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <TIM_Base_SetConfig+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3c      	ldr	r2, [pc, #240]	; (8004928 <TIM_Base_SetConfig+0x11c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <TIM_Base_SetConfig+0x120>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3a      	ldr	r2, [pc, #232]	; (8004930 <TIM_Base_SetConfig+0x124>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d108      	bne.n	800485e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <TIM_Base_SetConfig+0x114>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d02b      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486c:	d027      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <TIM_Base_SetConfig+0x118>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d023      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <TIM_Base_SetConfig+0x11c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01f      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2a      	ldr	r2, [pc, #168]	; (800492c <TIM_Base_SetConfig+0x120>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01b      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <TIM_Base_SetConfig+0x124>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d017      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a28      	ldr	r2, [pc, #160]	; (8004934 <TIM_Base_SetConfig+0x128>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <TIM_Base_SetConfig+0x12c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d00f      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <TIM_Base_SetConfig+0x130>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <TIM_Base_SetConfig+0x134>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a24      	ldr	r2, [pc, #144]	; (8004944 <TIM_Base_SetConfig+0x138>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a23      	ldr	r2, [pc, #140]	; (8004948 <TIM_Base_SetConfig+0x13c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <TIM_Base_SetConfig+0x114>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0xf8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <TIM_Base_SetConfig+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d103      	bne.n	800490c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	615a      	str	r2, [r3, #20]
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40010400 	.word	0x40010400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800
 8004940:	40001800 	.word	0x40001800
 8004944:	40001c00 	.word	0x40001c00
 8004948:	40002000 	.word	0x40002000

0800494c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 030a 	bic.w	r3, r3, #10
 8004988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0210 	bic.w	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f043 0307 	orr.w	r3, r3, #7
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	021a      	lsls	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e06d      	b.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ad2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d022      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d01d      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d018      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d009      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d10c      	bne.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40001800 	.word	0x40001800

08004b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e040      	b.n	8004c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fb ff22 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f82c 	bl	8004c74 <UART_SetConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa84 	bl	800513c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb0b 	bl	8005280 <UART_CheckIdleState>
 8004c6a:	4603      	mov	r3, r0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b088      	sub	sp, #32
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4ba6      	ldr	r3, [pc, #664]	; (8004f38 <UART_SetConfig+0x2c4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a94      	ldr	r2, [pc, #592]	; (8004f3c <UART_SetConfig+0x2c8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d120      	bne.n	8004d32 <UART_SetConfig+0xbe>
 8004cf0:	4b93      	ldr	r3, [pc, #588]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d816      	bhi.n	8004d2c <UART_SetConfig+0xb8>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x90>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d21 	.word	0x08004d21
 8004d0c:	08004d1b 	.word	0x08004d1b
 8004d10:	08004d27 	.word	0x08004d27
 8004d14:	2301      	movs	r3, #1
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e150      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e14d      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d20:	2304      	movs	r3, #4
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e14a      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d26:	2308      	movs	r3, #8
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e147      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e144      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a83      	ldr	r2, [pc, #524]	; (8004f44 <UART_SetConfig+0x2d0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d132      	bne.n	8004da2 <UART_SetConfig+0x12e>
 8004d3c:	4b80      	ldr	r3, [pc, #512]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	d828      	bhi.n	8004d9c <UART_SetConfig+0x128>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0xdc>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004d9d 	.word	0x08004d9d
 8004d58:	08004d9d 	.word	0x08004d9d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004d8b 	.word	0x08004d8b
 8004d74:	08004d9d 	.word	0x08004d9d
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004d9d 	.word	0x08004d9d
 8004d80:	08004d97 	.word	0x08004d97
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
 8004d88:	e118      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e115      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d90:	2304      	movs	r3, #4
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e112      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d96:	2308      	movs	r3, #8
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e10f      	b.n	8004fbc <UART_SetConfig+0x348>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e10c      	b.n	8004fbc <UART_SetConfig+0x348>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a68      	ldr	r2, [pc, #416]	; (8004f48 <UART_SetConfig+0x2d4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d120      	bne.n	8004dee <UART_SetConfig+0x17a>
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004db6:	2b30      	cmp	r3, #48	; 0x30
 8004db8:	d013      	beq.n	8004de2 <UART_SetConfig+0x16e>
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d814      	bhi.n	8004de8 <UART_SetConfig+0x174>
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d009      	beq.n	8004dd6 <UART_SetConfig+0x162>
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d810      	bhi.n	8004de8 <UART_SetConfig+0x174>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <UART_SetConfig+0x15c>
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d006      	beq.n	8004ddc <UART_SetConfig+0x168>
 8004dce:	e00b      	b.n	8004de8 <UART_SetConfig+0x174>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	77fb      	strb	r3, [r7, #31]
 8004dd4:	e0f2      	b.n	8004fbc <UART_SetConfig+0x348>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e0ef      	b.n	8004fbc <UART_SetConfig+0x348>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e0ec      	b.n	8004fbc <UART_SetConfig+0x348>
 8004de2:	2308      	movs	r3, #8
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e0e9      	b.n	8004fbc <UART_SetConfig+0x348>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e0e6      	b.n	8004fbc <UART_SetConfig+0x348>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a56      	ldr	r2, [pc, #344]	; (8004f4c <UART_SetConfig+0x2d8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d120      	bne.n	8004e3a <UART_SetConfig+0x1c6>
 8004df8:	4b51      	ldr	r3, [pc, #324]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e02:	2bc0      	cmp	r3, #192	; 0xc0
 8004e04:	d013      	beq.n	8004e2e <UART_SetConfig+0x1ba>
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d814      	bhi.n	8004e34 <UART_SetConfig+0x1c0>
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d009      	beq.n	8004e22 <UART_SetConfig+0x1ae>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d810      	bhi.n	8004e34 <UART_SetConfig+0x1c0>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <UART_SetConfig+0x1a8>
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d006      	beq.n	8004e28 <UART_SetConfig+0x1b4>
 8004e1a:	e00b      	b.n	8004e34 <UART_SetConfig+0x1c0>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e0cc      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e22:	2302      	movs	r3, #2
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e0c9      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e0c6      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e0c3      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e34:	2310      	movs	r3, #16
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e0c0      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a44      	ldr	r2, [pc, #272]	; (8004f50 <UART_SetConfig+0x2dc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d125      	bne.n	8004e90 <UART_SetConfig+0x21c>
 8004e44:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e52:	d017      	beq.n	8004e84 <UART_SetConfig+0x210>
 8004e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e58:	d817      	bhi.n	8004e8a <UART_SetConfig+0x216>
 8004e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5e:	d00b      	beq.n	8004e78 <UART_SetConfig+0x204>
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e64:	d811      	bhi.n	8004e8a <UART_SetConfig+0x216>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <UART_SetConfig+0x1fe>
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6e:	d006      	beq.n	8004e7e <UART_SetConfig+0x20a>
 8004e70:	e00b      	b.n	8004e8a <UART_SetConfig+0x216>
 8004e72:	2300      	movs	r3, #0
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e0a1      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e09e      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e7e:	2304      	movs	r3, #4
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e09b      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e84:	2308      	movs	r3, #8
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e098      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e095      	b.n	8004fbc <UART_SetConfig+0x348>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2f      	ldr	r2, [pc, #188]	; (8004f54 <UART_SetConfig+0x2e0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d125      	bne.n	8004ee6 <UART_SetConfig+0x272>
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea8:	d017      	beq.n	8004eda <UART_SetConfig+0x266>
 8004eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eae:	d817      	bhi.n	8004ee0 <UART_SetConfig+0x26c>
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d00b      	beq.n	8004ece <UART_SetConfig+0x25a>
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	d811      	bhi.n	8004ee0 <UART_SetConfig+0x26c>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <UART_SetConfig+0x254>
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec4:	d006      	beq.n	8004ed4 <UART_SetConfig+0x260>
 8004ec6:	e00b      	b.n	8004ee0 <UART_SetConfig+0x26c>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e076      	b.n	8004fbc <UART_SetConfig+0x348>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e073      	b.n	8004fbc <UART_SetConfig+0x348>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e070      	b.n	8004fbc <UART_SetConfig+0x348>
 8004eda:	2308      	movs	r3, #8
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e06d      	b.n	8004fbc <UART_SetConfig+0x348>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e06a      	b.n	8004fbc <UART_SetConfig+0x348>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <UART_SetConfig+0x2e4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d138      	bne.n	8004f62 <UART_SetConfig+0x2ee>
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <UART_SetConfig+0x2cc>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004efe:	d017      	beq.n	8004f30 <UART_SetConfig+0x2bc>
 8004f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f04:	d82a      	bhi.n	8004f5c <UART_SetConfig+0x2e8>
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0a:	d00b      	beq.n	8004f24 <UART_SetConfig+0x2b0>
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f10:	d824      	bhi.n	8004f5c <UART_SetConfig+0x2e8>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <UART_SetConfig+0x2aa>
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d006      	beq.n	8004f2a <UART_SetConfig+0x2b6>
 8004f1c:	e01e      	b.n	8004f5c <UART_SetConfig+0x2e8>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e04b      	b.n	8004fbc <UART_SetConfig+0x348>
 8004f24:	2302      	movs	r3, #2
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e048      	b.n	8004fbc <UART_SetConfig+0x348>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e045      	b.n	8004fbc <UART_SetConfig+0x348>
 8004f30:	2308      	movs	r3, #8
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e042      	b.n	8004fbc <UART_SetConfig+0x348>
 8004f36:	bf00      	nop
 8004f38:	efff69f3 	.word	0xefff69f3
 8004f3c:	40011000 	.word	0x40011000
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40004400 	.word	0x40004400
 8004f48:	40004800 	.word	0x40004800
 8004f4c:	40004c00 	.word	0x40004c00
 8004f50:	40005000 	.word	0x40005000
 8004f54:	40011400 	.word	0x40011400
 8004f58:	40007800 	.word	0x40007800
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e02c      	b.n	8004fbc <UART_SetConfig+0x348>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a72      	ldr	r2, [pc, #456]	; (8005130 <UART_SetConfig+0x4bc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d125      	bne.n	8004fb8 <UART_SetConfig+0x344>
 8004f6c:	4b71      	ldr	r3, [pc, #452]	; (8005134 <UART_SetConfig+0x4c0>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f7a:	d017      	beq.n	8004fac <UART_SetConfig+0x338>
 8004f7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f80:	d817      	bhi.n	8004fb2 <UART_SetConfig+0x33e>
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	d00b      	beq.n	8004fa0 <UART_SetConfig+0x32c>
 8004f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8c:	d811      	bhi.n	8004fb2 <UART_SetConfig+0x33e>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <UART_SetConfig+0x326>
 8004f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f96:	d006      	beq.n	8004fa6 <UART_SetConfig+0x332>
 8004f98:	e00b      	b.n	8004fb2 <UART_SetConfig+0x33e>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e00d      	b.n	8004fbc <UART_SetConfig+0x348>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e00a      	b.n	8004fbc <UART_SetConfig+0x348>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e007      	b.n	8004fbc <UART_SetConfig+0x348>
 8004fac:	2308      	movs	r3, #8
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e004      	b.n	8004fbc <UART_SetConfig+0x348>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e001      	b.n	8004fbc <UART_SetConfig+0x348>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	d15b      	bne.n	800507e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d828      	bhi.n	800501e <UART_SetConfig+0x3aa>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0x360>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	0800501f 	.word	0x0800501f
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	0800501f 	.word	0x0800501f
 8004ff0:	0800501f 	.word	0x0800501f
 8004ff4:	08005017 	.word	0x08005017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7fe fcd6 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8004ffc:	61b8      	str	r0, [r7, #24]
        break;
 8004ffe:	e013      	b.n	8005028 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7fe fce6 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 8005004:	61b8      	str	r0, [r7, #24]
        break;
 8005006:	e00f      	b.n	8005028 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005008:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <UART_SetConfig+0x4c4>)
 800500a:	61bb      	str	r3, [r7, #24]
        break;
 800500c:	e00c      	b.n	8005028 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fe fbb9 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8005012:	61b8      	str	r0, [r7, #24]
        break;
 8005014:	e008      	b.n	8005028 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e004      	b.n	8005028 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	77bb      	strb	r3, [r7, #30]
        break;
 8005026:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d074      	beq.n	8005118 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	005a      	lsls	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	441a      	add	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d916      	bls.n	8005078 <UART_SetConfig+0x404>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005050:	d212      	bcs.n	8005078 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f023 030f 	bic.w	r3, r3, #15
 800505a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	b29b      	uxth	r3, r3
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	b29a      	uxth	r2, r3
 8005068:	89fb      	ldrh	r3, [r7, #14]
 800506a:	4313      	orrs	r3, r2
 800506c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	89fa      	ldrh	r2, [r7, #14]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e04f      	b.n	8005118 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77bb      	strb	r3, [r7, #30]
 800507c:	e04c      	b.n	8005118 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800507e:	7ffb      	ldrb	r3, [r7, #31]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d828      	bhi.n	80050d6 <UART_SetConfig+0x462>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0x418>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c7 	.word	0x080050c7
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050d7 	.word	0x080050d7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b0:	f7fe fc7a 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 80050b4:	61b8      	str	r0, [r7, #24]
        break;
 80050b6:	e013      	b.n	80050e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b8:	f7fe fc8a 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 80050bc:	61b8      	str	r0, [r7, #24]
        break;
 80050be:	e00f      	b.n	80050e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <UART_SetConfig+0x4c4>)
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e00c      	b.n	80050e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe fb5d 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80050ca:	61b8      	str	r0, [r7, #24]
        break;
 80050cc:	e008      	b.n	80050e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d2:	61bb      	str	r3, [r7, #24]
        break;
 80050d4:	e004      	b.n	80050e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77bb      	strb	r3, [r7, #30]
        break;
 80050de:	bf00      	nop
    }

    if (pclk != 0U)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	085a      	lsrs	r2, r3, #1
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	441a      	add	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b0f      	cmp	r3, #15
 80050fe:	d909      	bls.n	8005114 <UART_SetConfig+0x4a0>
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d205      	bcs.n	8005114 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e001      	b.n	8005118 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005124:	7fbb      	ldrb	r3, [r7, #30]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40007c00 	.word	0x40007c00
 8005134:	40023800 	.word	0x40023800
 8005138:	00f42400 	.word	0x00f42400

0800513c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d10a      	bne.n	8005252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005290:	f7fc f848 	bl	8001324 <HAL_GetTick>
 8005294:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10e      	bne.n	80052c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f831 	bl	800531a <UART_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e027      	b.n	8005312 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d10e      	bne.n	80052ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f81b 	bl	800531a <UART_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e011      	b.n	8005312 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b09c      	sub	sp, #112	; 0x70
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532a:	e0a7      	b.n	800547c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005332:	f000 80a3 	beq.w	800547c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fb fff5 	bl	8001324 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <UART_WaitOnFlagUntilTimeout+0x32>
 8005346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005348:	2b00      	cmp	r3, #0
 800534a:	d13f      	bne.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005360:	667b      	str	r3, [r7, #100]	; 0x64
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e6      	bne.n	800534c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3308      	adds	r3, #8
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	663b      	str	r3, [r7, #96]	; 0x60
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3308      	adds	r3, #8
 800539c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800539e:	64ba      	str	r2, [r7, #72]	; 0x48
 80053a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e068      	b.n	800549e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d050      	beq.n	800547c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e8:	d148      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005408:	66fb      	str	r3, [r7, #108]	; 0x6c
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
 8005414:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e6      	bne.n	80053f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	613b      	str	r3, [r7, #16]
   return(result);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	66bb      	str	r3, [r7, #104]	; 0x68
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005446:	623a      	str	r2, [r7, #32]
 8005448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	69f9      	ldr	r1, [r7, #28]
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	61bb      	str	r3, [r7, #24]
   return(result);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e010      	b.n	800549e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	429a      	cmp	r2, r3
 8005498:	f43f af48 	beq.w	800532c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3770      	adds	r7, #112	; 0x70
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 001c 	add.w	r0, r7, #28
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d120      	bne.n	8005502 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	4b20      	ldr	r3, [pc, #128]	; (8005554 <USB_CoreInit+0xac>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa96 	bl	8005a28 <USB_CoreReset>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
 8005500:	e010      	b.n	8005524 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa8a 	bl	8005a28 <USB_CoreReset>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10b      	bne.n	8005542 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f043 0206 	orr.w	r2, r3, #6
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554e:	b004      	add	sp, #16
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	ffbdffbf 	.word	0xffbdffbf

08005558 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f023 0201 	bic.w	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d115      	bne.n	80055c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055a8:	2001      	movs	r0, #1
 80055aa:	f7fb fec7 	bl	800133c <HAL_Delay>
      ms++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3301      	adds	r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fa29 	bl	8005a0c <USB_GetMode>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d01e      	beq.n	80055fe <USB_SetCurrentMode+0x84>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b31      	cmp	r3, #49	; 0x31
 80055c4:	d9f0      	bls.n	80055a8 <USB_SetCurrentMode+0x2e>
 80055c6:	e01a      	b.n	80055fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d115      	bne.n	80055fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055da:	2001      	movs	r0, #1
 80055dc:	f7fb feae 	bl	800133c <HAL_Delay>
      ms++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa10 	bl	8005a0c <USB_GetMode>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <USB_SetCurrentMode+0x84>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b31      	cmp	r3, #49	; 0x31
 80055f6:	d9f0      	bls.n	80055da <USB_SetCurrentMode+0x60>
 80055f8:	e001      	b.n	80055fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e005      	b.n	800560a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b32      	cmp	r3, #50	; 0x32
 8005602:	d101      	bne.n	8005608 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005614:	b084      	sub	sp, #16
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	e009      	b.n	8005648 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	3340      	adds	r3, #64	; 0x40
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	2200      	movs	r2, #0
 8005640:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	3301      	adds	r3, #1
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b0e      	cmp	r3, #14
 800564c:	d9f2      	bls.n	8005634 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11c      	bne.n	800568e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005662:	f043 0302 	orr.w	r3, r3, #2
 8005666:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	e005      	b.n	800569a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	4619      	mov	r1, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	461a      	mov	r2, r3
 80056b6:	680b      	ldr	r3, [r1, #0]
 80056b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10c      	bne.n	80056da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d104      	bne.n	80056d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056c6:	2100      	movs	r1, #0
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f965 	bl	8005998 <USB_SetDevSpeed>
 80056ce:	e008      	b.n	80056e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056d0:	2101      	movs	r1, #1
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f960 	bl	8005998 <USB_SetDevSpeed>
 80056d8:	e003      	b.n	80056e2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056da:	2103      	movs	r1, #3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f95b 	bl	8005998 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056e2:	2110      	movs	r1, #16
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8f3 	bl	80058d0 <USB_FlushTxFifo>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f91f 	bl	8005938 <USB_FlushRxFifo>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	461a      	mov	r2, r3
 8005718:	2300      	movs	r3, #0
 800571a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005728:	2300      	movs	r3, #0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e043      	b.n	80057b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005744:	d118      	bne.n	8005778 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e013      	b.n	800578a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	461a      	mov	r2, r3
 8005770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	e008      	b.n	800578a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	2300      	movs	r3, #0
 8005788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	461a      	mov	r2, r3
 80057aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d3b7      	bcc.n	800572e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e043      	b.n	800584c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057da:	d118      	bne.n	800580e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e013      	b.n	8005820 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	461a      	mov	r2, r3
 8005806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e008      	b.n	8005820 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	461a      	mov	r2, r3
 8005840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	3301      	adds	r3, #1
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3b7      	bcc.n	80057c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f043 0210 	orr.w	r2, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <USB_DevInit+0x2b4>)
 800588e:	4313      	orrs	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d105      	bne.n	80058b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	4b06      	ldr	r3, [pc, #24]	; (80058cc <USB_DevInit+0x2b8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c4:	b004      	add	sp, #16
 80058c6:	4770      	bx	lr
 80058c8:	803c3800 	.word	0x803c3800
 80058cc:	40000004 	.word	0x40000004

080058d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a13      	ldr	r2, [pc, #76]	; (8005934 <USB_FlushTxFifo+0x64>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e01b      	b.n	8005928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	daf2      	bge.n	80058de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	019b      	lsls	r3, r3, #6
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a08      	ldr	r2, [pc, #32]	; (8005934 <USB_FlushTxFifo+0x64>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e006      	b.n	8005928 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d0f0      	beq.n	8005908 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	00030d40 	.word	0x00030d40

08005938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4a11      	ldr	r2, [pc, #68]	; (8005994 <USB_FlushRxFifo+0x5c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d901      	bls.n	8005956 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e018      	b.n	8005988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	daf2      	bge.n	8005944 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2210      	movs	r2, #16
 8005966:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a08      	ldr	r2, [pc, #32]	; (8005994 <USB_FlushRxFifo+0x5c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e006      	b.n	8005988 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b10      	cmp	r3, #16
 8005984:	d0f0      	beq.n	8005968 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	00030d40 	.word	0x00030d40

08005998 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f8:	f043 0302 	orr.w	r3, r3, #2
 80059fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0301 	and.w	r3, r3, #1
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <USB_CoreReset+0x64>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e01b      	b.n	8005a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	daf2      	bge.n	8005a34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <USB_CoreReset+0x64>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d901      	bls.n	8005a70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d0f0      	beq.n	8005a5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	00030d40 	.word	0x00030d40

08005a90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005a96:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005a98:	22c0      	movs	r2, #192	; 0xc0
 8005a9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005a9c:	4b8b      	ldr	r3, [pc, #556]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005a9e:	22a8      	movs	r2, #168	; 0xa8
 8005aa0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005aa2:	4b8a      	ldr	r3, [pc, #552]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8005aa8:	4b88      	ldr	r3, [pc, #544]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005aaa:	220a      	movs	r2, #10
 8005aac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005aae:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005ab4:	4b86      	ldr	r3, [pc, #536]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005aba:	4b85      	ldr	r3, [pc, #532]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005ac0:	4b83      	ldr	r3, [pc, #524]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005ac6:	4b83      	ldr	r3, [pc, #524]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005acc:	4b81      	ldr	r3, [pc, #516]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005ad2:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005ad8:	4b7e      	ldr	r3, [pc, #504]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005ade:	f000 fd2c 	bl	800653a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005ae2:	4b7a      	ldr	r3, [pc, #488]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	061a      	lsls	r2, r3, #24
 8005ae8:	4b78      	ldr	r3, [pc, #480]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	041b      	lsls	r3, r3, #16
 8005aee:	431a      	orrs	r2, r3
 8005af0:	4b76      	ldr	r3, [pc, #472]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005af2:	789b      	ldrb	r3, [r3, #2]
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	4313      	orrs	r3, r2
 8005af8:	4a74      	ldr	r2, [pc, #464]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005afa:	78d2      	ldrb	r2, [r2, #3]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	061a      	lsls	r2, r3, #24
 8005b00:	4b72      	ldr	r3, [pc, #456]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	0619      	lsls	r1, r3, #24
 8005b06:	4b71      	ldr	r3, [pc, #452]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	4319      	orrs	r1, r3
 8005b0e:	4b6f      	ldr	r3, [pc, #444]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b10:	789b      	ldrb	r3, [r3, #2]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	430b      	orrs	r3, r1
 8005b16:	496d      	ldr	r1, [pc, #436]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b18:	78c9      	ldrb	r1, [r1, #3]
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b22:	431a      	orrs	r2, r3
 8005b24:	4b69      	ldr	r3, [pc, #420]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	0619      	lsls	r1, r3, #24
 8005b2a:	4b68      	ldr	r3, [pc, #416]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	4319      	orrs	r1, r3
 8005b32:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	4964      	ldr	r1, [pc, #400]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b3c:	78c9      	ldrb	r1, [r1, #3]
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b46:	431a      	orrs	r2, r3
 8005b48:	4b60      	ldr	r3, [pc, #384]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	0619      	lsls	r1, r3, #24
 8005b4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4319      	orrs	r1, r3
 8005b56:	4b5d      	ldr	r3, [pc, #372]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b58:	789b      	ldrb	r3, [r3, #2]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	495b      	ldr	r1, [pc, #364]	; (8005ccc <MX_LWIP_Init+0x23c>)
 8005b60:	78c9      	ldrb	r1, [r1, #3]
 8005b62:	430b      	orrs	r3, r1
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	4313      	orrs	r3, r2
 8005b68:	4a5b      	ldr	r2, [pc, #364]	; (8005cd8 <MX_LWIP_Init+0x248>)
 8005b6a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005b6c:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	061a      	lsls	r2, r3, #24
 8005b72:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	4b55      	ldr	r3, [pc, #340]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b7c:	789b      	ldrb	r3, [r3, #2]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	4313      	orrs	r3, r2
 8005b82:	4a53      	ldr	r2, [pc, #332]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b84:	78d2      	ldrb	r2, [r2, #3]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	061a      	lsls	r2, r3, #24
 8005b8a:	4b51      	ldr	r3, [pc, #324]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	0619      	lsls	r1, r3, #24
 8005b90:	4b4f      	ldr	r3, [pc, #316]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	4319      	orrs	r1, r3
 8005b98:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005b9a:	789b      	ldrb	r3, [r3, #2]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	494b      	ldr	r1, [pc, #300]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005ba2:	78c9      	ldrb	r1, [r1, #3]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bac:	431a      	orrs	r2, r3
 8005bae:	4b48      	ldr	r3, [pc, #288]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	0619      	lsls	r1, r3, #24
 8005bb4:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	4319      	orrs	r1, r3
 8005bbc:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bbe:	789b      	ldrb	r3, [r3, #2]
 8005bc0:	021b      	lsls	r3, r3, #8
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	4942      	ldr	r1, [pc, #264]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bc6:	78c9      	ldrb	r1, [r1, #3]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	4b3f      	ldr	r3, [pc, #252]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	0619      	lsls	r1, r3, #24
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	4319      	orrs	r1, r3
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005be2:	789b      	ldrb	r3, [r3, #2]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	430b      	orrs	r3, r1
 8005be8:	4939      	ldr	r1, [pc, #228]	; (8005cd0 <MX_LWIP_Init+0x240>)
 8005bea:	78c9      	ldrb	r1, [r1, #3]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	0e1b      	lsrs	r3, r3, #24
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	4a3a      	ldr	r2, [pc, #232]	; (8005cdc <MX_LWIP_Init+0x24c>)
 8005bf4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005bf6:	4b37      	ldr	r3, [pc, #220]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	061a      	lsls	r2, r3, #24
 8005bfc:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	431a      	orrs	r2, r3
 8005c04:	4b33      	ldr	r3, [pc, #204]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c06:	789b      	ldrb	r3, [r3, #2]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	4a31      	ldr	r2, [pc, #196]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c0e:	78d2      	ldrb	r2, [r2, #3]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	061a      	lsls	r2, r3, #24
 8005c14:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	0619      	lsls	r1, r3, #24
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	4319      	orrs	r1, r3
 8005c22:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	492a      	ldr	r1, [pc, #168]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c2c:	78c9      	ldrb	r1, [r1, #3]
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c36:	431a      	orrs	r2, r3
 8005c38:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	0619      	lsls	r1, r3, #24
 8005c3e:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	4319      	orrs	r1, r3
 8005c46:	4b23      	ldr	r3, [pc, #140]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c48:	789b      	ldrb	r3, [r3, #2]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	4921      	ldr	r1, [pc, #132]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c50:	78c9      	ldrb	r1, [r1, #3]
 8005c52:	430b      	orrs	r3, r1
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	0619      	lsls	r1, r3, #24
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	4319      	orrs	r1, r3
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c6c:	789b      	ldrb	r3, [r3, #2]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	430b      	orrs	r3, r1
 8005c72:	4918      	ldr	r1, [pc, #96]	; (8005cd4 <MX_LWIP_Init+0x244>)
 8005c74:	78c9      	ldrb	r1, [r1, #3]
 8005c76:	430b      	orrs	r3, r1
 8005c78:	0e1b      	lsrs	r3, r3, #24
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	4a18      	ldr	r2, [pc, #96]	; (8005ce0 <MX_LWIP_Init+0x250>)
 8005c7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c80:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <MX_LWIP_Init+0x254>)
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <MX_LWIP_Init+0x258>)
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <MX_LWIP_Init+0x250>)
 8005c8e:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <MX_LWIP_Init+0x24c>)
 8005c90:	4911      	ldr	r1, [pc, #68]	; (8005cd8 <MX_LWIP_Init+0x248>)
 8005c92:	4816      	ldr	r0, [pc, #88]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005c94:	f001 f93a 	bl	8006f0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c98:	4814      	ldr	r0, [pc, #80]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005c9a:	f001 fae5 	bl	8007268 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005cb2:	f001 fae9 	bl	8007288 <netif_set_up>
 8005cb6:	e002      	b.n	8005cbe <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005cb8:	480c      	ldr	r0, [pc, #48]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005cba:	f001 fb51 	bl	8007360 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005cbe:	490c      	ldr	r1, [pc, #48]	; (8005cf0 <MX_LWIP_Init+0x260>)
 8005cc0:	480a      	ldr	r0, [pc, #40]	; (8005cec <MX_LWIP_Init+0x25c>)
 8005cc2:	f001 fbe3 	bl	800748c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005cc6:	bf00      	nop
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000810 	.word	0x20000810
 8005cd0:	20000814 	.word	0x20000814
 8005cd4:	20000818 	.word	0x20000818
 8005cd8:	20000804 	.word	0x20000804
 8005cdc:	20000808 	.word	0x20000808
 8005ce0:	2000080c 	.word	0x2000080c
 8005ce4:	0800b0d1 	.word	0x0800b0d1
 8005ce8:	08006059 	.word	0x08006059
 8005cec:	200007d0 	.word	0x200007d0
 8005cf0:	08005d45 	.word	0x08005d45

08005cf4 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005cfc:	f7fb fb12 	bl	8001324 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b63      	cmp	r3, #99	; 0x63
 8005d0a:	d907      	bls.n	8005d1c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d0c:	f7fb fb0a 	bl	8001324 <HAL_GetTick>
 8005d10:	4603      	mov	r3, r0
 8005d12:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d14:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fafc 	bl	8006314 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200007cc 	.word	0x200007cc

08005d28 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005d2c:	4804      	ldr	r0, [pc, #16]	; (8005d40 <MX_LWIP_Process+0x18>)
 8005d2e:	f000 f973 	bl	8006018 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005d32:	f002 faa3 	bl	800827c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005d36:	4802      	ldr	r0, [pc, #8]	; (8005d40 <MX_LWIP_Process+0x18>)
 8005d38:	f7ff ffdc 	bl	8005cf4 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005d3c:	bf00      	nop
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	200007d0 	.word	0x200007d0

08005d44 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <SCB_InvalidateDCache_by_Addr>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d6e:	f3bf 8f4f 	dsb	sy
}
 8005d72:	bf00      	nop
    while (op_size > 0) {
 8005d74:	e00b      	b.n	8005d8e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005d76:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <SCB_InvalidateDCache_by_Addr+0x54>)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4413      	add	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	dcf0      	bgt.n	8005d76 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d94:	f3bf 8f4f 	dsb	sy
}
 8005d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d9a:	f3bf 8f6f 	isb	sy
}
 8005d9e:	bf00      	nop
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	e000ed00 	.word	0xe000ed00

08005db0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005dbc:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <low_level_init+0x110>)
 8005dbe:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <low_level_init+0x114>)
 8005dc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005dca:	23e1      	movs	r3, #225	; 0xe1
 8005dcc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005dda:	4a39      	ldr	r2, [pc, #228]	; (8005ec0 <low_level_init+0x110>)
 8005ddc:	f107 0308 	add.w	r3, r7, #8
 8005de0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <low_level_init+0x110>)
 8005de4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005de8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005dea:	4b35      	ldr	r3, [pc, #212]	; (8005ec0 <low_level_init+0x110>)
 8005dec:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <low_level_init+0x118>)
 8005dee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005df0:	4b33      	ldr	r3, [pc, #204]	; (8005ec0 <low_level_init+0x110>)
 8005df2:	4a36      	ldr	r2, [pc, #216]	; (8005ecc <low_level_init+0x11c>)
 8005df4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005df6:	4b32      	ldr	r3, [pc, #200]	; (8005ec0 <low_level_init+0x110>)
 8005df8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005dfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005dfe:	4830      	ldr	r0, [pc, #192]	; (8005ec0 <low_level_init+0x110>)
 8005e00:	f7fb fbd2 	bl	80015a8 <HAL_ETH_Init>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005e08:	2238      	movs	r2, #56	; 0x38
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4830      	ldr	r0, [pc, #192]	; (8005ed0 <low_level_init+0x120>)
 8005e0e:	f005 fa77 	bl	800b300 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005e12:	4b2f      	ldr	r3, [pc, #188]	; (8005ed0 <low_level_init+0x120>)
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005e18:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <low_level_init+0x120>)
 8005e1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005e1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <low_level_init+0x120>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005e26:	482b      	ldr	r0, [pc, #172]	; (8005ed4 <low_level_init+0x124>)
 8005e28:	f000 ff38 	bl	8006c9c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2206      	movs	r2, #6
 8005e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005e34:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <low_level_init+0x110>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e40:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <low_level_init+0x110>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	785a      	ldrb	r2, [r3, #1]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e4c:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <low_level_init+0x110>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	789a      	ldrb	r2, [r3, #2]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e58:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <low_level_init+0x110>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	78da      	ldrb	r2, [r3, #3]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e64:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <low_level_init+0x110>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	791a      	ldrb	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e70:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <low_level_init+0x110>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	795a      	ldrb	r2, [r3, #5]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e82:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e8a:	f043 030a 	orr.w	r3, r3, #10
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005e96:	4910      	ldr	r1, [pc, #64]	; (8005ed8 <low_level_init+0x128>)
 8005e98:	4810      	ldr	r0, [pc, #64]	; (8005edc <low_level_init+0x12c>)
 8005e9a:	f7fb f890 	bl	8000fbe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005e9e:	480f      	ldr	r0, [pc, #60]	; (8005edc <low_level_init+0x12c>)
 8005ea0:	f7fb f8bf 	bl	8001022 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fa32 	bl	8006314 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005eb0:	e001      	b.n	8005eb6 <low_level_init+0x106>
    Error_Handler();
 8005eb2:	f7fa fd79 	bl	80009a8 <Error_Handler>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200051a8 	.word	0x200051a8
 8005ec4:	40028000 	.word	0x40028000
 8005ec8:	20000128 	.word	0x20000128
 8005ecc:	20000088 	.word	0x20000088
 8005ed0:	20005258 	.word	0x20005258
 8005ed4:	0800d94c 	.word	0x0800d94c
 8005ed8:	2000000c 	.word	0x2000000c
 8005edc:	20005290 	.word	0x20005290

08005ee0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b092      	sub	sp, #72	; 0x48
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	2230      	movs	r2, #48	; 0x30
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f005 f9fd 	bl	800b300 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005f06:	f107 030c 	add.w	r3, r7, #12
 8005f0a:	2230      	movs	r2, #48	; 0x30
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f005 f9f6 	bl	800b300 <memset>

  for(q = p; q != NULL; q = q->next)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	643b      	str	r3, [r7, #64]	; 0x40
 8005f18:	e045      	b.n	8005fa6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d902      	bls.n	8005f26 <low_level_output+0x46>
      return ERR_IF;
 8005f20:	f06f 030b 	mvn.w	r3, #11
 8005f24:	e055      	b.n	8005fd2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	3348      	adds	r3, #72	; 0x48
 8005f36:	443b      	add	r3, r7
 8005f38:	3b3c      	subs	r3, #60	; 0x3c
 8005f3a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	895b      	ldrh	r3, [r3, #10]
 8005f40:	4619      	mov	r1, r3
 8005f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3348      	adds	r3, #72	; 0x48
 8005f4e:	443b      	add	r3, r7
 8005f50:	3b38      	subs	r3, #56	; 0x38
 8005f52:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d011      	beq.n	8005f7e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	f107 000c 	add.w	r0, r7, #12
 8005f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f64:	460b      	mov	r3, r1
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	440b      	add	r3, r1
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	18c1      	adds	r1, r0, r3
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	3348      	adds	r3, #72	; 0x48
 8005f78:	443b      	add	r3, r7
 8005f7a:	3b34      	subs	r3, #52	; 0x34
 8005f7c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	3348      	adds	r3, #72	; 0x48
 8005f92:	443b      	add	r3, r7
 8005f94:	3b34      	subs	r3, #52	; 0x34
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1b6      	bne.n	8005f1a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	891b      	ldrh	r3, [r3, #8]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <low_level_output+0xfc>)
 8005fb4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005fb6:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <low_level_output+0xfc>)
 8005fb8:	f107 030c 	add.w	r3, r7, #12
 8005fbc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005fbe:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <low_level_output+0xfc>)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005fc4:	2214      	movs	r2, #20
 8005fc6:	4905      	ldr	r1, [pc, #20]	; (8005fdc <low_level_output+0xfc>)
 8005fc8:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <low_level_output+0x100>)
 8005fca:	f7fb fc21 	bl	8001810 <HAL_ETH_Transmit>

  return errval;
 8005fce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3748      	adds	r7, #72	; 0x48
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20005258 	.word	0x20005258
 8005fe0:	200051a8 	.word	0x200051a8

08005fe4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <low_level_input+0x2c>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <low_level_input+0x30>)
 8006000:	f7fb fc9a 	bl	8001938 <HAL_ETH_ReadData>
  }

  return p;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200051a4 	.word	0x200051a4
 8006014:	200051a8 	.word	0x200051a8

08006018 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ffdd 	bl	8005fe4 <low_level_input>
 800602a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 fd74 	bl	8007b30 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ea      	bne.n	8006024 <ethernetif_input+0xc>
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <ethernetif_init+0x1c>
 8006066:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <ethernetif_init+0x48>)
 8006068:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 800606c:	490d      	ldr	r1, [pc, #52]	; (80060a4 <ethernetif_init+0x4c>)
 800606e:	480e      	ldr	r0, [pc, #56]	; (80060a8 <ethernetif_init+0x50>)
 8006070:	f005 f94e 	bl	800b310 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2273      	movs	r2, #115	; 0x73
 8006078:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2274      	movs	r2, #116	; 0x74
 8006080:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <ethernetif_init+0x54>)
 8006088:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <ethernetif_init+0x58>)
 800608e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fe8d 	bl	8005db0 <low_level_init>

  return ERR_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	0800c3d0 	.word	0x0800c3d0
 80060a4:	0800c3ec 	.word	0x0800c3ec
 80060a8:	0800c3fc 	.word	0x0800c3fc
 80060ac:	0800959d 	.word	0x0800959d
 80060b0:	08005ee1 	.word	0x08005ee1

080060b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80060c0:	68f9      	ldr	r1, [r7, #12]
 80060c2:	4807      	ldr	r0, [pc, #28]	; (80060e0 <pbuf_free_custom+0x2c>)
 80060c4:	f000 fecc 	bl	8006e60 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80060c8:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <pbuf_free_custom+0x30>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d102      	bne.n	80060d6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80060d0:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <pbuf_free_custom+0x30>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
  }
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	0800d94c 	.word	0x0800d94c
 80060e4:	200051a4 	.word	0x200051a4

080060e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060ec:	f7fb f91a 	bl	8001324 <HAL_GetTick>
 80060f0:	4603      	mov	r3, r0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	; 0x38
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	609a      	str	r2, [r3, #8]
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a52      	ldr	r2, [pc, #328]	; (8006260 <HAL_ETH_MspInit+0x168>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f040 809e 	bne.w	8006258 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800611c:	4b51      	ldr	r3, [pc, #324]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	4a50      	ldr	r2, [pc, #320]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006126:	6313      	str	r3, [r2, #48]	; 0x30
 8006128:	4b4e      	ldr	r3, [pc, #312]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006130:	623b      	str	r3, [r7, #32]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4b4b      	ldr	r3, [pc, #300]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	4a4a      	ldr	r2, [pc, #296]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800613a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800613e:	6313      	str	r3, [r2, #48]	; 0x30
 8006140:	4b48      	ldr	r3, [pc, #288]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4b45      	ldr	r3, [pc, #276]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4a44      	ldr	r2, [pc, #272]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006156:	6313      	str	r3, [r2, #48]	; 0x30
 8006158:	4b42      	ldr	r3, [pc, #264]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006164:	4b3f      	ldr	r3, [pc, #252]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	4a3e      	ldr	r2, [pc, #248]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	6313      	str	r3, [r2, #48]	; 0x30
 8006170:	4b3c      	ldr	r3, [pc, #240]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800617c:	4b39      	ldr	r3, [pc, #228]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	4a38      	ldr	r2, [pc, #224]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6313      	str	r3, [r2, #48]	; 0x30
 8006188:	4b36      	ldr	r3, [pc, #216]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006194:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	4a32      	ldr	r2, [pc, #200]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 800619a:	f043 0302 	orr.w	r3, r3, #2
 800619e:	6313      	str	r3, [r2, #48]	; 0x30
 80061a0:	4b30      	ldr	r3, [pc, #192]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80061ac:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	4a2c      	ldr	r2, [pc, #176]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 80061b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b6:	6313      	str	r3, [r2, #48]	; 0x30
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <HAL_ETH_MspInit+0x16c>)
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80061c4:	2332      	movs	r3, #50	; 0x32
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	2302      	movs	r3, #2
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061d0:	2303      	movs	r3, #3
 80061d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061d4:	230b      	movs	r3, #11
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061dc:	4619      	mov	r1, r3
 80061de:	4822      	ldr	r0, [pc, #136]	; (8006268 <HAL_ETH_MspInit+0x170>)
 80061e0:	f7fc fbc8 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80061e4:	2386      	movs	r3, #134	; 0x86
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	2302      	movs	r3, #2
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f0:	2303      	movs	r3, #3
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061f4:	230b      	movs	r3, #11
 80061f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061fc:	4619      	mov	r1, r3
 80061fe:	481b      	ldr	r0, [pc, #108]	; (800626c <HAL_ETH_MspInit+0x174>)
 8006200:	f7fc fbb8 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620a:	2302      	movs	r3, #2
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800620e:	2300      	movs	r3, #0
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006212:	2303      	movs	r3, #3
 8006214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006216:	230b      	movs	r3, #11
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800621a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800621e:	4619      	mov	r1, r3
 8006220:	4813      	ldr	r0, [pc, #76]	; (8006270 <HAL_ETH_MspInit+0x178>)
 8006222:	f7fc fba7 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006226:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622c:	2302      	movs	r3, #2
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006234:	2303      	movs	r3, #3
 8006236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006238:	230b      	movs	r3, #11
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800623c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006240:	4619      	mov	r1, r3
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <HAL_ETH_MspInit+0x17c>)
 8006244:	f7fc fb96 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006248:	2200      	movs	r2, #0
 800624a:	2100      	movs	r1, #0
 800624c:	203d      	movs	r0, #61	; 0x3d
 800624e:	f7fb f974 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006252:	203d      	movs	r0, #61	; 0x3d
 8006254:	f7fb f98d 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006258:	bf00      	nop
 800625a:	3738      	adds	r7, #56	; 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40028000 	.word	0x40028000
 8006264:	40023800 	.word	0x40023800
 8006268:	40020800 	.word	0x40020800
 800626c:	40020000 	.word	0x40020000
 8006270:	40020400 	.word	0x40020400
 8006274:	40021800 	.word	0x40021800

08006278 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800627c:	4802      	ldr	r0, [pc, #8]	; (8006288 <ETH_PHY_IO_Init+0x10>)
 800627e:	f7fb ff1f 	bl	80020c0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	bd80      	pop	{r7, pc}
 8006288:	200051a8 	.word	0x200051a8

0800628c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  return 0;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	4807      	ldr	r0, [pc, #28]	; (80062cc <ETH_PHY_IO_ReadReg+0x30>)
 80062b0:	f7fb fd6e 	bl	8001d90 <HAL_ETH_ReadPHYRegister>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062be:	e000      	b.n	80062c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200051a8 	.word	0x200051a8

080062d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	4807      	ldr	r0, [pc, #28]	; (8006300 <ETH_PHY_IO_WriteReg+0x30>)
 80062e4:	f7fb fd9f 	bl	8001e26 <HAL_ETH_WritePHYRegister>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80062ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062f2:	e000      	b.n	80062f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200051a8 	.word	0x200051a8

08006304 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006308:	f7fb f80c 	bl	8001324 <HAL_GetTick>
 800630c:	4603      	mov	r3, r0
}
 800630e:	4618      	mov	r0, r3
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0a0      	sub	sp, #128	; 0x80
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800631c:	f107 030c 	add.w	r3, r7, #12
 8006320:	2264      	movs	r2, #100	; 0x64
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f004 ffeb 	bl	800b300 <memset>
  int32_t PHYLinkState = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006332:	2300      	movs	r3, #0
 8006334:	67bb      	str	r3, [r7, #120]	; 0x78
 8006336:	2300      	movs	r3, #0
 8006338:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800633a:	483a      	ldr	r0, [pc, #232]	; (8006424 <ethernet_link_check_state+0x110>)
 800633c:	f7fa ff19 	bl	8001172 <LAN8742_GetLinkState>
 8006340:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00c      	beq.n	800636e <ethernet_link_check_state+0x5a>
 8006354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006356:	2b01      	cmp	r3, #1
 8006358:	dc09      	bgt.n	800636e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800635a:	4833      	ldr	r0, [pc, #204]	; (8006428 <ethernet_link_check_state+0x114>)
 800635c:	f7fb f9ff 	bl	800175e <HAL_ETH_Stop>
    netif_set_down(netif);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fffd 	bl	8007360 <netif_set_down>
    netif_set_link_down(netif);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 f860 	bl	800742c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800636c:	e055      	b.n	800641a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d14e      	bne.n	800641a <ethernet_link_check_state+0x106>
 800637c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637e:	2b01      	cmp	r3, #1
 8006380:	dd4b      	ble.n	800641a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006384:	3b02      	subs	r3, #2
 8006386:	2b03      	cmp	r3, #3
 8006388:	d82a      	bhi.n	80063e0 <ethernet_link_check_state+0xcc>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <ethernet_link_check_state+0x7c>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063b3 	.word	0x080063b3
 8006398:	080063c3 	.word	0x080063c3
 800639c:	080063d3 	.word	0x080063d3
      duplex = ETH_FULLDUPLEX_MODE;
 80063a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80063a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063b0:	e017      	b.n	80063e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80063b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063bc:	2301      	movs	r3, #1
 80063be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063c0:	e00f      	b.n	80063e2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80063c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063c8:	2300      	movs	r3, #0
 80063ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063cc:	2301      	movs	r3, #1
 80063ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063d0:	e007      	b.n	80063e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80063d6:	2300      	movs	r3, #0
 80063d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80063de:	e000      	b.n	80063e2 <ethernet_link_check_state+0xce>
      break;
 80063e0:	bf00      	nop
    if(linkchanged)
 80063e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d018      	beq.n	800641a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80063e8:	f107 030c 	add.w	r3, r7, #12
 80063ec:	4619      	mov	r1, r3
 80063ee:	480e      	ldr	r0, [pc, #56]	; (8006428 <ethernet_link_check_state+0x114>)
 80063f0:	f7fb fd62 	bl	8001eb8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80063f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80063f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	4619      	mov	r1, r3
 8006402:	4809      	ldr	r0, [pc, #36]	; (8006428 <ethernet_link_check_state+0x114>)
 8006404:	f7fb fe42 	bl	800208c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006408:	4807      	ldr	r0, [pc, #28]	; (8006428 <ethernet_link_check_state+0x114>)
 800640a:	f7fb f949 	bl	80016a0 <HAL_ETH_Start>
      netif_set_up(netif);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 ff3a 	bl	8007288 <netif_set_up>
      netif_set_link_up(netif);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 ffd5 	bl	80073c4 <netif_set_link_up>
}
 800641a:	bf00      	nop
 800641c:	3780      	adds	r7, #128	; 0x80
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20005290 	.word	0x20005290
 8006428:	200051a8 	.word	0x200051a8

0800642c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006434:	4812      	ldr	r0, [pc, #72]	; (8006480 <HAL_ETH_RxAllocateCallback+0x54>)
 8006436:	f000 fca5 	bl	8006d84 <memp_malloc_pool>
 800643a:	60f8      	str	r0, [r7, #12]
  if (p)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d014      	beq.n	800646c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f103 0220 	add.w	r2, r3, #32
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a0d      	ldr	r2, [pc, #52]	; (8006484 <HAL_ETH_RxAllocateCallback+0x58>)
 8006450:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800645a:	9201      	str	r2, [sp, #4]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2241      	movs	r2, #65	; 0x41
 8006462:	2100      	movs	r1, #0
 8006464:	2000      	movs	r0, #0
 8006466:	f001 f9a9 	bl	80077bc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800646a:	e005      	b.n	8006478 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <HAL_ETH_RxAllocateCallback+0x5c>)
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	0800d94c 	.word	0x0800d94c
 8006484:	080060b5 	.word	0x080060b5
 8006488:	200051a4 	.word	0x200051a4

0800648c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3b20      	subs	r3, #32
 80064aa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2200      	movs	r2, #0
 80064b6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d103      	bne.n	80064ce <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	e003      	b.n	80064d6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	e009      	b.n	80064f8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	891a      	ldrh	r2, [r3, #8]
 80064e8:	887b      	ldrh	r3, [r7, #2]
 80064ea:	4413      	add	r3, r2
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f2      	bne.n	80064e4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80064fe:	887b      	ldrh	r3, [r7, #2]
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fc28 	bl	8005d58 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006508:	bf00      	nop
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	b21a      	sxth	r2, r3
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	b29b      	uxth	r3, r3
 8006526:	b21b      	sxth	r3, r3
 8006528:	4313      	orrs	r3, r2
 800652a:	b21b      	sxth	r3, r3
 800652c:	b29b      	uxth	r3, r3
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006544:	f000 f8d2 	bl	80066ec <mem_init>
  memp_init();
 8006548:	f000 fbd8 	bl	8006cfc <memp_init>
  pbuf_init();
  netif_init();
 800654c:	f000 fcd6 	bl	8006efc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006550:	f001 fece 	bl	80082f0 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006554:	f001 fe4a 	bl	80081ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <ptr_to_mem+0x20>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	4413      	add	r3, r2
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	2000591c 	.word	0x2000591c

08006584 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <mem_to_ptr+0x20>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	b29b      	uxth	r3, r3
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	2000591c 	.word	0x2000591c

080065a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065b0:	4b45      	ldr	r3, [pc, #276]	; (80066c8 <plug_holes+0x120>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d206      	bcs.n	80065c8 <plug_holes+0x20>
 80065ba:	4b44      	ldr	r3, [pc, #272]	; (80066cc <plug_holes+0x124>)
 80065bc:	f240 12df 	movw	r2, #479	; 0x1df
 80065c0:	4943      	ldr	r1, [pc, #268]	; (80066d0 <plug_holes+0x128>)
 80065c2:	4844      	ldr	r0, [pc, #272]	; (80066d4 <plug_holes+0x12c>)
 80065c4:	f004 fea4 	bl	800b310 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80065c8:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <plug_holes+0x130>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d306      	bcc.n	80065e0 <plug_holes+0x38>
 80065d2:	4b3e      	ldr	r3, [pc, #248]	; (80066cc <plug_holes+0x124>)
 80065d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80065d8:	4940      	ldr	r1, [pc, #256]	; (80066dc <plug_holes+0x134>)
 80065da:	483e      	ldr	r0, [pc, #248]	; (80066d4 <plug_holes+0x12c>)
 80065dc:	f004 fe98 	bl	800b310 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	791b      	ldrb	r3, [r3, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <plug_holes+0x4e>
 80065e8:	4b38      	ldr	r3, [pc, #224]	; (80066cc <plug_holes+0x124>)
 80065ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 80065ee:	493c      	ldr	r1, [pc, #240]	; (80066e0 <plug_holes+0x138>)
 80065f0:	4838      	ldr	r0, [pc, #224]	; (80066d4 <plug_holes+0x12c>)
 80065f2:	f004 fe8d 	bl	800b310 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80065fe:	d906      	bls.n	800660e <plug_holes+0x66>
 8006600:	4b32      	ldr	r3, [pc, #200]	; (80066cc <plug_holes+0x124>)
 8006602:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006606:	4937      	ldr	r1, [pc, #220]	; (80066e4 <plug_holes+0x13c>)
 8006608:	4832      	ldr	r0, [pc, #200]	; (80066d4 <plug_holes+0x12c>)
 800660a:	f004 fe81 	bl	800b310 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff ffa4 	bl	8006560 <ptr_to_mem>
 8006618:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d024      	beq.n	800666c <plug_holes+0xc4>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	791b      	ldrb	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d120      	bne.n	800666c <plug_holes+0xc4>
 800662a:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <plug_holes+0x130>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	429a      	cmp	r2, r3
 8006632:	d01b      	beq.n	800666c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006634:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <plug_holes+0x140>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	429a      	cmp	r2, r3
 800663c:	d102      	bne.n	8006644 <plug_holes+0x9c>
      lfree = mem;
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <plug_holes+0x140>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006654:	d00a      	beq.n	800666c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff ff80 	bl	8006560 <ptr_to_mem>
 8006660:	4604      	mov	r4, r0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ff8e 	bl	8006584 <mem_to_ptr>
 8006668:	4603      	mov	r3, r0
 800666a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	885b      	ldrh	r3, [r3, #2]
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff ff75 	bl	8006560 <ptr_to_mem>
 8006676:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d01f      	beq.n	80066c0 <plug_holes+0x118>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11b      	bne.n	80066c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006688:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <plug_holes+0x140>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d102      	bne.n	8006698 <plug_holes+0xf0>
      lfree = pmem;
 8006692:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <plug_holes+0x140>)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066a8:	d00a      	beq.n	80066c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff ff56 	bl	8006560 <ptr_to_mem>
 80066b4:	4604      	mov	r4, r0
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	f7ff ff64 	bl	8006584 <mem_to_ptr>
 80066bc:	4603      	mov	r3, r0
 80066be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd90      	pop	{r4, r7, pc}
 80066c8:	2000591c 	.word	0x2000591c
 80066cc:	0800c424 	.word	0x0800c424
 80066d0:	0800c454 	.word	0x0800c454
 80066d4:	0800c46c 	.word	0x0800c46c
 80066d8:	20005920 	.word	0x20005920
 80066dc:	0800c494 	.word	0x0800c494
 80066e0:	0800c4b0 	.word	0x0800c4b0
 80066e4:	0800c4cc 	.word	0x0800c4cc
 80066e8:	20005924 	.word	0x20005924

080066ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80066f2:	4b18      	ldr	r3, [pc, #96]	; (8006754 <mem_init+0x68>)
 80066f4:	3303      	adds	r3, #3
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	461a      	mov	r2, r3
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <mem_init+0x6c>)
 80066fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006700:	4b15      	ldr	r3, [pc, #84]	; (8006758 <mem_init+0x6c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800670c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800671a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800671e:	f7ff ff1f 	bl	8006560 <ptr_to_mem>
 8006722:	4603      	mov	r3, r0
 8006724:	4a0d      	ldr	r2, [pc, #52]	; (800675c <mem_init+0x70>)
 8006726:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <mem_init+0x70>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2201      	movs	r2, #1
 800672e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <mem_init+0x70>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006738:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <mem_init+0x70>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006742:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <mem_init+0x6c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <mem_init+0x74>)
 800674a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200052c8 	.word	0x200052c8
 8006758:	2000591c 	.word	0x2000591c
 800675c:	20005920 	.word	0x20005920
 8006760:	20005924 	.word	0x20005924

08006764 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff09 	bl	8006584 <mem_to_ptr>
 8006772:	4603      	mov	r3, r0
 8006774:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fef0 	bl	8006560 <ptr_to_mem>
 8006780:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff feea 	bl	8006560 <ptr_to_mem>
 800678c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006796:	d818      	bhi.n	80067ca <mem_link_valid+0x66>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	885b      	ldrh	r3, [r3, #2]
 800679c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067a0:	d813      	bhi.n	80067ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067a6:	8afa      	ldrh	r2, [r7, #22]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d004      	beq.n	80067b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	8afa      	ldrh	r2, [r7, #22]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d109      	bne.n	80067ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <mem_link_valid+0x74>)
 80067b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d006      	beq.n	80067ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	885b      	ldrh	r3, [r3, #2]
 80067c4:	8afa      	ldrh	r2, [r7, #22]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d001      	beq.n	80067ce <mem_link_valid+0x6a>
    return 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <mem_link_valid+0x6c>
  }
  return 1;
 80067ce:	2301      	movs	r3, #1
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	20005920 	.word	0x20005920

080067dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d04c      	beq.n	8006884 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80067f4:	4b25      	ldr	r3, [pc, #148]	; (800688c <mem_free+0xb0>)
 80067f6:	f240 2273 	movw	r2, #627	; 0x273
 80067fa:	4925      	ldr	r1, [pc, #148]	; (8006890 <mem_free+0xb4>)
 80067fc:	4825      	ldr	r0, [pc, #148]	; (8006894 <mem_free+0xb8>)
 80067fe:	f004 fd87 	bl	800b310 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006802:	e040      	b.n	8006886 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3b08      	subs	r3, #8
 8006808:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800680a:	4b23      	ldr	r3, [pc, #140]	; (8006898 <mem_free+0xbc>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	429a      	cmp	r2, r3
 8006812:	d306      	bcc.n	8006822 <mem_free+0x46>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f103 020c 	add.w	r2, r3, #12
 800681a:	4b20      	ldr	r3, [pc, #128]	; (800689c <mem_free+0xc0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d907      	bls.n	8006832 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006822:	4b1a      	ldr	r3, [pc, #104]	; (800688c <mem_free+0xb0>)
 8006824:	f240 227f 	movw	r2, #639	; 0x27f
 8006828:	491d      	ldr	r1, [pc, #116]	; (80068a0 <mem_free+0xc4>)
 800682a:	481a      	ldr	r0, [pc, #104]	; (8006894 <mem_free+0xb8>)
 800682c:	f004 fd70 	bl	800b310 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006830:	e029      	b.n	8006886 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	791b      	ldrb	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d107      	bne.n	800684a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <mem_free+0xb0>)
 800683c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006840:	4918      	ldr	r1, [pc, #96]	; (80068a4 <mem_free+0xc8>)
 8006842:	4814      	ldr	r0, [pc, #80]	; (8006894 <mem_free+0xb8>)
 8006844:	f004 fd64 	bl	800b310 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006848:	e01d      	b.n	8006886 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff8a 	bl	8006764 <mem_link_valid>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <mem_free+0xb0>)
 8006858:	f240 2295 	movw	r2, #661	; 0x295
 800685c:	4912      	ldr	r1, [pc, #72]	; (80068a8 <mem_free+0xcc>)
 800685e:	480d      	ldr	r0, [pc, #52]	; (8006894 <mem_free+0xb8>)
 8006860:	f004 fd56 	bl	800b310 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006864:	e00f      	b.n	8006886 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <mem_free+0xd0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	429a      	cmp	r2, r3
 8006874:	d202      	bcs.n	800687c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006876:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <mem_free+0xd0>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff fe93 	bl	80065a8 <plug_holes>
 8006882:	e000      	b.n	8006886 <mem_free+0xaa>
    return;
 8006884:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	0800c424 	.word	0x0800c424
 8006890:	0800c4f8 	.word	0x0800c4f8
 8006894:	0800c46c 	.word	0x0800c46c
 8006898:	2000591c 	.word	0x2000591c
 800689c:	20005920 	.word	0x20005920
 80068a0:	0800c51c 	.word	0x0800c51c
 80068a4:	0800c538 	.word	0x0800c538
 80068a8:	0800c560 	.word	0x0800c560
 80068ac:	20005924 	.word	0x20005924

080068b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068bc:	887b      	ldrh	r3, [r7, #2]
 80068be:	3303      	adds	r3, #3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068c8:	8bfb      	ldrh	r3, [r7, #30]
 80068ca:	2b0b      	cmp	r3, #11
 80068cc:	d801      	bhi.n	80068d2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068ce:	230c      	movs	r3, #12
 80068d0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80068d2:	8bfb      	ldrh	r3, [r7, #30]
 80068d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068d8:	d803      	bhi.n	80068e2 <mem_trim+0x32>
 80068da:	8bfa      	ldrh	r2, [r7, #30]
 80068dc:	887b      	ldrh	r3, [r7, #2]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d201      	bcs.n	80068e6 <mem_trim+0x36>
    return NULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e0cc      	b.n	8006a80 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80068e6:	4b68      	ldr	r3, [pc, #416]	; (8006a88 <mem_trim+0x1d8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d304      	bcc.n	80068fa <mem_trim+0x4a>
 80068f0:	4b66      	ldr	r3, [pc, #408]	; (8006a8c <mem_trim+0x1dc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d306      	bcc.n	8006908 <mem_trim+0x58>
 80068fa:	4b65      	ldr	r3, [pc, #404]	; (8006a90 <mem_trim+0x1e0>)
 80068fc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006900:	4964      	ldr	r1, [pc, #400]	; (8006a94 <mem_trim+0x1e4>)
 8006902:	4865      	ldr	r0, [pc, #404]	; (8006a98 <mem_trim+0x1e8>)
 8006904:	f004 fd04 	bl	800b310 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006908:	4b5f      	ldr	r3, [pc, #380]	; (8006a88 <mem_trim+0x1d8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d304      	bcc.n	800691c <mem_trim+0x6c>
 8006912:	4b5e      	ldr	r3, [pc, #376]	; (8006a8c <mem_trim+0x1dc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	d301      	bcc.n	8006920 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	e0af      	b.n	8006a80 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3b08      	subs	r3, #8
 8006924:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006926:	69b8      	ldr	r0, [r7, #24]
 8006928:	f7ff fe2c 	bl	8006584 <mem_to_ptr>
 800692c:	4603      	mov	r3, r0
 800692e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	8afb      	ldrh	r3, [r7, #22]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b08      	subs	r3, #8
 800693c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800693e:	8bfa      	ldrh	r2, [r7, #30]
 8006940:	8abb      	ldrh	r3, [r7, #20]
 8006942:	429a      	cmp	r2, r3
 8006944:	d906      	bls.n	8006954 <mem_trim+0xa4>
 8006946:	4b52      	ldr	r3, [pc, #328]	; (8006a90 <mem_trim+0x1e0>)
 8006948:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800694c:	4953      	ldr	r1, [pc, #332]	; (8006a9c <mem_trim+0x1ec>)
 800694e:	4852      	ldr	r0, [pc, #328]	; (8006a98 <mem_trim+0x1e8>)
 8006950:	f004 fcde 	bl	800b310 <iprintf>
  if (newsize > size) {
 8006954:	8bfa      	ldrh	r2, [r7, #30]
 8006956:	8abb      	ldrh	r3, [r7, #20]
 8006958:	429a      	cmp	r2, r3
 800695a:	d901      	bls.n	8006960 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	e08f      	b.n	8006a80 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006960:	8bfa      	ldrh	r2, [r7, #30]
 8006962:	8abb      	ldrh	r3, [r7, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	d101      	bne.n	800696c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	e089      	b.n	8006a80 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff fdf5 	bl	8006560 <ptr_to_mem>
 8006976:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	791b      	ldrb	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d13f      	bne.n	8006a00 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006988:	d106      	bne.n	8006998 <mem_trim+0xe8>
 800698a:	4b41      	ldr	r3, [pc, #260]	; (8006a90 <mem_trim+0x1e0>)
 800698c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006990:	4943      	ldr	r1, [pc, #268]	; (8006aa0 <mem_trim+0x1f0>)
 8006992:	4841      	ldr	r0, [pc, #260]	; (8006a98 <mem_trim+0x1e8>)
 8006994:	f004 fcbc 	bl	800b310 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800699e:	8afa      	ldrh	r2, [r7, #22]
 80069a0:	8bfb      	ldrh	r3, [r7, #30]
 80069a2:	4413      	add	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3308      	adds	r3, #8
 80069a8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80069aa:	4b3e      	ldr	r3, [pc, #248]	; (8006aa4 <mem_trim+0x1f4>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d106      	bne.n	80069c2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069b4:	89fb      	ldrh	r3, [r7, #14]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff fdd2 	bl	8006560 <ptr_to_mem>
 80069bc:	4603      	mov	r3, r0
 80069be:	4a39      	ldr	r2, [pc, #228]	; (8006aa4 <mem_trim+0x1f4>)
 80069c0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069c2:	89fb      	ldrh	r3, [r7, #14]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fdcb 	bl	8006560 <ptr_to_mem>
 80069ca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2200      	movs	r2, #0
 80069d0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	89ba      	ldrh	r2, [r7, #12]
 80069d6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	8afa      	ldrh	r2, [r7, #22]
 80069dc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	89fa      	ldrh	r2, [r7, #14]
 80069e2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069ec:	d047      	beq.n	8006a7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fdb4 	bl	8006560 <ptr_to_mem>
 80069f8:	4602      	mov	r2, r0
 80069fa:	89fb      	ldrh	r3, [r7, #14]
 80069fc:	8053      	strh	r3, [r2, #2]
 80069fe:	e03e      	b.n	8006a7e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a00:	8bfb      	ldrh	r3, [r7, #30]
 8006a02:	f103 0214 	add.w	r2, r3, #20
 8006a06:	8abb      	ldrh	r3, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d838      	bhi.n	8006a7e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a0c:	8afa      	ldrh	r2, [r7, #22]
 8006a0e:	8bfb      	ldrh	r3, [r7, #30]
 8006a10:	4413      	add	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3308      	adds	r3, #8
 8006a16:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a20:	d106      	bne.n	8006a30 <mem_trim+0x180>
 8006a22:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <mem_trim+0x1e0>)
 8006a24:	f240 3216 	movw	r2, #790	; 0x316
 8006a28:	491d      	ldr	r1, [pc, #116]	; (8006aa0 <mem_trim+0x1f0>)
 8006a2a:	481b      	ldr	r0, [pc, #108]	; (8006a98 <mem_trim+0x1e8>)
 8006a2c:	f004 fc70 	bl	800b310 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006a30:	89fb      	ldrh	r3, [r7, #14]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fd94 	bl	8006560 <ptr_to_mem>
 8006a38:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <mem_trim+0x1f4>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d202      	bcs.n	8006a4a <mem_trim+0x19a>
      lfree = mem2;
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <mem_trim+0x1f4>)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	881a      	ldrh	r2, [r3, #0]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	89fa      	ldrh	r2, [r7, #14]
 8006a62:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a6c:	d007      	beq.n	8006a7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fd74 	bl	8006560 <ptr_to_mem>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006a7e:	687b      	ldr	r3, [r7, #4]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	2000591c 	.word	0x2000591c
 8006a8c:	20005920 	.word	0x20005920
 8006a90:	0800c424 	.word	0x0800c424
 8006a94:	0800c594 	.word	0x0800c594
 8006a98:	0800c46c 	.word	0x0800c46c
 8006a9c:	0800c5ac 	.word	0x0800c5ac
 8006aa0:	0800c5cc 	.word	0x0800c5cc
 8006aa4:	20005924 	.word	0x20005924

08006aa8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <mem_malloc+0x14>
    return NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e0d9      	b.n	8006c70 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	3303      	adds	r3, #3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006ac8:	8bbb      	ldrh	r3, [r7, #28]
 8006aca:	2b0b      	cmp	r3, #11
 8006acc:	d801      	bhi.n	8006ad2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006ace:	230c      	movs	r3, #12
 8006ad0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006ad2:	8bbb      	ldrh	r3, [r7, #28]
 8006ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006ad8:	d803      	bhi.n	8006ae2 <mem_malloc+0x3a>
 8006ada:	8bba      	ldrh	r2, [r7, #28]
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d201      	bcs.n	8006ae6 <mem_malloc+0x3e>
    return NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e0c4      	b.n	8006c70 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ae6:	4b64      	ldr	r3, [pc, #400]	; (8006c78 <mem_malloc+0x1d0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fd4a 	bl	8006584 <mem_to_ptr>
 8006af0:	4603      	mov	r3, r0
 8006af2:	83fb      	strh	r3, [r7, #30]
 8006af4:	e0b4      	b.n	8006c60 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006af6:	8bfb      	ldrh	r3, [r7, #30]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fd31 	bl	8006560 <ptr_to_mem>
 8006afe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 80a4 	bne.w	8006c52 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f1a3 0208 	sub.w	r2, r3, #8
 8006b18:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	f0c0 8099 	bcc.w	8006c52 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	8bfb      	ldrh	r3, [r7, #30]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f1a3 0208 	sub.w	r2, r3, #8
 8006b2e:	8bbb      	ldrh	r3, [r7, #28]
 8006b30:	3314      	adds	r3, #20
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d333      	bcc.n	8006b9e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b36:	8bfa      	ldrh	r2, [r7, #30]
 8006b38:	8bbb      	ldrh	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3308      	adds	r3, #8
 8006b40:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b42:	8a7b      	ldrh	r3, [r7, #18]
 8006b44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b48:	d106      	bne.n	8006b58 <mem_malloc+0xb0>
 8006b4a:	4b4c      	ldr	r3, [pc, #304]	; (8006c7c <mem_malloc+0x1d4>)
 8006b4c:	f240 3287 	movw	r2, #903	; 0x387
 8006b50:	494b      	ldr	r1, [pc, #300]	; (8006c80 <mem_malloc+0x1d8>)
 8006b52:	484c      	ldr	r0, [pc, #304]	; (8006c84 <mem_malloc+0x1dc>)
 8006b54:	f004 fbdc 	bl	800b310 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b58:	8a7b      	ldrh	r3, [r7, #18]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fd00 	bl	8006560 <ptr_to_mem>
 8006b60:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8bfa      	ldrh	r2, [r7, #30]
 8006b74:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	8a7a      	ldrh	r2, [r7, #18]
 8006b7a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b8a:	d00b      	beq.n	8006ba4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fce5 	bl	8006560 <ptr_to_mem>
 8006b96:	4602      	mov	r2, r0
 8006b98:	8a7b      	ldrh	r3, [r7, #18]
 8006b9a:	8053      	strh	r3, [r2, #2]
 8006b9c:	e002      	b.n	8006ba4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <mem_malloc+0x1d0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d127      	bne.n	8006bfe <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006bae:	4b32      	ldr	r3, [pc, #200]	; (8006c78 <mem_malloc+0x1d0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006bb4:	e005      	b.n	8006bc2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fcd0 	bl	8006560 <ptr_to_mem>
 8006bc0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	791b      	ldrb	r3, [r3, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <mem_malloc+0x12c>
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <mem_malloc+0x1e0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d1f0      	bne.n	8006bb6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006bd4:	4a28      	ldr	r2, [pc, #160]	; (8006c78 <mem_malloc+0x1d0>)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006bda:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <mem_malloc+0x1d0>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b2a      	ldr	r3, [pc, #168]	; (8006c88 <mem_malloc+0x1e0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d00b      	beq.n	8006bfe <mem_malloc+0x156>
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <mem_malloc+0x1d0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	791b      	ldrb	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <mem_malloc+0x156>
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <mem_malloc+0x1d4>)
 8006bf2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006bf6:	4925      	ldr	r1, [pc, #148]	; (8006c8c <mem_malloc+0x1e4>)
 8006bf8:	4822      	ldr	r0, [pc, #136]	; (8006c84 <mem_malloc+0x1dc>)
 8006bfa:	f004 fb89 	bl	800b310 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006bfe:	8bba      	ldrh	r2, [r7, #28]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4413      	add	r3, r2
 8006c04:	3308      	adds	r3, #8
 8006c06:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <mem_malloc+0x1e0>)
 8006c08:	6812      	ldr	r2, [r2, #0]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d906      	bls.n	8006c1c <mem_malloc+0x174>
 8006c0e:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <mem_malloc+0x1d4>)
 8006c10:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006c14:	491e      	ldr	r1, [pc, #120]	; (8006c90 <mem_malloc+0x1e8>)
 8006c16:	481b      	ldr	r0, [pc, #108]	; (8006c84 <mem_malloc+0x1dc>)
 8006c18:	f004 fb7a 	bl	800b310 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <mem_malloc+0x18c>
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <mem_malloc+0x1d4>)
 8006c28:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006c2c:	4919      	ldr	r1, [pc, #100]	; (8006c94 <mem_malloc+0x1ec>)
 8006c2e:	4815      	ldr	r0, [pc, #84]	; (8006c84 <mem_malloc+0x1dc>)
 8006c30:	f004 fb6e 	bl	800b310 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d006      	beq.n	8006c4c <mem_malloc+0x1a4>
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <mem_malloc+0x1d4>)
 8006c40:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006c44:	4914      	ldr	r1, [pc, #80]	; (8006c98 <mem_malloc+0x1f0>)
 8006c46:	480f      	ldr	r0, [pc, #60]	; (8006c84 <mem_malloc+0x1dc>)
 8006c48:	f004 fb62 	bl	800b310 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	e00e      	b.n	8006c70 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c52:	8bfb      	ldrh	r3, [r7, #30]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fc83 	bl	8006560 <ptr_to_mem>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c60:	8bfa      	ldrh	r2, [r7, #30]
 8006c62:	8bbb      	ldrh	r3, [r7, #28]
 8006c64:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	f4ff af44 	bcc.w	8006af6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3720      	adds	r7, #32
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20005924 	.word	0x20005924
 8006c7c:	0800c424 	.word	0x0800c424
 8006c80:	0800c5cc 	.word	0x0800c5cc
 8006c84:	0800c46c 	.word	0x0800c46c
 8006c88:	20005920 	.word	0x20005920
 8006c8c:	0800c5e0 	.word	0x0800c5e0
 8006c90:	0800c5fc 	.word	0x0800c5fc
 8006c94:	0800c62c 	.word	0x0800c62c
 8006c98:	0800c65c 	.word	0x0800c65c

08006c9c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	3303      	adds	r3, #3
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e011      	b.n	8006ce2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	885b      	ldrh	r3, [r3, #2]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	dbe7      	blt.n	8006cbe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d02:	2300      	movs	r3, #0
 8006d04:	80fb      	strh	r3, [r7, #6]
 8006d06:	e009      	b.n	8006d1c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	4a08      	ldr	r2, [pc, #32]	; (8006d2c <memp_init+0x30>)
 8006d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff ffc3 	bl	8006c9c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	80fb      	strh	r3, [r7, #6]
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d9f2      	bls.n	8006d08 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	0800d9a0 	.word	0x0800d9a0

08006d30 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d012      	beq.n	8006d6c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d006      	beq.n	8006d68 <do_memp_malloc_pool+0x38>
 8006d5a:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <do_memp_malloc_pool+0x48>)
 8006d5c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006d60:	4906      	ldr	r1, [pc, #24]	; (8006d7c <do_memp_malloc_pool+0x4c>)
 8006d62:	4807      	ldr	r0, [pc, #28]	; (8006d80 <do_memp_malloc_pool+0x50>)
 8006d64:	f004 fad4 	bl	800b310 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e000      	b.n	8006d6e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	0800c680 	.word	0x0800c680
 8006d7c:	0800c6b0 	.word	0x0800c6b0
 8006d80:	0800c6d4 	.word	0x0800c6d4

08006d84 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <memp_malloc_pool+0x1c>
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <memp_malloc_pool+0x38>)
 8006d94:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006d98:	4909      	ldr	r1, [pc, #36]	; (8006dc0 <memp_malloc_pool+0x3c>)
 8006d9a:	480a      	ldr	r0, [pc, #40]	; (8006dc4 <memp_malloc_pool+0x40>)
 8006d9c:	f004 fab8 	bl	800b310 <iprintf>
  if (desc == NULL) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <memp_malloc_pool+0x26>
    return NULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	e003      	b.n	8006db2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ffc0 	bl	8006d30 <do_memp_malloc_pool>
 8006db0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	0800c680 	.word	0x0800c680
 8006dc0:	0800c6fc 	.word	0x0800c6fc
 8006dc4:	0800c6d4 	.word	0x0800c6d4

08006dc8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	2b05      	cmp	r3, #5
 8006dd6:	d908      	bls.n	8006dea <memp_malloc+0x22>
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <memp_malloc+0x3c>)
 8006dda:	f240 1257 	movw	r2, #343	; 0x157
 8006dde:	490a      	ldr	r1, [pc, #40]	; (8006e08 <memp_malloc+0x40>)
 8006de0:	480a      	ldr	r0, [pc, #40]	; (8006e0c <memp_malloc+0x44>)
 8006de2:	f004 fa95 	bl	800b310 <iprintf>
 8006de6:	2300      	movs	r3, #0
 8006de8:	e008      	b.n	8006dfc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <memp_malloc+0x48>)
 8006dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff ff9c 	bl	8006d30 <do_memp_malloc_pool>
 8006df8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	0800c680 	.word	0x0800c680
 8006e08:	0800c710 	.word	0x0800c710
 8006e0c:	0800c6d4 	.word	0x0800c6d4
 8006e10:	0800d9a0 	.word	0x0800d9a0

08006e14 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	f003 0303 	and.w	r3, r3, #3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <do_memp_free_pool+0x22>
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <do_memp_free_pool+0x40>)
 8006e2a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006e2e:	490a      	ldr	r1, [pc, #40]	; (8006e58 <do_memp_free_pool+0x44>)
 8006e30:	480a      	ldr	r0, [pc, #40]	; (8006e5c <do_memp_free_pool+0x48>)
 8006e32:	f004 fa6d 	bl	800b310 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	0800c680 	.word	0x0800c680
 8006e58:	0800c730 	.word	0x0800c730
 8006e5c:	0800c6d4 	.word	0x0800c6d4

08006e60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <memp_free_pool+0x1e>
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <memp_free_pool+0x3c>)
 8006e72:	f240 1295 	movw	r2, #405	; 0x195
 8006e76:	490a      	ldr	r1, [pc, #40]	; (8006ea0 <memp_free_pool+0x40>)
 8006e78:	480a      	ldr	r0, [pc, #40]	; (8006ea4 <memp_free_pool+0x44>)
 8006e7a:	f004 fa49 	bl	800b310 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <memp_free_pool+0x34>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ffc1 	bl	8006e14 <do_memp_free_pool>
 8006e92:	e000      	b.n	8006e96 <memp_free_pool+0x36>
    return;
 8006e94:	bf00      	nop
}
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	0800c680 	.word	0x0800c680
 8006ea0:	0800c6fc 	.word	0x0800c6fc
 8006ea4:	0800c6d4 	.word	0x0800c6d4

08006ea8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d907      	bls.n	8006eca <memp_free+0x22>
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <memp_free+0x44>)
 8006ebc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <memp_free+0x48>)
 8006ec2:	480c      	ldr	r0, [pc, #48]	; (8006ef4 <memp_free+0x4c>)
 8006ec4:	f004 fa24 	bl	800b310 <iprintf>
 8006ec8:	e00c      	b.n	8006ee4 <memp_free+0x3c>

  if (mem == NULL) {
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <memp_free+0x50>)
 8006ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff ff9a 	bl	8006e14 <do_memp_free_pool>
 8006ee0:	e000      	b.n	8006ee4 <memp_free+0x3c>
    return;
 8006ee2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	0800c680 	.word	0x0800c680
 8006ef0:	0800c750 	.word	0x0800c750
 8006ef4:	0800c6d4 	.word	0x0800c6d4
 8006ef8:	0800d9a0 	.word	0x0800d9a0

08006efc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f00:	bf00      	nop
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d108      	bne.n	8006f32 <netif_add+0x26>
 8006f20:	4b57      	ldr	r3, [pc, #348]	; (8007080 <netif_add+0x174>)
 8006f22:	f240 1227 	movw	r2, #295	; 0x127
 8006f26:	4957      	ldr	r1, [pc, #348]	; (8007084 <netif_add+0x178>)
 8006f28:	4857      	ldr	r0, [pc, #348]	; (8007088 <netif_add+0x17c>)
 8006f2a:	f004 f9f1 	bl	800b310 <iprintf>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e0a2      	b.n	8007078 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d108      	bne.n	8006f4a <netif_add+0x3e>
 8006f38:	4b51      	ldr	r3, [pc, #324]	; (8007080 <netif_add+0x174>)
 8006f3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006f3e:	4953      	ldr	r1, [pc, #332]	; (800708c <netif_add+0x180>)
 8006f40:	4851      	ldr	r0, [pc, #324]	; (8007088 <netif_add+0x17c>)
 8006f42:	f004 f9e5 	bl	800b310 <iprintf>
 8006f46:	2300      	movs	r3, #0
 8006f48:	e096      	b.n	8007078 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f50:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <netif_add+0x184>)
 8006f52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f5a:	4b4d      	ldr	r3, [pc, #308]	; (8007090 <netif_add+0x184>)
 8006f5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f64:	4b4a      	ldr	r3, [pc, #296]	; (8007090 <netif_add+0x184>)
 8006f66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a45      	ldr	r2, [pc, #276]	; (8007094 <netif_add+0x188>)
 8006f7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a3a      	ldr	r2, [r7, #32]
 8006f98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006f9a:	4b3f      	ldr	r3, [pc, #252]	; (8007098 <netif_add+0x18c>)
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f90f 	bl	80071d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	4798      	blx	r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <netif_add+0xba>
    return NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e058      	b.n	8007078 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fcc:	2bff      	cmp	r3, #255	; 0xff
 8006fce:	d103      	bne.n	8006fd8 <netif_add+0xcc>
        netif->num = 0;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006fdc:	4b2f      	ldr	r3, [pc, #188]	; (800709c <netif_add+0x190>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e02b      	b.n	800703c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d106      	bne.n	8006ffa <netif_add+0xee>
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <netif_add+0x174>)
 8006fee:	f240 128b 	movw	r2, #395	; 0x18b
 8006ff2:	492b      	ldr	r1, [pc, #172]	; (80070a0 <netif_add+0x194>)
 8006ff4:	4824      	ldr	r0, [pc, #144]	; (8007088 <netif_add+0x17c>)
 8006ff6:	f004 f98b 	bl	800b310 <iprintf>
        num_netifs++;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2bff      	cmp	r3, #255	; 0xff
 8007004:	dd06      	ble.n	8007014 <netif_add+0x108>
 8007006:	4b1e      	ldr	r3, [pc, #120]	; (8007080 <netif_add+0x174>)
 8007008:	f240 128d 	movw	r2, #397	; 0x18d
 800700c:	4925      	ldr	r1, [pc, #148]	; (80070a4 <netif_add+0x198>)
 800700e:	481e      	ldr	r0, [pc, #120]	; (8007088 <netif_add+0x17c>)
 8007010:	f004 f97e 	bl	800b310 <iprintf>
        if (netif2->num == netif->num) {
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007020:	429a      	cmp	r2, r3
 8007022:	d108      	bne.n	8007036 <netif_add+0x12a>
          netif->num++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800702a:	3301      	adds	r3, #1
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007034:	e005      	b.n	8007042 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d0      	bne.n	8006fe4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1be      	bne.n	8006fc6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704e:	2bfe      	cmp	r3, #254	; 0xfe
 8007050:	d103      	bne.n	800705a <netif_add+0x14e>
    netif_num = 0;
 8007052:	4b11      	ldr	r3, [pc, #68]	; (8007098 <netif_add+0x18c>)
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e006      	b.n	8007068 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007060:	3301      	adds	r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <netif_add+0x18c>)
 8007066:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <netif_add+0x190>)
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <netif_add+0x190>)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007076:	68fb      	ldr	r3, [r7, #12]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	0800c76c 	.word	0x0800c76c
 8007084:	0800c800 	.word	0x0800c800
 8007088:	0800c7bc 	.word	0x0800c7bc
 800708c:	0800c81c 	.word	0x0800c81c
 8007090:	0800d9c8 	.word	0x0800d9c8
 8007094:	080074af 	.word	0x080074af
 8007098:	20008308 	.word	0x20008308
 800709c:	20008300 	.word	0x20008300
 80070a0:	0800c840 	.word	0x0800c840
 80070a4:	0800c854 	.word	0x0800c854

080070a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fdf5 	bl	8008ca4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <netif_do_set_ipaddr+0x20>
 80070d6:	4b1d      	ldr	r3, [pc, #116]	; (800714c <netif_do_set_ipaddr+0x88>)
 80070d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80070dc:	491c      	ldr	r1, [pc, #112]	; (8007150 <netif_do_set_ipaddr+0x8c>)
 80070de:	481d      	ldr	r0, [pc, #116]	; (8007154 <netif_do_set_ipaddr+0x90>)
 80070e0:	f004 f916 	bl	800b310 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <netif_do_set_ipaddr+0x34>
 80070ea:	4b18      	ldr	r3, [pc, #96]	; (800714c <netif_do_set_ipaddr+0x88>)
 80070ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80070f0:	4917      	ldr	r1, [pc, #92]	; (8007150 <netif_do_set_ipaddr+0x8c>)
 80070f2:	4818      	ldr	r0, [pc, #96]	; (8007154 <netif_do_set_ipaddr+0x90>)
 80070f4:	f004 f90c 	bl	800b310 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3304      	adds	r3, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d01c      	beq.n	8007140 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3304      	adds	r3, #4
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ffc3 	bl	80070a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <netif_do_set_ipaddr+0x6a>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	e000      	b.n	8007130 <netif_do_set_ipaddr+0x6c>
 800712e:	2300      	movs	r3, #0
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007134:	2101      	movs	r1, #1
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f8d2 	bl	80072e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	0800c76c 	.word	0x0800c76c
 8007150:	0800c884 	.word	0x0800c884
 8007154:	0800c7bc 	.word	0x0800c7bc

08007158 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3308      	adds	r3, #8
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d00a      	beq.n	8007188 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <netif_do_set_netmask+0x26>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	e000      	b.n	8007180 <netif_do_set_netmask+0x28>
 800717e:	2300      	movs	r3, #0
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	330c      	adds	r3, #12
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d00a      	beq.n	80071c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <netif_do_set_gw+0x26>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	e000      	b.n	80071be <netif_do_set_gw+0x28>
 80071bc:	2300      	movs	r3, #0
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80071e2:	2300      	movs	r3, #0
 80071e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80071f0:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <netif_set_addr+0x90>)
 80071f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80071fa:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <netif_set_addr+0x90>)
 80071fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007204:	4b17      	ldr	r3, [pc, #92]	; (8007264 <netif_set_addr+0x90>)
 8007206:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <netif_set_addr+0x42>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <netif_set_addr+0x46>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <netif_set_addr+0x48>
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d006      	beq.n	8007232 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	461a      	mov	r2, r3
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff ff49 	bl	80070c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff ff8e 	bl	8007158 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff ffa8 	bl	8007196 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800724c:	f107 0310 	add.w	r3, r7, #16
 8007250:	461a      	mov	r2, r3
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff ff35 	bl	80070c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800725a:	bf00      	nop
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	0800d9c8 	.word	0x0800d9c8

08007268 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007270:	4a04      	ldr	r2, [pc, #16]	; (8007284 <netif_set_default+0x1c>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20008304 	.word	0x20008304

08007288 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d107      	bne.n	80072a6 <netif_set_up+0x1e>
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <netif_set_up+0x4c>)
 8007298:	f44f 7254 	mov.w	r2, #848	; 0x350
 800729c:	490e      	ldr	r1, [pc, #56]	; (80072d8 <netif_set_up+0x50>)
 800729e:	480f      	ldr	r0, [pc, #60]	; (80072dc <netif_set_up+0x54>)
 80072a0:	f004 f836 	bl	800b310 <iprintf>
 80072a4:	e013      	b.n	80072ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10c      	bne.n	80072ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f809 	bl	80072e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	0800c76c 	.word	0x0800c76c
 80072d8:	0800c8f4 	.word	0x0800c8f4
 80072dc:	0800c7bc 	.word	0x0800c7bc

080072e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <netif_issue_reports+0x20>
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <netif_issue_reports+0x74>)
 80072f4:	f240 326d 	movw	r2, #877	; 0x36d
 80072f8:	4917      	ldr	r1, [pc, #92]	; (8007358 <netif_issue_reports+0x78>)
 80072fa:	4818      	ldr	r0, [pc, #96]	; (800735c <netif_issue_reports+0x7c>)
 80072fc:	f004 f808 	bl	800b310 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01e      	beq.n	800734c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007314:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007318:	2b00      	cmp	r3, #0
 800731a:	d017      	beq.n	800734c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d013      	beq.n	800734e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f002 fc17 	bl	8009b78 <etharp_request>
 800734a:	e000      	b.n	800734e <netif_issue_reports+0x6e>
    return;
 800734c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	0800c76c 	.word	0x0800c76c
 8007358:	0800c910 	.word	0x0800c910
 800735c:	0800c7bc 	.word	0x0800c7bc

08007360 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <netif_set_down+0x1e>
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <netif_set_down+0x58>)
 8007370:	f240 329b 	movw	r2, #923	; 0x39b
 8007374:	4911      	ldr	r1, [pc, #68]	; (80073bc <netif_set_down+0x5c>)
 8007376:	4812      	ldr	r0, [pc, #72]	; (80073c0 <netif_set_down+0x60>)
 8007378:	f003 ffca 	bl	800b310 <iprintf>
 800737c:	e019      	b.n	80073b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d012      	beq.n	80073b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f001 ffa1 	bl	80092f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	0800c76c 	.word	0x0800c76c
 80073bc:	0800c934 	.word	0x0800c934
 80073c0:	0800c7bc 	.word	0x0800c7bc

080073c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d107      	bne.n	80073e2 <netif_set_link_up+0x1e>
 80073d2:	4b13      	ldr	r3, [pc, #76]	; (8007420 <netif_set_link_up+0x5c>)
 80073d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80073d8:	4912      	ldr	r1, [pc, #72]	; (8007424 <netif_set_link_up+0x60>)
 80073da:	4813      	ldr	r0, [pc, #76]	; (8007428 <netif_set_link_up+0x64>)
 80073dc:	f003 ff98 	bl	800b310 <iprintf>
 80073e0:	e01b      	b.n	800741a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d114      	bne.n	800741a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073f6:	f043 0304 	orr.w	r3, r3, #4
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007402:	2103      	movs	r1, #3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ff6b 	bl	80072e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <netif_set_link_up+0x56>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	0800c76c 	.word	0x0800c76c
 8007424:	0800c954 	.word	0x0800c954
 8007428:	0800c7bc 	.word	0x0800c7bc

0800742c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d107      	bne.n	800744a <netif_set_link_down+0x1e>
 800743a:	4b11      	ldr	r3, [pc, #68]	; (8007480 <netif_set_link_down+0x54>)
 800743c:	f240 4206 	movw	r2, #1030	; 0x406
 8007440:	4910      	ldr	r1, [pc, #64]	; (8007484 <netif_set_link_down+0x58>)
 8007442:	4811      	ldr	r0, [pc, #68]	; (8007488 <netif_set_link_down+0x5c>)
 8007444:	f003 ff64 	bl	800b310 <iprintf>
 8007448:	e017      	b.n	800747a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d010      	beq.n	800747a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800745e:	f023 0304 	bic.w	r3, r3, #4
 8007462:	b2da      	uxtb	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <netif_set_link_down+0x4e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	0800c76c 	.word	0x0800c76c
 8007484:	0800c978 	.word	0x0800c978
 8007488:	0800c7bc 	.word	0x0800c7bc

0800748c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	61da      	str	r2, [r3, #28]
  }
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074ba:	f06f 030b 	mvn.w	r3, #11
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d013      	beq.n	8007504 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80074dc:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <netif_get_by_index+0x48>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e00c      	b.n	80074fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074ea:	3301      	adds	r3, #1
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	79fa      	ldrb	r2, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d101      	bne.n	80074f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	e006      	b.n	8007506 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ef      	bne.n	80074e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20008300 	.word	0x20008300

08007518 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	460b      	mov	r3, r1
 8007528:	80fb      	strh	r3, [r7, #6]
 800752a:	4613      	mov	r3, r2
 800752c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	88fa      	ldrh	r2, [r7, #6]
 800753e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88ba      	ldrh	r2, [r7, #4]
 8007544:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007546:	8b3b      	ldrh	r3, [r7, #24]
 8007548:	b2da      	uxtb	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	7f3a      	ldrb	r2, [r7, #28]
 8007552:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	73da      	strb	r2, [r3, #15]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	; 0x30
 8007570:	af02      	add	r7, sp, #8
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
 8007576:	460b      	mov	r3, r1
 8007578:	80bb      	strh	r3, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007588:	d07d      	beq.n	8007686 <pbuf_alloc+0x11a>
 800758a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800758e:	f300 80c6 	bgt.w	800771e <pbuf_alloc+0x1b2>
 8007592:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007596:	d010      	beq.n	80075ba <pbuf_alloc+0x4e>
 8007598:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800759c:	f300 80bf 	bgt.w	800771e <pbuf_alloc+0x1b2>
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d002      	beq.n	80075aa <pbuf_alloc+0x3e>
 80075a4:	2b41      	cmp	r3, #65	; 0x41
 80075a6:	f040 80ba 	bne.w	800771e <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80075aa:	887a      	ldrh	r2, [r7, #2]
 80075ac:	88bb      	ldrh	r3, [r7, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	2000      	movs	r0, #0
 80075b2:	f000 f8cf 	bl	8007754 <pbuf_alloc_reference>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80075b8:	e0bb      	b.n	8007732 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80075c2:	88bb      	ldrh	r3, [r7, #4]
 80075c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80075c6:	2005      	movs	r0, #5
 80075c8:	f7ff fbfe 	bl	8006dc8 <memp_malloc>
 80075cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <pbuf_alloc+0x74>
            pbuf_free(p);
 80075da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075dc:	f000 faa8 	bl	8007b30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e0a7      	b.n	8007734 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80075e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80075e6:	3303      	adds	r3, #3
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	8b7a      	ldrh	r2, [r7, #26]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	bf28      	it	cs
 80075fc:	4613      	movcs	r3, r2
 80075fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007602:	3310      	adds	r3, #16
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	3303      	adds	r3, #3
 800760a:	f023 0303 	bic.w	r3, r3, #3
 800760e:	4618      	mov	r0, r3
 8007610:	89f9      	ldrh	r1, [r7, #14]
 8007612:	8b7a      	ldrh	r2, [r7, #26]
 8007614:	2300      	movs	r3, #0
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	887b      	ldrh	r3, [r7, #2]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	460b      	mov	r3, r1
 800761e:	4601      	mov	r1, r0
 8007620:	6938      	ldr	r0, [r7, #16]
 8007622:	f7ff ff79 	bl	8007518 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d006      	beq.n	8007640 <pbuf_alloc+0xd4>
 8007632:	4b42      	ldr	r3, [pc, #264]	; (800773c <pbuf_alloc+0x1d0>)
 8007634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007638:	4941      	ldr	r1, [pc, #260]	; (8007740 <pbuf_alloc+0x1d4>)
 800763a:	4842      	ldr	r0, [pc, #264]	; (8007744 <pbuf_alloc+0x1d8>)
 800763c:	f003 fe68 	bl	800b310 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007642:	3303      	adds	r3, #3
 8007644:	f023 0303 	bic.w	r3, r3, #3
 8007648:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800764c:	d106      	bne.n	800765c <pbuf_alloc+0xf0>
 800764e:	4b3b      	ldr	r3, [pc, #236]	; (800773c <pbuf_alloc+0x1d0>)
 8007650:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007654:	493c      	ldr	r1, [pc, #240]	; (8007748 <pbuf_alloc+0x1dc>)
 8007656:	483b      	ldr	r0, [pc, #236]	; (8007744 <pbuf_alloc+0x1d8>)
 8007658:	f003 fe5a 	bl	800b310 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	e002      	b.n	800766e <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007672:	8b7a      	ldrh	r2, [r7, #26]
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800767e:	8b7b      	ldrh	r3, [r7, #26]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1a0      	bne.n	80075c6 <pbuf_alloc+0x5a>
      break;
 8007684:	e055      	b.n	8007732 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007688:	3303      	adds	r3, #3
 800768a:	b29b      	uxth	r3, r3
 800768c:	f023 0303 	bic.w	r3, r3, #3
 8007690:	b29a      	uxth	r2, r3
 8007692:	88bb      	ldrh	r3, [r7, #4]
 8007694:	3303      	adds	r3, #3
 8007696:	b29b      	uxth	r3, r3
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	b29b      	uxth	r3, r3
 800769e:	4413      	add	r3, r2
 80076a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80076a2:	8b3b      	ldrh	r3, [r7, #24]
 80076a4:	3310      	adds	r3, #16
 80076a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076a8:	8b3a      	ldrh	r2, [r7, #24]
 80076aa:	88bb      	ldrh	r3, [r7, #4]
 80076ac:	3303      	adds	r3, #3
 80076ae:	f023 0303 	bic.w	r3, r3, #3
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d306      	bcc.n	80076c4 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80076b6:	8afa      	ldrh	r2, [r7, #22]
 80076b8:	88bb      	ldrh	r3, [r7, #4]
 80076ba:	3303      	adds	r3, #3
 80076bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d201      	bcs.n	80076c8 <pbuf_alloc+0x15c>
        return NULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e035      	b.n	8007734 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80076c8:	8afb      	ldrh	r3, [r7, #22]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff f9ec 	bl	8006aa8 <mem_malloc>
 80076d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <pbuf_alloc+0x170>
        return NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	e02b      	b.n	8007734 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80076dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076de:	3310      	adds	r3, #16
 80076e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e2:	4413      	add	r3, r2
 80076e4:	3303      	adds	r3, #3
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	4618      	mov	r0, r3
 80076ec:	88b9      	ldrh	r1, [r7, #4]
 80076ee:	88ba      	ldrh	r2, [r7, #4]
 80076f0:	2300      	movs	r3, #0
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	887b      	ldrh	r3, [r7, #2]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	460b      	mov	r3, r1
 80076fa:	4601      	mov	r1, r0
 80076fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076fe:	f7ff ff0b 	bl	8007518 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d010      	beq.n	8007730 <pbuf_alloc+0x1c4>
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <pbuf_alloc+0x1d0>)
 8007710:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007714:	490d      	ldr	r1, [pc, #52]	; (800774c <pbuf_alloc+0x1e0>)
 8007716:	480b      	ldr	r0, [pc, #44]	; (8007744 <pbuf_alloc+0x1d8>)
 8007718:	f003 fdfa 	bl	800b310 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800771c:	e008      	b.n	8007730 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <pbuf_alloc+0x1d0>)
 8007720:	f240 1227 	movw	r2, #295	; 0x127
 8007724:	490a      	ldr	r1, [pc, #40]	; (8007750 <pbuf_alloc+0x1e4>)
 8007726:	4807      	ldr	r0, [pc, #28]	; (8007744 <pbuf_alloc+0x1d8>)
 8007728:	f003 fdf2 	bl	800b310 <iprintf>
      return NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	e001      	b.n	8007734 <pbuf_alloc+0x1c8>
      break;
 8007730:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007734:	4618      	mov	r0, r3
 8007736:	3728      	adds	r7, #40	; 0x28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0800c99c 	.word	0x0800c99c
 8007740:	0800c9cc 	.word	0x0800c9cc
 8007744:	0800c9fc 	.word	0x0800c9fc
 8007748:	0800ca24 	.word	0x0800ca24
 800774c:	0800ca58 	.word	0x0800ca58
 8007750:	0800ca84 	.word	0x0800ca84

08007754 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af02      	add	r7, sp, #8
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
 8007760:	4613      	mov	r3, r2
 8007762:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007764:	883b      	ldrh	r3, [r7, #0]
 8007766:	2b41      	cmp	r3, #65	; 0x41
 8007768:	d009      	beq.n	800777e <pbuf_alloc_reference+0x2a>
 800776a:	883b      	ldrh	r3, [r7, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d006      	beq.n	800777e <pbuf_alloc_reference+0x2a>
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <pbuf_alloc_reference+0x5c>)
 8007772:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007776:	490f      	ldr	r1, [pc, #60]	; (80077b4 <pbuf_alloc_reference+0x60>)
 8007778:	480f      	ldr	r0, [pc, #60]	; (80077b8 <pbuf_alloc_reference+0x64>)
 800777a:	f003 fdc9 	bl	800b310 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800777e:	2004      	movs	r0, #4
 8007780:	f7ff fb22 	bl	8006dc8 <memp_malloc>
 8007784:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	e00b      	b.n	80077a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007790:	8879      	ldrh	r1, [r7, #2]
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	2300      	movs	r3, #0
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	883b      	ldrh	r3, [r7, #0]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	460b      	mov	r3, r1
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff feb9 	bl	8007518 <pbuf_init_alloced_pbuf>
  return p;
 80077a6:	68fb      	ldr	r3, [r7, #12]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	0800c99c 	.word	0x0800c99c
 80077b4:	0800caa0 	.word	0x0800caa0
 80077b8:	0800c9fc 	.word	0x0800c9fc

080077bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	460b      	mov	r3, r1
 80077ca:	81bb      	strh	r3, [r7, #12]
 80077cc:	4613      	mov	r3, r2
 80077ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80077d4:	8a7b      	ldrh	r3, [r7, #18]
 80077d6:	3303      	adds	r3, #3
 80077d8:	f023 0203 	bic.w	r2, r3, #3
 80077dc:	89bb      	ldrh	r3, [r7, #12]
 80077de:	441a      	add	r2, r3
 80077e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d901      	bls.n	80077ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e018      	b.n	800781c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80077f0:	8a7b      	ldrh	r3, [r7, #18]
 80077f2:	3303      	adds	r3, #3
 80077f4:	f023 0303 	bic.w	r3, r3, #3
 80077f8:	6a3a      	ldr	r2, [r7, #32]
 80077fa:	4413      	add	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e001      	b.n	8007804 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	89b9      	ldrh	r1, [r7, #12]
 8007808:	89ba      	ldrh	r2, [r7, #12]
 800780a:	2302      	movs	r3, #2
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	897b      	ldrh	r3, [r7, #10]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	460b      	mov	r3, r1
 8007814:	6979      	ldr	r1, [r7, #20]
 8007816:	f7ff fe7f 	bl	8007518 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800781a:	687b      	ldr	r3, [r7, #4]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <pbuf_realloc+0x20>
 8007836:	4b3a      	ldr	r3, [pc, #232]	; (8007920 <pbuf_realloc+0xfc>)
 8007838:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800783c:	4939      	ldr	r1, [pc, #228]	; (8007924 <pbuf_realloc+0x100>)
 800783e:	483a      	ldr	r0, [pc, #232]	; (8007928 <pbuf_realloc+0x104>)
 8007840:	f003 fd66 	bl	800b310 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	891b      	ldrh	r3, [r3, #8]
 8007848:	887a      	ldrh	r2, [r7, #2]
 800784a:	429a      	cmp	r2, r3
 800784c:	d263      	bcs.n	8007916 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	891a      	ldrh	r2, [r3, #8]
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007858:	887b      	ldrh	r3, [r7, #2]
 800785a:	817b      	strh	r3, [r7, #10]
  q = p;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007860:	e018      	b.n	8007894 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	895b      	ldrh	r3, [r3, #10]
 8007866:	897a      	ldrh	r2, [r7, #10]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	891a      	ldrh	r2, [r3, #8]
 8007870:	893b      	ldrh	r3, [r7, #8]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <pbuf_realloc+0x70>
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <pbuf_realloc+0xfc>)
 8007888:	f240 12af 	movw	r2, #431	; 0x1af
 800788c:	4927      	ldr	r1, [pc, #156]	; (800792c <pbuf_realloc+0x108>)
 800788e:	4826      	ldr	r0, [pc, #152]	; (8007928 <pbuf_realloc+0x104>)
 8007890:	f003 fd3e 	bl	800b310 <iprintf>
  while (rem_len > q->len) {
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	895b      	ldrh	r3, [r3, #10]
 8007898:	897a      	ldrh	r2, [r7, #10]
 800789a:	429a      	cmp	r2, r3
 800789c:	d8e1      	bhi.n	8007862 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	7b1b      	ldrb	r3, [r3, #12]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d121      	bne.n	80078ee <pbuf_realloc+0xca>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	895b      	ldrh	r3, [r3, #10]
 80078ae:	897a      	ldrh	r2, [r7, #10]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d01c      	beq.n	80078ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	7b5b      	ldrb	r3, [r3, #13]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d116      	bne.n	80078ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	897b      	ldrh	r3, [r7, #10]
 80078cc:	4413      	add	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7fe ffec 	bl	80068b0 <mem_trim>
 80078d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <pbuf_realloc+0xca>
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <pbuf_realloc+0xfc>)
 80078e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80078e6:	4912      	ldr	r1, [pc, #72]	; (8007930 <pbuf_realloc+0x10c>)
 80078e8:	480f      	ldr	r0, [pc, #60]	; (8007928 <pbuf_realloc+0x104>)
 80078ea:	f003 fd11 	bl	800b310 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	897a      	ldrh	r2, [r7, #10]
 80078f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	895a      	ldrh	r2, [r3, #10]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f911 	bl	8007b30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	e000      	b.n	8007918 <pbuf_realloc+0xf4>
    return;
 8007916:	bf00      	nop

}
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	0800c99c 	.word	0x0800c99c
 8007924:	0800cab4 	.word	0x0800cab4
 8007928:	0800c9fc 	.word	0x0800c9fc
 800792c:	0800cacc 	.word	0x0800cacc
 8007930:	0800cae4 	.word	0x0800cae4

08007934 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <pbuf_add_header_impl+0x22>
 8007948:	4b2b      	ldr	r3, [pc, #172]	; (80079f8 <pbuf_add_header_impl+0xc4>)
 800794a:	f240 12df 	movw	r2, #479	; 0x1df
 800794e:	492b      	ldr	r1, [pc, #172]	; (80079fc <pbuf_add_header_impl+0xc8>)
 8007950:	482b      	ldr	r0, [pc, #172]	; (8007a00 <pbuf_add_header_impl+0xcc>)
 8007952:	f003 fcdd 	bl	800b310 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <pbuf_add_header_impl+0x30>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007962:	d301      	bcc.n	8007968 <pbuf_add_header_impl+0x34>
    return 1;
 8007964:	2301      	movs	r3, #1
 8007966:	e043      	b.n	80079f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <pbuf_add_header_impl+0x3e>
    return 0;
 800796e:	2300      	movs	r3, #0
 8007970:	e03e      	b.n	80079f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	891a      	ldrh	r2, [r3, #8]
 800797a:	8a7b      	ldrh	r3, [r7, #18]
 800797c:	4413      	add	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	8a7a      	ldrh	r2, [r7, #18]
 8007982:	429a      	cmp	r2, r3
 8007984:	d901      	bls.n	800798a <pbuf_add_header_impl+0x56>
    return 1;
 8007986:	2301      	movs	r3, #1
 8007988:	e032      	b.n	80079f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	7b1b      	ldrb	r3, [r3, #12]
 800798e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007990:	8a3b      	ldrh	r3, [r7, #16]
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00c      	beq.n	80079b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	425b      	negs	r3, r3
 80079a2:	4413      	add	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3310      	adds	r3, #16
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d20d      	bcs.n	80079cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e01d      	b.n	80079f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d006      	beq.n	80079c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	425b      	negs	r3, r3
 80079c2:	4413      	add	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	e001      	b.n	80079cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e011      	b.n	80079f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	895a      	ldrh	r2, [r3, #10]
 80079d6:	8a7b      	ldrh	r3, [r7, #18]
 80079d8:	4413      	add	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	891a      	ldrh	r2, [r3, #8]
 80079e4:	8a7b      	ldrh	r3, [r7, #18]
 80079e6:	4413      	add	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	0800c99c 	.word	0x0800c99c
 80079fc:	0800cb00 	.word	0x0800cb00
 8007a00:	0800c9fc 	.word	0x0800c9fc

08007a04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff ff8e 	bl	8007934 <pbuf_add_header_impl>
 8007a18:	4603      	mov	r3, r0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d106      	bne.n	8007a42 <pbuf_remove_header+0x1e>
 8007a34:	4b20      	ldr	r3, [pc, #128]	; (8007ab8 <pbuf_remove_header+0x94>)
 8007a36:	f240 224b 	movw	r2, #587	; 0x24b
 8007a3a:	4920      	ldr	r1, [pc, #128]	; (8007abc <pbuf_remove_header+0x98>)
 8007a3c:	4820      	ldr	r0, [pc, #128]	; (8007ac0 <pbuf_remove_header+0x9c>)
 8007a3e:	f003 fc67 	bl	800b310 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <pbuf_remove_header+0x2c>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4e:	d301      	bcc.n	8007a54 <pbuf_remove_header+0x30>
    return 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e02c      	b.n	8007aae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <pbuf_remove_header+0x3a>
    return 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e027      	b.n	8007aae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	895b      	ldrh	r3, [r3, #10]
 8007a66:	89fa      	ldrh	r2, [r7, #14]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d908      	bls.n	8007a7e <pbuf_remove_header+0x5a>
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <pbuf_remove_header+0x94>)
 8007a6e:	f240 2255 	movw	r2, #597	; 0x255
 8007a72:	4914      	ldr	r1, [pc, #80]	; (8007ac4 <pbuf_remove_header+0xa0>)
 8007a74:	4812      	ldr	r0, [pc, #72]	; (8007ac0 <pbuf_remove_header+0x9c>)
 8007a76:	f003 fc4b 	bl	800b310 <iprintf>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e017      	b.n	8007aae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	441a      	add	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	895a      	ldrh	r2, [r3, #10]
 8007a94:	89fb      	ldrh	r3, [r7, #14]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	891a      	ldrh	r2, [r3, #8]
 8007aa2:	89fb      	ldrh	r3, [r7, #14]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	0800c99c 	.word	0x0800c99c
 8007abc:	0800cb00 	.word	0x0800cb00
 8007ac0:	0800c9fc 	.word	0x0800c9fc
 8007ac4:	0800cb0c 	.word	0x0800cb0c

08007ac8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	807b      	strh	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da08      	bge.n	8007af2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ff9b 	bl	8007a24 <pbuf_remove_header>
 8007aee:	4603      	mov	r3, r0
 8007af0:	e007      	b.n	8007b02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007af2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007af6:	787a      	ldrb	r2, [r7, #1]
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff ff1a 	bl	8007934 <pbuf_add_header_impl>
 8007b00:	4603      	mov	r3, r0
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff ffd2 	bl	8007ac8 <pbuf_header_impl>
 8007b24:	4603      	mov	r3, r0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <pbuf_free+0x22>
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <pbuf_free+0xf8>)
 8007b46:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007b4a:	4938      	ldr	r1, [pc, #224]	; (8007c2c <pbuf_free+0xfc>)
 8007b4c:	4838      	ldr	r0, [pc, #224]	; (8007c30 <pbuf_free+0x100>)
 8007b4e:	f003 fbdf 	bl	800b310 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e063      	b.n	8007c1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007b5a:	e05c      	b.n	8007c16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7b9b      	ldrb	r3, [r3, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <pbuf_free+0x42>
 8007b64:	4b30      	ldr	r3, [pc, #192]	; (8007c28 <pbuf_free+0xf8>)
 8007b66:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007b6a:	4932      	ldr	r1, [pc, #200]	; (8007c34 <pbuf_free+0x104>)
 8007b6c:	4830      	ldr	r0, [pc, #192]	; (8007c30 <pbuf_free+0x100>)
 8007b6e:	f003 fbcf 	bl	800b310 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7b9b      	ldrb	r3, [r3, #14]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	739a      	strb	r2, [r3, #14]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7b9b      	ldrb	r3, [r3, #14]
 8007b82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007b84:	7dbb      	ldrb	r3, [r7, #22]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d143      	bne.n	8007c12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7b1b      	ldrb	r3, [r3, #12]
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7b5b      	ldrb	r3, [r3, #13]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d011      	beq.n	8007bca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <pbuf_free+0x90>
 8007bb2:	4b1d      	ldr	r3, [pc, #116]	; (8007c28 <pbuf_free+0xf8>)
 8007bb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007bb8:	491f      	ldr	r1, [pc, #124]	; (8007c38 <pbuf_free+0x108>)
 8007bba:	481d      	ldr	r0, [pc, #116]	; (8007c30 <pbuf_free+0x100>)
 8007bbc:	f003 fba8 	bl	800b310 <iprintf>
        pc->custom_free_function(p);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
 8007bc8:	e01d      	b.n	8007c06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d104      	bne.n	8007bda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	2005      	movs	r0, #5
 8007bd4:	f7ff f968 	bl	8006ea8 <memp_free>
 8007bd8:	e015      	b.n	8007c06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d104      	bne.n	8007bea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	2004      	movs	r0, #4
 8007be4:	f7ff f960 	bl	8006ea8 <memp_free>
 8007be8:	e00d      	b.n	8007c06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <pbuf_free+0xc8>
          mem_free(p);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fe fdf3 	bl	80067dc <mem_free>
 8007bf6:	e006      	b.n	8007c06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <pbuf_free+0xf8>)
 8007bfa:	f240 320f 	movw	r2, #783	; 0x30f
 8007bfe:	490f      	ldr	r1, [pc, #60]	; (8007c3c <pbuf_free+0x10c>)
 8007c00:	480b      	ldr	r0, [pc, #44]	; (8007c30 <pbuf_free+0x100>)
 8007c02:	f003 fb85 	bl	800b310 <iprintf>
        }
      }
      count++;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	607b      	str	r3, [r7, #4]
 8007c10:	e001      	b.n	8007c16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d19f      	bne.n	8007b5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	0800c99c 	.word	0x0800c99c
 8007c2c:	0800cb00 	.word	0x0800cb00
 8007c30:	0800c9fc 	.word	0x0800c9fc
 8007c34:	0800cb2c 	.word	0x0800cb2c
 8007c38:	0800cb44 	.word	0x0800cb44
 8007c3c:	0800cb68 	.word	0x0800cb68

08007c40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007c4c:	e005      	b.n	8007c5a <pbuf_clen+0x1a>
    ++len;
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	3301      	adds	r3, #1
 8007c52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f6      	bne.n	8007c4e <pbuf_clen+0xe>
  }
  return len;
 8007c60:	89fb      	ldrh	r3, [r7, #14]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d010      	beq.n	8007ca0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	7b9b      	ldrb	r3, [r3, #14]
 8007c82:	3301      	adds	r3, #1
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7b9b      	ldrb	r3, [r3, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <pbuf_ref+0x30>
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <pbuf_ref+0x38>)
 8007c94:	f240 3242 	movw	r2, #834	; 0x342
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <pbuf_ref+0x3c>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <pbuf_ref+0x40>)
 8007c9c:	f003 fb38 	bl	800b310 <iprintf>
  }
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0800c99c 	.word	0x0800c99c
 8007cac:	0800cb7c 	.word	0x0800cb7c
 8007cb0:	0800c9fc 	.word	0x0800c9fc

08007cb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <pbuf_cat+0x16>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <pbuf_cat+0x26>
 8007cca:	4b20      	ldr	r3, [pc, #128]	; (8007d4c <pbuf_cat+0x98>)
 8007ccc:	f240 3259 	movw	r2, #857	; 0x359
 8007cd0:	491f      	ldr	r1, [pc, #124]	; (8007d50 <pbuf_cat+0x9c>)
 8007cd2:	4820      	ldr	r0, [pc, #128]	; (8007d54 <pbuf_cat+0xa0>)
 8007cd4:	f003 fb1c 	bl	800b310 <iprintf>
 8007cd8:	e034      	b.n	8007d44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e00a      	b.n	8007cf6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	891a      	ldrh	r2, [r3, #8]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	891b      	ldrh	r3, [r3, #8]
 8007ce8:	4413      	add	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	891a      	ldrh	r2, [r3, #8]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	895b      	ldrh	r3, [r3, #10]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d006      	beq.n	8007d18 <pbuf_cat+0x64>
 8007d0a:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <pbuf_cat+0x98>)
 8007d0c:	f240 3262 	movw	r2, #866	; 0x362
 8007d10:	4911      	ldr	r1, [pc, #68]	; (8007d58 <pbuf_cat+0xa4>)
 8007d12:	4810      	ldr	r0, [pc, #64]	; (8007d54 <pbuf_cat+0xa0>)
 8007d14:	f003 fafc 	bl	800b310 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d006      	beq.n	8007d2e <pbuf_cat+0x7a>
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <pbuf_cat+0x98>)
 8007d22:	f240 3263 	movw	r2, #867	; 0x363
 8007d26:	490d      	ldr	r1, [pc, #52]	; (8007d5c <pbuf_cat+0xa8>)
 8007d28:	480a      	ldr	r0, [pc, #40]	; (8007d54 <pbuf_cat+0xa0>)
 8007d2a:	f003 faf1 	bl	800b310 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	891a      	ldrh	r2, [r3, #8]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	891b      	ldrh	r3, [r3, #8]
 8007d36:	4413      	add	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	0800c99c 	.word	0x0800c99c
 8007d50:	0800cb90 	.word	0x0800cb90
 8007d54:	0800c9fc 	.word	0x0800c9fc
 8007d58:	0800cbc8 	.word	0x0800cbc8
 8007d5c:	0800cbf8 	.word	0x0800cbf8

08007d60 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff ffa1 	bl	8007cb4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007d72:	6838      	ldr	r0, [r7, #0]
 8007d74:	f7ff ff7c 	bl	8007c70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d008      	beq.n	8007daa <pbuf_copy+0x2a>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <pbuf_copy+0x2a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	891a      	ldrh	r2, [r3, #8]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	891b      	ldrh	r3, [r3, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d209      	bcs.n	8007dbe <pbuf_copy+0x3e>
 8007daa:	4b57      	ldr	r3, [pc, #348]	; (8007f08 <pbuf_copy+0x188>)
 8007dac:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007db0:	4956      	ldr	r1, [pc, #344]	; (8007f0c <pbuf_copy+0x18c>)
 8007db2:	4857      	ldr	r0, [pc, #348]	; (8007f10 <pbuf_copy+0x190>)
 8007db4:	f003 faac 	bl	800b310 <iprintf>
 8007db8:	f06f 030f 	mvn.w	r3, #15
 8007dbc:	e09f      	b.n	8007efe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	895b      	ldrh	r3, [r3, #10]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	895b      	ldrh	r3, [r3, #10]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1acb      	subs	r3, r1, r3
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d306      	bcc.n	8007de4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	895b      	ldrh	r3, [r3, #10]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e005      	b.n	8007df0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	895b      	ldrh	r3, [r3, #10]
 8007de8:	461a      	mov	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	18d0      	adds	r0, r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4619      	mov	r1, r3
 8007e04:	f003 fa6e 	bl	800b2e4 <memcpy>
    offset_to += len;
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	895b      	ldrh	r3, [r3, #10]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d906      	bls.n	8007e32 <pbuf_copy+0xb2>
 8007e24:	4b38      	ldr	r3, [pc, #224]	; (8007f08 <pbuf_copy+0x188>)
 8007e26:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007e2a:	493a      	ldr	r1, [pc, #232]	; (8007f14 <pbuf_copy+0x194>)
 8007e2c:	4838      	ldr	r0, [pc, #224]	; (8007f10 <pbuf_copy+0x190>)
 8007e2e:	f003 fa6f 	bl	800b310 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	895b      	ldrh	r3, [r3, #10]
 8007e36:	461a      	mov	r2, r3
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d906      	bls.n	8007e4c <pbuf_copy+0xcc>
 8007e3e:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <pbuf_copy+0x188>)
 8007e40:	f240 32da 	movw	r2, #986	; 0x3da
 8007e44:	4934      	ldr	r1, [pc, #208]	; (8007f18 <pbuf_copy+0x198>)
 8007e46:	4832      	ldr	r0, [pc, #200]	; (8007f10 <pbuf_copy+0x190>)
 8007e48:	f003 fa62 	bl	800b310 <iprintf>
    if (offset_from >= p_from->len) {
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	895b      	ldrh	r3, [r3, #10]
 8007e50:	461a      	mov	r2, r3
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d304      	bcc.n	8007e62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	895b      	ldrh	r3, [r3, #10]
 8007e66:	461a      	mov	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d114      	bne.n	8007e98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <pbuf_copy+0x118>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <pbuf_copy+0x118>
 8007e84:	4b20      	ldr	r3, [pc, #128]	; (8007f08 <pbuf_copy+0x188>)
 8007e86:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007e8a:	4924      	ldr	r1, [pc, #144]	; (8007f1c <pbuf_copy+0x19c>)
 8007e8c:	4820      	ldr	r0, [pc, #128]	; (8007f10 <pbuf_copy+0x190>)
 8007e8e:	f003 fa3f 	bl	800b310 <iprintf>
 8007e92:	f06f 030f 	mvn.w	r3, #15
 8007e96:	e032      	b.n	8007efe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <pbuf_copy+0x146>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	895a      	ldrh	r2, [r3, #10]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	891b      	ldrh	r3, [r3, #8]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d10d      	bne.n	8007ec6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <pbuf_copy+0x146>
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <pbuf_copy+0x188>)
 8007eb4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007eb8:	4919      	ldr	r1, [pc, #100]	; (8007f20 <pbuf_copy+0x1a0>)
 8007eba:	4815      	ldr	r0, [pc, #84]	; (8007f10 <pbuf_copy+0x190>)
 8007ebc:	f003 fa28 	bl	800b310 <iprintf>
 8007ec0:	f06f 0305 	mvn.w	r3, #5
 8007ec4:	e01b      	b.n	8007efe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d013      	beq.n	8007ef4 <pbuf_copy+0x174>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	895a      	ldrh	r2, [r3, #10]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	891b      	ldrh	r3, [r3, #8]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d10d      	bne.n	8007ef4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <pbuf_copy+0x174>
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <pbuf_copy+0x188>)
 8007ee2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007ee6:	490e      	ldr	r1, [pc, #56]	; (8007f20 <pbuf_copy+0x1a0>)
 8007ee8:	4809      	ldr	r0, [pc, #36]	; (8007f10 <pbuf_copy+0x190>)
 8007eea:	f003 fa11 	bl	800b310 <iprintf>
 8007eee:	f06f 0305 	mvn.w	r3, #5
 8007ef2:	e004      	b.n	8007efe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f47f af61 	bne.w	8007dbe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	0800c99c 	.word	0x0800c99c
 8007f0c:	0800cc44 	.word	0x0800cc44
 8007f10:	0800c9fc 	.word	0x0800c9fc
 8007f14:	0800cc74 	.word	0x0800cc74
 8007f18:	0800cc8c 	.word	0x0800cc8c
 8007f1c:	0800cca8 	.word	0x0800cca8
 8007f20:	0800ccb8 	.word	0x0800ccb8

08007f24 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007f36:	2300      	movs	r3, #0
 8007f38:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <pbuf_take+0x30>
 8007f40:	4b3a      	ldr	r3, [pc, #232]	; (800802c <pbuf_take+0x108>)
 8007f42:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007f46:	493a      	ldr	r1, [pc, #232]	; (8008030 <pbuf_take+0x10c>)
 8007f48:	483a      	ldr	r0, [pc, #232]	; (8008034 <pbuf_take+0x110>)
 8007f4a:	f003 f9e1 	bl	800b310 <iprintf>
 8007f4e:	f06f 030f 	mvn.w	r3, #15
 8007f52:	e067      	b.n	8008024 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <pbuf_take+0x4a>
 8007f5a:	4b34      	ldr	r3, [pc, #208]	; (800802c <pbuf_take+0x108>)
 8007f5c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007f60:	4935      	ldr	r1, [pc, #212]	; (8008038 <pbuf_take+0x114>)
 8007f62:	4834      	ldr	r0, [pc, #208]	; (8008034 <pbuf_take+0x110>)
 8007f64:	f003 f9d4 	bl	800b310 <iprintf>
 8007f68:	f06f 030f 	mvn.w	r3, #15
 8007f6c:	e05a      	b.n	8008024 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	891b      	ldrh	r3, [r3, #8]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d909      	bls.n	8007f8c <pbuf_take+0x68>
 8007f78:	4b2c      	ldr	r3, [pc, #176]	; (800802c <pbuf_take+0x108>)
 8007f7a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007f7e:	492f      	ldr	r1, [pc, #188]	; (800803c <pbuf_take+0x118>)
 8007f80:	482c      	ldr	r0, [pc, #176]	; (8008034 <pbuf_take+0x110>)
 8007f82:	f003 f9c5 	bl	800b310 <iprintf>
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f8a:	e04b      	b.n	8008024 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <pbuf_take+0x7e>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <pbuf_take+0x7e>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	891b      	ldrh	r3, [r3, #8]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d902      	bls.n	8007fa8 <pbuf_take+0x84>
    return ERR_ARG;
 8007fa2:	f06f 030f 	mvn.w	r3, #15
 8007fa6:	e03d      	b.n	8008024 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	61fb      	str	r3, [r7, #28]
 8007fac:	e028      	b.n	8008000 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d106      	bne.n	8007fc2 <pbuf_take+0x9e>
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <pbuf_take+0x108>)
 8007fb6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007fba:	4921      	ldr	r1, [pc, #132]	; (8008040 <pbuf_take+0x11c>)
 8007fbc:	481d      	ldr	r0, [pc, #116]	; (8008034 <pbuf_take+0x110>)
 8007fbe:	f003 f9a7 	bl	800b310 <iprintf>
    buf_copy_len = total_copy_len;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	895b      	ldrh	r3, [r3, #10]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d902      	bls.n	8007fd8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	895b      	ldrh	r3, [r3, #10]
 8007fd6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	6858      	ldr	r0, [r3, #4]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f003 f97d 	bl	800b2e4 <memcpy>
    total_copy_len -= buf_copy_len;
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1d3      	bne.n	8007fae <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <pbuf_take+0xf0>
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	429a      	cmp	r2, r3
 8008012:	d006      	beq.n	8008022 <pbuf_take+0xfe>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <pbuf_take+0x108>)
 8008016:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800801a:	490a      	ldr	r1, [pc, #40]	; (8008044 <pbuf_take+0x120>)
 800801c:	4805      	ldr	r0, [pc, #20]	; (8008034 <pbuf_take+0x110>)
 800801e:	f003 f977 	bl	800b310 <iprintf>
  return ERR_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	0800c99c 	.word	0x0800c99c
 8008030:	0800cd74 	.word	0x0800cd74
 8008034:	0800c9fc 	.word	0x0800c9fc
 8008038:	0800cd8c 	.word	0x0800cd8c
 800803c:	0800cda8 	.word	0x0800cda8
 8008040:	0800cdc8 	.word	0x0800cdc8
 8008044:	0800cde0 	.word	0x0800cde0

08008048 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	603a      	str	r2, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
 8008054:	460b      	mov	r3, r1
 8008056:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	8919      	ldrh	r1, [r3, #8]
 800805c:	88ba      	ldrh	r2, [r7, #4]
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff fa83 	bl	800756c <pbuf_alloc>
 8008066:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <pbuf_clone+0x2a>
    return NULL;
 800806e:	2300      	movs	r3, #0
 8008070:	e011      	b.n	8008096 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7ff fe83 	bl	8007d80 <pbuf_copy>
 800807a:	4603      	mov	r3, r0
 800807c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800807e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d006      	beq.n	8008094 <pbuf_clone+0x4c>
 8008086:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <pbuf_clone+0x58>)
 8008088:	f240 5224 	movw	r2, #1316	; 0x524
 800808c:	4905      	ldr	r1, [pc, #20]	; (80080a4 <pbuf_clone+0x5c>)
 800808e:	4806      	ldr	r0, [pc, #24]	; (80080a8 <pbuf_clone+0x60>)
 8008090:	f003 f93e 	bl	800b310 <iprintf>
  return q;
 8008094:	68fb      	ldr	r3, [r7, #12]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800c99c 	.word	0x0800c99c
 80080a4:	0800ce10 	.word	0x0800ce10
 80080a8:	0800c9fc 	.word	0x0800c9fc

080080ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80080b8:	2003      	movs	r0, #3
 80080ba:	f7fe fe85 	bl	8006dc8 <memp_malloc>
 80080be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d109      	bne.n	80080da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d151      	bne.n	8008170 <sys_timeout_abs+0xc4>
 80080cc:	4b2a      	ldr	r3, [pc, #168]	; (8008178 <sys_timeout_abs+0xcc>)
 80080ce:	22be      	movs	r2, #190	; 0xbe
 80080d0:	492a      	ldr	r1, [pc, #168]	; (800817c <sys_timeout_abs+0xd0>)
 80080d2:	482b      	ldr	r0, [pc, #172]	; (8008180 <sys_timeout_abs+0xd4>)
 80080d4:	f003 f91c 	bl	800b310 <iprintf>
    return;
 80080d8:	e04a      	b.n	8008170 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80080f2:	4b24      	ldr	r3, [pc, #144]	; (8008184 <sys_timeout_abs+0xd8>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80080fa:	4a22      	ldr	r2, [pc, #136]	; (8008184 <sys_timeout_abs+0xd8>)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6013      	str	r3, [r2, #0]
    return;
 8008100:	e037      	b.n	8008172 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <sys_timeout_abs+0xd8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	0fdb      	lsrs	r3, r3, #31
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <sys_timeout_abs+0xd8>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8008122:	4a18      	ldr	r2, [pc, #96]	; (8008184 <sys_timeout_abs+0xd8>)
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e023      	b.n	8008172 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800812a:	4b16      	ldr	r3, [pc, #88]	; (8008184 <sys_timeout_abs+0xd8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	e01a      	b.n	8008168 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <sys_timeout_abs+0xa6>
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	0fdb      	lsrs	r3, r3, #31
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	601a      	str	r2, [r3, #0]
        break;
 8008160:	e007      	b.n	8008172 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e1      	bne.n	8008132 <sys_timeout_abs+0x86>
 800816e:	e000      	b.n	8008172 <sys_timeout_abs+0xc6>
    return;
 8008170:	bf00      	nop
      }
    }
  }
}
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	0800ce24 	.word	0x0800ce24
 800817c:	0800ce58 	.word	0x0800ce58
 8008180:	0800ce98 	.word	0x0800ce98
 8008184:	2000830c 	.word	0x2000830c

08008188 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4798      	blx	r3

  now = sys_now();
 800819a:	f7fd ffa5 	bl	80060e8 <sys_now>
 800819e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <lwip_cyclic_timer+0x5c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4413      	add	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	0fdb      	lsrs	r3, r3, #31
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	4413      	add	r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4907      	ldr	r1, [pc, #28]	; (80081e8 <lwip_cyclic_timer+0x60>)
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ff6e 	bl	80080ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80081d0:	e004      	b.n	80081dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4904      	ldr	r1, [pc, #16]	; (80081e8 <lwip_cyclic_timer+0x60>)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff ff68 	bl	80080ac <sys_timeout_abs>
}
 80081dc:	bf00      	nop
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20008310 	.word	0x20008310
 80081e8:	08008189 	.word	0x08008189

080081ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80081f2:	2300      	movs	r3, #0
 80081f4:	607b      	str	r3, [r7, #4]
 80081f6:	e00e      	b.n	8008216 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80081f8:	4a0b      	ldr	r2, [pc, #44]	; (8008228 <sys_timeouts_init+0x3c>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4a08      	ldr	r2, [pc, #32]	; (8008228 <sys_timeouts_init+0x3c>)
 8008206:	4413      	add	r3, r2
 8008208:	461a      	mov	r2, r3
 800820a:	4908      	ldr	r1, [pc, #32]	; (800822c <sys_timeouts_init+0x40>)
 800820c:	f000 f810 	bl	8008230 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d9ed      	bls.n	80081f8 <sys_timeouts_init+0xc>
  }
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	0800d9b8 	.word	0x0800d9b8
 800822c:	08008189 	.word	0x08008189

08008230 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008242:	d306      	bcc.n	8008252 <sys_timeout+0x22>
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <sys_timeout+0x40>)
 8008246:	f240 1229 	movw	r2, #297	; 0x129
 800824a:	490a      	ldr	r1, [pc, #40]	; (8008274 <sys_timeout+0x44>)
 800824c:	480a      	ldr	r0, [pc, #40]	; (8008278 <sys_timeout+0x48>)
 800824e:	f003 f85f 	bl	800b310 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8008252:	f7fd ff49 	bl	80060e8 <sys_now>
 8008256:	4602      	mov	r2, r0
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	6978      	ldr	r0, [r7, #20]
 8008264:	f7ff ff22 	bl	80080ac <sys_timeout_abs>
#endif
}
 8008268:	bf00      	nop
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	0800ce24 	.word	0x0800ce24
 8008274:	0800cec0 	.word	0x0800cec0
 8008278:	0800ce98 	.word	0x0800ce98

0800827c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8008282:	f7fd ff31 	bl	80060e8 <sys_now>
 8008286:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8008288:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <sys_check_timeouts+0x6c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d022      	beq.n	80082da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	0fdb      	lsrs	r3, r3, #31
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d11a      	bne.n	80082de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <sys_check_timeouts+0x6c>)
 80082ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a0a      	ldr	r2, [pc, #40]	; (80082ec <sys_check_timeouts+0x70>)
 80082c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	2003      	movs	r0, #3
 80082c8:	f7fe fdee 	bl	8006ea8 <memp_free>
    if (handler != NULL) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0da      	beq.n	8008288 <sys_check_timeouts+0xc>
      handler(arg);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6838      	ldr	r0, [r7, #0]
 80082d6:	4798      	blx	r3
  do {
 80082d8:	e7d6      	b.n	8008288 <sys_check_timeouts+0xc>
      return;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <sys_check_timeouts+0x64>
      return;
 80082de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	2000830c 	.word	0x2000830c
 80082ec:	20008310 	.word	0x20008310

080082f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80082f4:	f003 f824 	bl	800b340 <rand>
 80082f8:	4603      	mov	r3, r0
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008300:	b29b      	uxth	r3, r3
 8008302:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008306:	b29a      	uxth	r2, r3
 8008308:	4b01      	ldr	r3, [pc, #4]	; (8008310 <udp_init+0x20>)
 800830a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800830c:	bf00      	nop
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20000020 	.word	0x20000020

08008314 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800831e:	4b17      	ldr	r3, [pc, #92]	; (800837c <udp_new_port+0x68>)
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	b291      	uxth	r1, r2
 8008326:	4a15      	ldr	r2, [pc, #84]	; (800837c <udp_new_port+0x68>)
 8008328:	8011      	strh	r1, [r2, #0]
 800832a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800832e:	4293      	cmp	r3, r2
 8008330:	d103      	bne.n	800833a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008332:	4b12      	ldr	r3, [pc, #72]	; (800837c <udp_new_port+0x68>)
 8008334:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008338:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800833a:	4b11      	ldr	r3, [pc, #68]	; (8008380 <udp_new_port+0x6c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	e011      	b.n	8008366 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	8a5a      	ldrh	r2, [r3, #18]
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <udp_new_port+0x68>)
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d108      	bne.n	8008360 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	3301      	adds	r3, #1
 8008352:	80fb      	strh	r3, [r7, #6]
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800835a:	d3e0      	bcc.n	800831e <udp_new_port+0xa>
        return 0;
 800835c:	2300      	movs	r3, #0
 800835e:	e007      	b.n	8008370 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	603b      	str	r3, [r7, #0]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1ea      	bne.n	8008342 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800836c:	4b03      	ldr	r3, [pc, #12]	; (800837c <udp_new_port+0x68>)
 800836e:	881b      	ldrh	r3, [r3, #0]
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	20000020 	.word	0x20000020
 8008380:	20008314 	.word	0x20008314

08008384 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d105      	bne.n	80083a4 <udp_input_local_match+0x20>
 8008398:	4b27      	ldr	r3, [pc, #156]	; (8008438 <udp_input_local_match+0xb4>)
 800839a:	2287      	movs	r2, #135	; 0x87
 800839c:	4927      	ldr	r1, [pc, #156]	; (800843c <udp_input_local_match+0xb8>)
 800839e:	4828      	ldr	r0, [pc, #160]	; (8008440 <udp_input_local_match+0xbc>)
 80083a0:	f002 ffb6 	bl	800b310 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <udp_input_local_match+0x32>
 80083aa:	4b23      	ldr	r3, [pc, #140]	; (8008438 <udp_input_local_match+0xb4>)
 80083ac:	2288      	movs	r2, #136	; 0x88
 80083ae:	4925      	ldr	r1, [pc, #148]	; (8008444 <udp_input_local_match+0xc0>)
 80083b0:	4823      	ldr	r0, [pc, #140]	; (8008440 <udp_input_local_match+0xbc>)
 80083b2:	f002 ffad 	bl	800b310 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	7a1b      	ldrb	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	7a1a      	ldrb	r2, [r3, #8]
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <udp_input_local_match+0xc4>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083ca:	3301      	adds	r3, #1
 80083cc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d001      	beq.n	80083d6 <udp_input_local_match+0x52>
    return 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e02b      	b.n	800842e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d018      	beq.n	800840e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d013      	beq.n	800840a <udp_input_local_match+0x86>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00f      	beq.n	800840a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80083ea:	4b17      	ldr	r3, [pc, #92]	; (8008448 <udp_input_local_match+0xc4>)
 80083ec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f2:	d00a      	beq.n	800840a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b13      	ldr	r3, [pc, #76]	; (8008448 <udp_input_local_match+0xc4>)
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	405a      	eors	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3308      	adds	r3, #8
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008406:	2b00      	cmp	r3, #0
 8008408:	d110      	bne.n	800842c <udp_input_local_match+0xa8>
          return 1;
 800840a:	2301      	movs	r3, #1
 800840c:	e00f      	b.n	800842e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d009      	beq.n	8008428 <udp_input_local_match+0xa4>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <udp_input_local_match+0xa4>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <udp_input_local_match+0xc4>)
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	429a      	cmp	r2, r3
 8008426:	d101      	bne.n	800842c <udp_input_local_match+0xa8>
        return 1;
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	0800cf0c 	.word	0x0800cf0c
 800843c:	0800cf3c 	.word	0x0800cf3c
 8008440:	0800cf60 	.word	0x0800cf60
 8008444:	0800cf88 	.word	0x0800cf88
 8008448:	200052b0 	.word	0x200052b0

0800844c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b08d      	sub	sp, #52	; 0x34
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <udp_input+0x20>
 8008460:	4b7c      	ldr	r3, [pc, #496]	; (8008654 <udp_input+0x208>)
 8008462:	22cf      	movs	r2, #207	; 0xcf
 8008464:	497c      	ldr	r1, [pc, #496]	; (8008658 <udp_input+0x20c>)
 8008466:	487d      	ldr	r0, [pc, #500]	; (800865c <udp_input+0x210>)
 8008468:	f002 ff52 	bl	800b310 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d105      	bne.n	800847e <udp_input+0x32>
 8008472:	4b78      	ldr	r3, [pc, #480]	; (8008654 <udp_input+0x208>)
 8008474:	22d0      	movs	r2, #208	; 0xd0
 8008476:	497a      	ldr	r1, [pc, #488]	; (8008660 <udp_input+0x214>)
 8008478:	4878      	ldr	r0, [pc, #480]	; (800865c <udp_input+0x210>)
 800847a:	f002 ff49 	bl	800b310 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	895b      	ldrh	r3, [r3, #10]
 8008482:	2b07      	cmp	r3, #7
 8008484:	d803      	bhi.n	800848e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff fb52 	bl	8007b30 <pbuf_free>
    goto end;
 800848c:	e0de      	b.n	800864c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008494:	4b73      	ldr	r3, [pc, #460]	; (8008664 <udp_input+0x218>)
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	4a72      	ldr	r2, [pc, #456]	; (8008664 <udp_input+0x218>)
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 ff96 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 80084a4:	4603      	mov	r3, r0
 80084a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe f82e 	bl	8006510 <lwip_htons>
 80084b4:	4603      	mov	r3, r0
 80084b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe f826 	bl	8006510 <lwip_htons>
 80084c4:	4603      	mov	r3, r0
 80084c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80084d4:	4b64      	ldr	r3, [pc, #400]	; (8008668 <udp_input+0x21c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
 80084da:	e054      	b.n	8008586 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	8a5b      	ldrh	r3, [r3, #18]
 80084e0:	89fa      	ldrh	r2, [r7, #14]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d14a      	bne.n	800857c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80084e6:	7cfb      	ldrb	r3, [r7, #19]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ee:	f7ff ff49 	bl	8008384 <udp_input_local_match>
 80084f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d041      	beq.n	800857c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	7c1b      	ldrb	r3, [r3, #16]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11d      	bne.n	8008540 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d102      	bne.n	8008510 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	61fb      	str	r3, [r7, #28]
 800850e:	e017      	b.n	8008540 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008510:	7cfb      	ldrb	r3, [r7, #19]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d014      	beq.n	8008540 <udp_input+0xf4>
 8008516:	4b53      	ldr	r3, [pc, #332]	; (8008664 <udp_input+0x218>)
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851e:	d10f      	bne.n	8008540 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	3304      	adds	r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d008      	beq.n	8008540 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	3304      	adds	r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d101      	bne.n	8008540 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	8a9b      	ldrh	r3, [r3, #20]
 8008544:	8a3a      	ldrh	r2, [r7, #16]
 8008546:	429a      	cmp	r2, r3
 8008548:	d118      	bne.n	800857c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4b43      	ldr	r3, [pc, #268]	; (8008664 <udp_input+0x218>)
 8008558:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800855a:	429a      	cmp	r2, r3
 800855c:	d10e      	bne.n	800857c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d014      	beq.n	800858e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800856c:	4b3e      	ldr	r3, [pc, #248]	; (8008668 <udp_input+0x21c>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008574:	4a3c      	ldr	r2, [pc, #240]	; (8008668 <udp_input+0x21c>)
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800857a:	e008      	b.n	800858e <udp_input+0x142>
      }
    }

    prev = pcb;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1a7      	bne.n	80084dc <udp_input+0x90>
 800858c:	e000      	b.n	8008590 <udp_input+0x144>
        break;
 800858e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <udp_input+0x14e>
    pcb = uncon_pcb;
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <udp_input+0x15a>
    for_us = 1;
 80085a0:	2301      	movs	r3, #1
 80085a2:	76fb      	strb	r3, [r7, #27]
 80085a4:	e00a      	b.n	80085bc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	3304      	adds	r3, #4
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <udp_input+0x218>)
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	bf0c      	ite	eq
 80085b4:	2301      	moveq	r3, #1
 80085b6:	2300      	movne	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80085bc:	7efb      	ldrb	r3, [r7, #27]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d041      	beq.n	8008646 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80085c2:	2108      	movs	r1, #8
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff fa2d 	bl	8007a24 <pbuf_remove_header>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80085d0:	4b20      	ldr	r3, [pc, #128]	; (8008654 <udp_input+0x208>)
 80085d2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80085d6:	4925      	ldr	r1, [pc, #148]	; (800866c <udp_input+0x220>)
 80085d8:	4820      	ldr	r0, [pc, #128]	; (800865c <udp_input+0x210>)
 80085da:	f002 fe99 	bl	800b310 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff faa6 	bl	8007b30 <pbuf_free>
      goto end;
 80085e4:	e032      	b.n	800864c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d012      	beq.n	8008612 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	699c      	ldr	r4, [r3, #24]
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	69d8      	ldr	r0, [r3, #28]
 80085fc:	8a3b      	ldrh	r3, [r7, #16]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <udp_input+0x224>)
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008606:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8008608:	e021      	b.n	800864e <udp_input+0x202>
        pbuf_free(p);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fa90 	bl	8007b30 <pbuf_free>
        goto end;
 8008610:	e01c      	b.n	800864c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008612:	7cfb      	ldrb	r3, [r7, #19]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d112      	bne.n	800863e <udp_input+0x1f2>
 8008618:	4b12      	ldr	r3, [pc, #72]	; (8008664 <udp_input+0x218>)
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008620:	2be0      	cmp	r3, #224	; 0xe0
 8008622:	d00c      	beq.n	800863e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <udp_input+0x218>)
 8008626:	899b      	ldrh	r3, [r3, #12]
 8008628:	3308      	adds	r3, #8
 800862a:	b29b      	uxth	r3, r3
 800862c:	b21b      	sxth	r3, r3
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff fa6a 	bl	8007b0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008636:	2103      	movs	r1, #3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fbb3 	bl	8009da4 <icmp_dest_unreach>
      pbuf_free(p);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fa76 	bl	8007b30 <pbuf_free>
  return;
 8008644:	e003      	b.n	800864e <udp_input+0x202>
    pbuf_free(p);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff fa72 	bl	8007b30 <pbuf_free>
  return;
 800864c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800864e:	372c      	adds	r7, #44	; 0x2c
 8008650:	46bd      	mov	sp, r7
 8008652:	bd90      	pop	{r4, r7, pc}
 8008654:	0800cf0c 	.word	0x0800cf0c
 8008658:	0800cfb0 	.word	0x0800cfb0
 800865c:	0800cf60 	.word	0x0800cf60
 8008660:	0800cfc8 	.word	0x0800cfc8
 8008664:	200052b0 	.word	0x200052b0
 8008668:	20008314 	.word	0x20008314
 800866c:	0800cfe4 	.word	0x0800cfe4
 8008670:	200052c0 	.word	0x200052c0

08008674 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d109      	bne.n	8008698 <udp_send+0x24>
 8008684:	4b11      	ldr	r3, [pc, #68]	; (80086cc <udp_send+0x58>)
 8008686:	f240 12d5 	movw	r2, #469	; 0x1d5
 800868a:	4911      	ldr	r1, [pc, #68]	; (80086d0 <udp_send+0x5c>)
 800868c:	4811      	ldr	r0, [pc, #68]	; (80086d4 <udp_send+0x60>)
 800868e:	f002 fe3f 	bl	800b310 <iprintf>
 8008692:	f06f 030f 	mvn.w	r3, #15
 8008696:	e015      	b.n	80086c4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <udp_send+0x3e>
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <udp_send+0x58>)
 80086a0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80086a4:	490c      	ldr	r1, [pc, #48]	; (80086d8 <udp_send+0x64>)
 80086a6:	480b      	ldr	r0, [pc, #44]	; (80086d4 <udp_send+0x60>)
 80086a8:	f002 fe32 	bl	800b310 <iprintf>
 80086ac:	f06f 030f 	mvn.w	r3, #15
 80086b0:	e008      	b.n	80086c4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	8a9b      	ldrh	r3, [r3, #20]
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f80d 	bl	80086dc <udp_sendto>
 80086c2:	4603      	mov	r3, r0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	0800cf0c 	.word	0x0800cf0c
 80086d0:	0800d000 	.word	0x0800d000
 80086d4:	0800cf60 	.word	0x0800cf60
 80086d8:	0800d018 	.word	0x0800d018

080086dc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <udp_sendto+0x28>
 80086f0:	4b23      	ldr	r3, [pc, #140]	; (8008780 <udp_sendto+0xa4>)
 80086f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80086f6:	4923      	ldr	r1, [pc, #140]	; (8008784 <udp_sendto+0xa8>)
 80086f8:	4823      	ldr	r0, [pc, #140]	; (8008788 <udp_sendto+0xac>)
 80086fa:	f002 fe09 	bl	800b310 <iprintf>
 80086fe:	f06f 030f 	mvn.w	r3, #15
 8008702:	e038      	b.n	8008776 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <udp_sendto+0x42>
 800870a:	4b1d      	ldr	r3, [pc, #116]	; (8008780 <udp_sendto+0xa4>)
 800870c:	f240 2219 	movw	r2, #537	; 0x219
 8008710:	491e      	ldr	r1, [pc, #120]	; (800878c <udp_sendto+0xb0>)
 8008712:	481d      	ldr	r0, [pc, #116]	; (8008788 <udp_sendto+0xac>)
 8008714:	f002 fdfc 	bl	800b310 <iprintf>
 8008718:	f06f 030f 	mvn.w	r3, #15
 800871c:	e02b      	b.n	8008776 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d109      	bne.n	8008738 <udp_sendto+0x5c>
 8008724:	4b16      	ldr	r3, [pc, #88]	; (8008780 <udp_sendto+0xa4>)
 8008726:	f240 221a 	movw	r2, #538	; 0x21a
 800872a:	4919      	ldr	r1, [pc, #100]	; (8008790 <udp_sendto+0xb4>)
 800872c:	4816      	ldr	r0, [pc, #88]	; (8008788 <udp_sendto+0xac>)
 800872e:	f002 fdef 	bl	800b310 <iprintf>
 8008732:	f06f 030f 	mvn.w	r3, #15
 8008736:	e01e      	b.n	8008776 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	7a1b      	ldrb	r3, [r3, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7a1b      	ldrb	r3, [r3, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe fec1 	bl	80074cc <netif_get_by_index>
 800874a:	6178      	str	r0, [r7, #20]
 800874c:	e003      	b.n	8008756 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fbb2 	bl	8009eb8 <ip4_route>
 8008754:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800875c:	f06f 0303 	mvn.w	r3, #3
 8008760:	e009      	b.n	8008776 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8008762:	887a      	ldrh	r2, [r7, #2]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f810 	bl	8008794 <udp_sendto_if>
 8008774:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	0800cf0c 	.word	0x0800cf0c
 8008784:	0800d030 	.word	0x0800d030
 8008788:	0800cf60 	.word	0x0800cf60
 800878c:	0800d048 	.word	0x0800d048
 8008790:	0800d064 	.word	0x0800d064

08008794 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af02      	add	r7, sp, #8
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <udp_sendto_if+0x28>
 80087a8:	4b2e      	ldr	r3, [pc, #184]	; (8008864 <udp_sendto_if+0xd0>)
 80087aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80087ae:	492e      	ldr	r1, [pc, #184]	; (8008868 <udp_sendto_if+0xd4>)
 80087b0:	482e      	ldr	r0, [pc, #184]	; (800886c <udp_sendto_if+0xd8>)
 80087b2:	f002 fdad 	bl	800b310 <iprintf>
 80087b6:	f06f 030f 	mvn.w	r3, #15
 80087ba:	e04f      	b.n	800885c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <udp_sendto_if+0x42>
 80087c2:	4b28      	ldr	r3, [pc, #160]	; (8008864 <udp_sendto_if+0xd0>)
 80087c4:	f240 2281 	movw	r2, #641	; 0x281
 80087c8:	4929      	ldr	r1, [pc, #164]	; (8008870 <udp_sendto_if+0xdc>)
 80087ca:	4828      	ldr	r0, [pc, #160]	; (800886c <udp_sendto_if+0xd8>)
 80087cc:	f002 fda0 	bl	800b310 <iprintf>
 80087d0:	f06f 030f 	mvn.w	r3, #15
 80087d4:	e042      	b.n	800885c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d109      	bne.n	80087f0 <udp_sendto_if+0x5c>
 80087dc:	4b21      	ldr	r3, [pc, #132]	; (8008864 <udp_sendto_if+0xd0>)
 80087de:	f240 2282 	movw	r2, #642	; 0x282
 80087e2:	4924      	ldr	r1, [pc, #144]	; (8008874 <udp_sendto_if+0xe0>)
 80087e4:	4821      	ldr	r0, [pc, #132]	; (800886c <udp_sendto_if+0xd8>)
 80087e6:	f002 fd93 	bl	800b310 <iprintf>
 80087ea:	f06f 030f 	mvn.w	r3, #15
 80087ee:	e035      	b.n	800885c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <udp_sendto_if+0x76>
 80087f6:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <udp_sendto_if+0xd0>)
 80087f8:	f240 2283 	movw	r2, #643	; 0x283
 80087fc:	491e      	ldr	r1, [pc, #120]	; (8008878 <udp_sendto_if+0xe4>)
 80087fe:	481b      	ldr	r0, [pc, #108]	; (800886c <udp_sendto_if+0xd8>)
 8008800:	f002 fd86 	bl	800b310 <iprintf>
 8008804:	f06f 030f 	mvn.w	r3, #15
 8008808:	e028      	b.n	800885c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <udp_sendto_if+0x90>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008820:	2be0      	cmp	r3, #224	; 0xe0
 8008822:	d103      	bne.n	800882c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	3304      	adds	r3, #4
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e00b      	b.n	8008844 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	3304      	adds	r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d002      	beq.n	8008840 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800883a:	f06f 0303 	mvn.w	r3, #3
 800883e:	e00d      	b.n	800885c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008844:	887a      	ldrh	r2, [r7, #2]
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	4613      	mov	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 f811 	bl	800887c <udp_sendto_if_src>
 800885a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	0800cf0c 	.word	0x0800cf0c
 8008868:	0800d080 	.word	0x0800d080
 800886c:	0800cf60 	.word	0x0800cf60
 8008870:	0800d09c 	.word	0x0800d09c
 8008874:	0800d0b8 	.word	0x0800d0b8
 8008878:	0800d0d8 	.word	0x0800d0d8

0800887c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08c      	sub	sp, #48	; 0x30
 8008880:	af04      	add	r7, sp, #16
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <udp_sendto_if_src+0x28>
 8008890:	4b65      	ldr	r3, [pc, #404]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 8008892:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008896:	4965      	ldr	r1, [pc, #404]	; (8008a2c <udp_sendto_if_src+0x1b0>)
 8008898:	4865      	ldr	r0, [pc, #404]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 800889a:	f002 fd39 	bl	800b310 <iprintf>
 800889e:	f06f 030f 	mvn.w	r3, #15
 80088a2:	e0bc      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <udp_sendto_if_src+0x42>
 80088aa:	4b5f      	ldr	r3, [pc, #380]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 80088ac:	f240 22d2 	movw	r2, #722	; 0x2d2
 80088b0:	4960      	ldr	r1, [pc, #384]	; (8008a34 <udp_sendto_if_src+0x1b8>)
 80088b2:	485f      	ldr	r0, [pc, #380]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 80088b4:	f002 fd2c 	bl	800b310 <iprintf>
 80088b8:	f06f 030f 	mvn.w	r3, #15
 80088bc:	e0af      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <udp_sendto_if_src+0x5c>
 80088c4:	4b58      	ldr	r3, [pc, #352]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 80088c6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80088ca:	495b      	ldr	r1, [pc, #364]	; (8008a38 <udp_sendto_if_src+0x1bc>)
 80088cc:	4858      	ldr	r0, [pc, #352]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 80088ce:	f002 fd1f 	bl	800b310 <iprintf>
 80088d2:	f06f 030f 	mvn.w	r3, #15
 80088d6:	e0a2      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <udp_sendto_if_src+0x76>
 80088de:	4b52      	ldr	r3, [pc, #328]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 80088e0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80088e4:	4955      	ldr	r1, [pc, #340]	; (8008a3c <udp_sendto_if_src+0x1c0>)
 80088e6:	4852      	ldr	r0, [pc, #328]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 80088e8:	f002 fd12 	bl	800b310 <iprintf>
 80088ec:	f06f 030f 	mvn.w	r3, #15
 80088f0:	e095      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d109      	bne.n	800890c <udp_sendto_if_src+0x90>
 80088f8:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 80088fa:	f240 22d5 	movw	r2, #725	; 0x2d5
 80088fe:	4950      	ldr	r1, [pc, #320]	; (8008a40 <udp_sendto_if_src+0x1c4>)
 8008900:	484b      	ldr	r0, [pc, #300]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 8008902:	f002 fd05 	bl	800b310 <iprintf>
 8008906:	f06f 030f 	mvn.w	r3, #15
 800890a:	e088      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8a5b      	ldrh	r3, [r3, #18]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10f      	bne.n	8008934 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8a5b      	ldrh	r3, [r3, #18]
 800891a:	461a      	mov	r2, r3
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f893 	bl	8008a48 <udp_bind>
 8008922:	4603      	mov	r3, r0
 8008924:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8008926:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800892e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008932:	e074      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	891b      	ldrh	r3, [r3, #8]
 8008938:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800893c:	4293      	cmp	r3, r2
 800893e:	d902      	bls.n	8008946 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8008940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008944:	e06b      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8008946:	2108      	movs	r1, #8
 8008948:	68b8      	ldr	r0, [r7, #8]
 800894a:	f7ff f85b 	bl	8007a04 <pbuf_add_header>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d015      	beq.n	8008980 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8008954:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008958:	2108      	movs	r1, #8
 800895a:	2022      	movs	r0, #34	; 0x22
 800895c:	f7fe fe06 	bl	800756c <pbuf_alloc>
 8008960:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8008968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800896c:	e057      	b.n	8008a1e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	891b      	ldrh	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	69f8      	ldr	r0, [r7, #28]
 800897a:	f7ff f9f1 	bl	8007d60 <pbuf_chain>
 800897e:	e001      	b.n	8008984 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	895b      	ldrh	r3, [r3, #10]
 8008988:	2b07      	cmp	r3, #7
 800898a:	d806      	bhi.n	800899a <udp_sendto_if_src+0x11e>
 800898c:	4b26      	ldr	r3, [pc, #152]	; (8008a28 <udp_sendto_if_src+0x1ac>)
 800898e:	f240 320d 	movw	r2, #781	; 0x30d
 8008992:	492c      	ldr	r1, [pc, #176]	; (8008a44 <udp_sendto_if_src+0x1c8>)
 8008994:	4826      	ldr	r0, [pc, #152]	; (8008a30 <udp_sendto_if_src+0x1b4>)
 8008996:	f002 fcbb 	bl	800b310 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8a5b      	ldrh	r3, [r3, #18]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd fdb3 	bl	8006510 <lwip_htons>
 80089aa:	4603      	mov	r3, r0
 80089ac:	461a      	mov	r2, r3
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fd fdab 	bl	8006510 <lwip_htons>
 80089ba:	4603      	mov	r3, r0
 80089bc:	461a      	mov	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2200      	movs	r2, #0
 80089c6:	719a      	strb	r2, [r3, #6]
 80089c8:	2200      	movs	r2, #0
 80089ca:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	891b      	ldrh	r3, [r3, #8]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fd fd9d 	bl	8006510 <lwip_htons>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80089de:	2311      	movs	r3, #17
 80089e0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	7adb      	ldrb	r3, [r3, #11]
 80089e6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	7a9b      	ldrb	r3, [r3, #10]
 80089ec:	7cb9      	ldrb	r1, [r7, #18]
 80089ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f0:	9202      	str	r2, [sp, #8]
 80089f2:	7cfa      	ldrb	r2, [r7, #19]
 80089f4:	9201      	str	r2, [sp, #4]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	460b      	mov	r3, r1
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fe:	69f8      	ldr	r0, [r7, #28]
 8008a00:	f001 fc38 	bl	800a274 <ip4_output_if_src>
 8008a04:	4603      	mov	r3, r0
 8008a06:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d004      	beq.n	8008a1a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8008a10:	69f8      	ldr	r0, [r7, #28]
 8008a12:	f7ff f88d 	bl	8007b30 <pbuf_free>
    q = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8008a1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3720      	adds	r7, #32
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	0800cf0c 	.word	0x0800cf0c
 8008a2c:	0800d0f8 	.word	0x0800d0f8
 8008a30:	0800cf60 	.word	0x0800cf60
 8008a34:	0800d118 	.word	0x0800d118
 8008a38:	0800d138 	.word	0x0800d138
 8008a3c:	0800d15c 	.word	0x0800d15c
 8008a40:	0800d180 	.word	0x0800d180
 8008a44:	0800d1a4 	.word	0x0800d1a4

08008a48 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8008a5c:	4b39      	ldr	r3, [pc, #228]	; (8008b44 <udp_bind+0xfc>)
 8008a5e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d109      	bne.n	8008a7a <udp_bind+0x32>
 8008a66:	4b38      	ldr	r3, [pc, #224]	; (8008b48 <udp_bind+0x100>)
 8008a68:	f240 32b7 	movw	r2, #951	; 0x3b7
 8008a6c:	4937      	ldr	r1, [pc, #220]	; (8008b4c <udp_bind+0x104>)
 8008a6e:	4838      	ldr	r0, [pc, #224]	; (8008b50 <udp_bind+0x108>)
 8008a70:	f002 fc4e 	bl	800b310 <iprintf>
 8008a74:	f06f 030f 	mvn.w	r3, #15
 8008a78:	e060      	b.n	8008b3c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008a7e:	4b35      	ldr	r3, [pc, #212]	; (8008b54 <udp_bind+0x10c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e009      	b.n	8008a9a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d102      	bne.n	8008a94 <udp_bind+0x4c>
      rebind = 1;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	74fb      	strb	r3, [r7, #19]
      break;
 8008a92:	e005      	b.n	8008aa0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1f2      	bne.n	8008a86 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d109      	bne.n	8008aba <udp_bind+0x72>
    port = udp_new_port();
 8008aa6:	f7ff fc35 	bl	8008314 <udp_new_port>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d12c      	bne.n	8008b0e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8008ab4:	f06f 0307 	mvn.w	r3, #7
 8008ab8:	e040      	b.n	8008b3c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008aba:	4b26      	ldr	r3, [pc, #152]	; (8008b54 <udp_bind+0x10c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e022      	b.n	8008b08 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d01b      	beq.n	8008b02 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	8a5b      	ldrh	r3, [r3, #18]
 8008ace:	88fa      	ldrh	r2, [r7, #6]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d116      	bne.n	8008b02 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d00d      	beq.n	8008afc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <udp_bind+0xb4>
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d006      	beq.n	8008afc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008aee:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d102      	bne.n	8008b02 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8008afc:	f06f 0307 	mvn.w	r3, #7
 8008b00:	e01c      	b.n	8008b3c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1d9      	bne.n	8008ac2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <udp_bind+0xd2>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	e000      	b.n	8008b1c <udp_bind+0xd4>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8008b26:	7cfb      	ldrb	r3, [r7, #19]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d106      	bne.n	8008b3a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <udp_bind+0x10c>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8008b34:	4a07      	ldr	r2, [pc, #28]	; (8008b54 <udp_bind+0x10c>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	0800d9c8 	.word	0x0800d9c8
 8008b48:	0800cf0c 	.word	0x0800cf0c
 8008b4c:	0800d1d4 	.word	0x0800d1d4
 8008b50:	0800cf60 	.word	0x0800cf60
 8008b54:	20008314 	.word	0x20008314

08008b58 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <udp_connect+0x28>
 8008b6c:	4b2c      	ldr	r3, [pc, #176]	; (8008c20 <udp_connect+0xc8>)
 8008b6e:	f240 4235 	movw	r2, #1077	; 0x435
 8008b72:	492c      	ldr	r1, [pc, #176]	; (8008c24 <udp_connect+0xcc>)
 8008b74:	482c      	ldr	r0, [pc, #176]	; (8008c28 <udp_connect+0xd0>)
 8008b76:	f002 fbcb 	bl	800b310 <iprintf>
 8008b7a:	f06f 030f 	mvn.w	r3, #15
 8008b7e:	e04b      	b.n	8008c18 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <udp_connect+0x42>
 8008b86:	4b26      	ldr	r3, [pc, #152]	; (8008c20 <udp_connect+0xc8>)
 8008b88:	f240 4236 	movw	r2, #1078	; 0x436
 8008b8c:	4927      	ldr	r1, [pc, #156]	; (8008c2c <udp_connect+0xd4>)
 8008b8e:	4826      	ldr	r0, [pc, #152]	; (8008c28 <udp_connect+0xd0>)
 8008b90:	f002 fbbe 	bl	800b310 <iprintf>
 8008b94:	f06f 030f 	mvn.w	r3, #15
 8008b98:	e03e      	b.n	8008c18 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8a5b      	ldrh	r3, [r3, #18]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10f      	bne.n	8008bc2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008ba2:	68f9      	ldr	r1, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8a5b      	ldrh	r3, [r3, #18]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f7ff ff4c 	bl	8008a48 <udp_bind>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <udp_connect+0x6a>
      return err;
 8008bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008bc0:	e02a      	b.n	8008c18 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <udp_connect+0x76>
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	e000      	b.n	8008bd0 <udp_connect+0x78>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	7c1b      	ldrb	r3, [r3, #16]
 8008bde:	f043 0304 	orr.w	r3, r3, #4
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008be8:	4b11      	ldr	r3, [pc, #68]	; (8008c30 <udp_connect+0xd8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	e008      	b.n	8008c02 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d101      	bne.n	8008bfc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e00d      	b.n	8008c18 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1f3      	bne.n	8008bf0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8008c08:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <udp_connect+0xd8>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8008c10:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <udp_connect+0xd8>)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	0800cf0c 	.word	0x0800cf0c
 8008c24:	0800d1ec 	.word	0x0800d1ec
 8008c28:	0800cf60 	.word	0x0800cf60
 8008c2c:	0800d208 	.word	0x0800d208
 8008c30:	20008314 	.word	0x20008314

08008c34 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d107      	bne.n	8008c56 <udp_recv+0x22>
 8008c46:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <udp_recv+0x34>)
 8008c48:	f240 428a 	movw	r2, #1162	; 0x48a
 8008c4c:	4907      	ldr	r1, [pc, #28]	; (8008c6c <udp_recv+0x38>)
 8008c4e:	4808      	ldr	r0, [pc, #32]	; (8008c70 <udp_recv+0x3c>)
 8008c50:	f002 fb5e 	bl	800b310 <iprintf>
 8008c54:	e005      	b.n	8008c62 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	61da      	str	r2, [r3, #28]
}
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	0800cf0c 	.word	0x0800cf0c
 8008c6c:	0800d240 	.word	0x0800d240
 8008c70:	0800cf60 	.word	0x0800cf60

08008c74 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f7fe f8a4 	bl	8006dc8 <memp_malloc>
 8008c80:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8008c88:	2220      	movs	r2, #32
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f002 fb37 	bl	800b300 <memset>
    pcb->ttl = UDP_TTL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8008c98:	687b      	ldr	r3, [r7, #4]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01e      	beq.n	8008cf2 <udp_netif_ip_addr_changed+0x4e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01a      	beq.n	8008cf2 <udp_netif_ip_addr_changed+0x4e>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d017      	beq.n	8008cf2 <udp_netif_ip_addr_changed+0x4e>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d013      	beq.n	8008cf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <udp_netif_ip_addr_changed+0x5c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	e00c      	b.n	8008cec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d103      	bne.n	8008ce6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ef      	bne.n	8008cd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20008314 	.word	0x20008314

08008d04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008d0c:	4915      	ldr	r1, [pc, #84]	; (8008d64 <etharp_free_entry+0x60>)
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	4413      	add	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	440b      	add	r3, r1
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d013      	beq.n	8008d48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008d20:	4910      	ldr	r1, [pc, #64]	; (8008d64 <etharp_free_entry+0x60>)
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	4413      	add	r3, r2
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	440b      	add	r3, r1
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fefd 	bl	8007b30 <pbuf_free>
    arp_table[i].q = NULL;
 8008d36:	490b      	ldr	r1, [pc, #44]	; (8008d64 <etharp_free_entry+0x60>)
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	440b      	add	r3, r1
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008d48:	4906      	ldr	r1, [pc, #24]	; (8008d64 <etharp_free_entry+0x60>)
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	4413      	add	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	440b      	add	r3, r1
 8008d56:	3314      	adds	r3, #20
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20008318 	.word	0x20008318

08008d68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d6e:	2300      	movs	r3, #0
 8008d70:	607b      	str	r3, [r7, #4]
 8008d72:	e096      	b.n	8008ea2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8008d74:	494f      	ldr	r1, [pc, #316]	; (8008eb4 <etharp_tmr+0x14c>)
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	4413      	add	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	440b      	add	r3, r1
 8008d82:	3314      	adds	r3, #20
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 8086 	beq.w	8008e9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008d90:	4948      	ldr	r1, [pc, #288]	; (8008eb4 <etharp_tmr+0x14c>)
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	4413      	add	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3312      	adds	r3, #18
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	b298      	uxth	r0, r3
 8008da6:	4943      	ldr	r1, [pc, #268]	; (8008eb4 <etharp_tmr+0x14c>)
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	4413      	add	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	440b      	add	r3, r1
 8008db4:	3312      	adds	r3, #18
 8008db6:	4602      	mov	r2, r0
 8008db8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008dba:	493e      	ldr	r1, [pc, #248]	; (8008eb4 <etharp_tmr+0x14c>)
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	440b      	add	r3, r1
 8008dc8:	3312      	adds	r3, #18
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008dd0:	d215      	bcs.n	8008dfe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008dd2:	4938      	ldr	r1, [pc, #224]	; (8008eb4 <etharp_tmr+0x14c>)
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	4413      	add	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	440b      	add	r3, r1
 8008de0:	3314      	adds	r3, #20
 8008de2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d10e      	bne.n	8008e06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8008de8:	4932      	ldr	r1, [pc, #200]	; (8008eb4 <etharp_tmr+0x14c>)
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	440b      	add	r3, r1
 8008df6:	3312      	adds	r3, #18
 8008df8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d903      	bls.n	8008e06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f7ff ff80 	bl	8008d04 <etharp_free_entry>
 8008e04:	e04a      	b.n	8008e9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8008e06:	492b      	ldr	r1, [pc, #172]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	00db      	lsls	r3, r3, #3
 8008e12:	440b      	add	r3, r1
 8008e14:	3314      	adds	r3, #20
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d10a      	bne.n	8008e32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008e1c:	4925      	ldr	r1, [pc, #148]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4613      	mov	r3, r2
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	4413      	add	r3, r2
 8008e26:	00db      	lsls	r3, r3, #3
 8008e28:	440b      	add	r3, r1
 8008e2a:	3314      	adds	r3, #20
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	e034      	b.n	8008e9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008e32:	4920      	ldr	r1, [pc, #128]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	3314      	adds	r3, #20
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d10a      	bne.n	8008e5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8008e48:	491a      	ldr	r1, [pc, #104]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	4413      	add	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	440b      	add	r3, r1
 8008e56:	3314      	adds	r3, #20
 8008e58:	2202      	movs	r2, #2
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e01e      	b.n	8008e9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008e5e:	4915      	ldr	r1, [pc, #84]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	4413      	add	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	440b      	add	r3, r1
 8008e6c:	3314      	adds	r3, #20
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d113      	bne.n	8008e9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008e74:	490f      	ldr	r1, [pc, #60]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	440b      	add	r3, r1
 8008e82:	3308      	adds	r3, #8
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	4413      	add	r3, r2
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <etharp_tmr+0x14c>)
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	f000 fe6e 	bl	8009b78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	f77f af65 	ble.w	8008d74 <etharp_tmr+0xc>
      }
    }
  }
}
 8008eaa:	bf00      	nop
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20008318 	.word	0x20008318

08008eb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008eca:	230a      	movs	r3, #10
 8008ecc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008ece:	230a      	movs	r3, #10
 8008ed0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	83bb      	strh	r3, [r7, #28]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	837b      	strh	r3, [r7, #26]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	843b      	strh	r3, [r7, #32]
 8008eea:	e0ae      	b.n	800904a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008eec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ef0:	49a6      	ldr	r1, [pc, #664]	; (800918c <etharp_find_entry+0x2d4>)
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	440b      	add	r3, r1
 8008efc:	3314      	adds	r3, #20
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008f02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008f06:	2b0a      	cmp	r3, #10
 8008f08:	d105      	bne.n	8008f16 <etharp_find_entry+0x5e>
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008f10:	8c3b      	ldrh	r3, [r7, #32]
 8008f12:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f14:	e095      	b.n	8009042 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 8092 	beq.w	8009042 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d009      	beq.n	8008f38 <etharp_find_entry+0x80>
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d806      	bhi.n	8008f38 <etharp_find_entry+0x80>
 8008f2a:	4b99      	ldr	r3, [pc, #612]	; (8009190 <etharp_find_entry+0x2d8>)
 8008f2c:	f240 1223 	movw	r2, #291	; 0x123
 8008f30:	4998      	ldr	r1, [pc, #608]	; (8009194 <etharp_find_entry+0x2dc>)
 8008f32:	4899      	ldr	r0, [pc, #612]	; (8009198 <etharp_find_entry+0x2e0>)
 8008f34:	f002 f9ec 	bl	800b310 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d020      	beq.n	8008f80 <etharp_find_entry+0xc8>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6819      	ldr	r1, [r3, #0]
 8008f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f46:	4891      	ldr	r0, [pc, #580]	; (800918c <etharp_find_entry+0x2d4>)
 8008f48:	4613      	mov	r3, r2
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	4413      	add	r3, r2
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4403      	add	r3, r0
 8008f52:	3304      	adds	r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4299      	cmp	r1, r3
 8008f58:	d112      	bne.n	8008f80 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00c      	beq.n	8008f7a <etharp_find_entry+0xc2>
 8008f60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f64:	4989      	ldr	r1, [pc, #548]	; (800918c <etharp_find_entry+0x2d4>)
 8008f66:	4613      	mov	r3, r2
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	440b      	add	r3, r1
 8008f70:	3308      	adds	r3, #8
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d102      	bne.n	8008f80 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8008f7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008f7e:	e100      	b.n	8009182 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d140      	bne.n	8009008 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8008f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008f8a:	4980      	ldr	r1, [pc, #512]	; (800918c <etharp_find_entry+0x2d4>)
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	440b      	add	r3, r1
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01a      	beq.n	8008fd2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8008f9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fa0:	497a      	ldr	r1, [pc, #488]	; (800918c <etharp_find_entry+0x2d4>)
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	4413      	add	r3, r2
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	440b      	add	r3, r1
 8008fac:	3312      	adds	r3, #18
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	8bba      	ldrh	r2, [r7, #28]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d845      	bhi.n	8009042 <etharp_find_entry+0x18a>
            old_queue = i;
 8008fb6:	8c3b      	ldrh	r3, [r7, #32]
 8008fb8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8008fba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fbe:	4973      	ldr	r1, [pc, #460]	; (800918c <etharp_find_entry+0x2d4>)
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	440b      	add	r3, r1
 8008fca:	3312      	adds	r3, #18
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	83bb      	strh	r3, [r7, #28]
 8008fd0:	e037      	b.n	8009042 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008fd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fd6:	496d      	ldr	r1, [pc, #436]	; (800918c <etharp_find_entry+0x2d4>)
 8008fd8:	4613      	mov	r3, r2
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	4413      	add	r3, r2
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	440b      	add	r3, r1
 8008fe2:	3312      	adds	r3, #18
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	8b7a      	ldrh	r2, [r7, #26]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d82a      	bhi.n	8009042 <etharp_find_entry+0x18a>
            old_pending = i;
 8008fec:	8c3b      	ldrh	r3, [r7, #32]
 8008fee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008ff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ff4:	4965      	ldr	r1, [pc, #404]	; (800918c <etharp_find_entry+0x2d4>)
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	4413      	add	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	440b      	add	r3, r1
 8009000:	3312      	adds	r3, #18
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	837b      	strh	r3, [r7, #26]
 8009006:	e01c      	b.n	8009042 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d919      	bls.n	8009042 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800900e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009012:	495e      	ldr	r1, [pc, #376]	; (800918c <etharp_find_entry+0x2d4>)
 8009014:	4613      	mov	r3, r2
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	4413      	add	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	440b      	add	r3, r1
 800901e:	3312      	adds	r3, #18
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	8b3a      	ldrh	r2, [r7, #24]
 8009024:	429a      	cmp	r2, r3
 8009026:	d80c      	bhi.n	8009042 <etharp_find_entry+0x18a>
            old_stable = i;
 8009028:	8c3b      	ldrh	r3, [r7, #32]
 800902a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800902c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009030:	4956      	ldr	r1, [pc, #344]	; (800918c <etharp_find_entry+0x2d4>)
 8009032:	4613      	mov	r3, r2
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	4413      	add	r3, r2
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	440b      	add	r3, r1
 800903c:	3312      	adds	r3, #18
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009042:	8c3b      	ldrh	r3, [r7, #32]
 8009044:	3301      	adds	r3, #1
 8009046:	b29b      	uxth	r3, r3
 8009048:	843b      	strh	r3, [r7, #32]
 800904a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800904e:	2b09      	cmp	r3, #9
 8009050:	f77f af4c 	ble.w	8008eec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d108      	bne.n	8009070 <etharp_find_entry+0x1b8>
 800905e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009062:	2b0a      	cmp	r3, #10
 8009064:	d107      	bne.n	8009076 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8009070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009074:	e085      	b.n	8009182 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800907a:	2b09      	cmp	r3, #9
 800907c:	dc02      	bgt.n	8009084 <etharp_find_entry+0x1cc>
    i = empty;
 800907e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009080:	843b      	strh	r3, [r7, #32]
 8009082:	e039      	b.n	80090f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009084:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009088:	2b09      	cmp	r3, #9
 800908a:	dc14      	bgt.n	80090b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800908c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800908e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009090:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009094:	493d      	ldr	r1, [pc, #244]	; (800918c <etharp_find_entry+0x2d4>)
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	440b      	add	r3, r1
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d018      	beq.n	80090d8 <etharp_find_entry+0x220>
 80090a6:	4b3a      	ldr	r3, [pc, #232]	; (8009190 <etharp_find_entry+0x2d8>)
 80090a8:	f240 126d 	movw	r2, #365	; 0x16d
 80090ac:	493b      	ldr	r1, [pc, #236]	; (800919c <etharp_find_entry+0x2e4>)
 80090ae:	483a      	ldr	r0, [pc, #232]	; (8009198 <etharp_find_entry+0x2e0>)
 80090b0:	f002 f92e 	bl	800b310 <iprintf>
 80090b4:	e010      	b.n	80090d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80090b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80090ba:	2b09      	cmp	r3, #9
 80090bc:	dc02      	bgt.n	80090c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80090be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090c0:	843b      	strh	r3, [r7, #32]
 80090c2:	e009      	b.n	80090d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80090c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090c8:	2b09      	cmp	r3, #9
 80090ca:	dc02      	bgt.n	80090d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80090cc:	8bfb      	ldrh	r3, [r7, #30]
 80090ce:	843b      	strh	r3, [r7, #32]
 80090d0:	e002      	b.n	80090d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80090d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d6:	e054      	b.n	8009182 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80090d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090dc:	2b09      	cmp	r3, #9
 80090de:	dd06      	ble.n	80090ee <etharp_find_entry+0x236>
 80090e0:	4b2b      	ldr	r3, [pc, #172]	; (8009190 <etharp_find_entry+0x2d8>)
 80090e2:	f240 127f 	movw	r2, #383	; 0x17f
 80090e6:	492e      	ldr	r1, [pc, #184]	; (80091a0 <etharp_find_entry+0x2e8>)
 80090e8:	482b      	ldr	r0, [pc, #172]	; (8009198 <etharp_find_entry+0x2e0>)
 80090ea:	f002 f911 	bl	800b310 <iprintf>
    etharp_free_entry(i);
 80090ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fe06 	bl	8008d04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80090f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	dd06      	ble.n	800910e <etharp_find_entry+0x256>
 8009100:	4b23      	ldr	r3, [pc, #140]	; (8009190 <etharp_find_entry+0x2d8>)
 8009102:	f240 1283 	movw	r2, #387	; 0x183
 8009106:	4926      	ldr	r1, [pc, #152]	; (80091a0 <etharp_find_entry+0x2e8>)
 8009108:	4823      	ldr	r0, [pc, #140]	; (8009198 <etharp_find_entry+0x2e0>)
 800910a:	f002 f901 	bl	800b310 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800910e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009112:	491e      	ldr	r1, [pc, #120]	; (800918c <etharp_find_entry+0x2d4>)
 8009114:	4613      	mov	r3, r2
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	4413      	add	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	440b      	add	r3, r1
 800911e:	3314      	adds	r3, #20
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d006      	beq.n	8009134 <etharp_find_entry+0x27c>
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <etharp_find_entry+0x2d8>)
 8009128:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800912c:	491d      	ldr	r1, [pc, #116]	; (80091a4 <etharp_find_entry+0x2ec>)
 800912e:	481a      	ldr	r0, [pc, #104]	; (8009198 <etharp_find_entry+0x2e0>)
 8009130:	f002 f8ee 	bl	800b310 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800913a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6819      	ldr	r1, [r3, #0]
 8009142:	4812      	ldr	r0, [pc, #72]	; (800918c <etharp_find_entry+0x2d4>)
 8009144:	4613      	mov	r3, r2
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4403      	add	r3, r0
 800914e:	3304      	adds	r3, #4
 8009150:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009156:	490d      	ldr	r1, [pc, #52]	; (800918c <etharp_find_entry+0x2d4>)
 8009158:	4613      	mov	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	4413      	add	r3, r2
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	440b      	add	r3, r1
 8009162:	3312      	adds	r3, #18
 8009164:	2200      	movs	r2, #0
 8009166:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009168:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800916c:	4907      	ldr	r1, [pc, #28]	; (800918c <etharp_find_entry+0x2d4>)
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	440b      	add	r3, r1
 8009178:	3308      	adds	r3, #8
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800917e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3728      	adds	r7, #40	; 0x28
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20008318 	.word	0x20008318
 8009190:	0800d270 	.word	0x0800d270
 8009194:	0800d2a8 	.word	0x0800d2a8
 8009198:	0800d2e8 	.word	0x0800d2e8
 800919c:	0800d310 	.word	0x0800d310
 80091a0:	0800d328 	.word	0x0800d328
 80091a4:	0800d33c 	.word	0x0800d33c

080091a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af02      	add	r7, sp, #8
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091bc:	2b06      	cmp	r3, #6
 80091be:	d006      	beq.n	80091ce <etharp_update_arp_entry+0x26>
 80091c0:	4b48      	ldr	r3, [pc, #288]	; (80092e4 <etharp_update_arp_entry+0x13c>)
 80091c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80091c6:	4948      	ldr	r1, [pc, #288]	; (80092e8 <etharp_update_arp_entry+0x140>)
 80091c8:	4848      	ldr	r0, [pc, #288]	; (80092ec <etharp_update_arp_entry+0x144>)
 80091ca:	f002 f8a1 	bl	800b310 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d012      	beq.n	80091fa <etharp_update_arp_entry+0x52>
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00e      	beq.n	80091fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68f9      	ldr	r1, [r7, #12]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 f8f4 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 80091e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d105      	bne.n	80091fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80091f6:	2be0      	cmp	r3, #224	; 0xe0
 80091f8:	d102      	bne.n	8009200 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80091fa:	f06f 030f 	mvn.w	r3, #15
 80091fe:	e06c      	b.n	80092da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4619      	mov	r1, r3
 8009206:	68b8      	ldr	r0, [r7, #8]
 8009208:	f7ff fe56 	bl	8008eb8 <etharp_find_entry>
 800920c:	4603      	mov	r3, r0
 800920e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009210:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009214:	2b00      	cmp	r3, #0
 8009216:	da02      	bge.n	800921e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009218:	8afb      	ldrh	r3, [r7, #22]
 800921a:	b25b      	sxtb	r3, r3
 800921c:	e05d      	b.n	80092da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800921e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009222:	4933      	ldr	r1, [pc, #204]	; (80092f0 <etharp_update_arp_entry+0x148>)
 8009224:	4613      	mov	r3, r2
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	4413      	add	r3, r2
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	440b      	add	r3, r1
 800922e:	3314      	adds	r3, #20
 8009230:	2202      	movs	r2, #2
 8009232:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009238:	492d      	ldr	r1, [pc, #180]	; (80092f0 <etharp_update_arp_entry+0x148>)
 800923a:	4613      	mov	r3, r2
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4413      	add	r3, r2
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	440b      	add	r3, r1
 8009244:	3308      	adds	r3, #8
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800924a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800924e:	4613      	mov	r3, r2
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	4413      	add	r3, r2
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	3308      	adds	r3, #8
 8009258:	4a25      	ldr	r2, [pc, #148]	; (80092f0 <etharp_update_arp_entry+0x148>)
 800925a:	4413      	add	r3, r2
 800925c:	3304      	adds	r3, #4
 800925e:	2206      	movs	r2, #6
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	4618      	mov	r0, r3
 8009264:	f002 f83e 	bl	800b2e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800926c:	4920      	ldr	r1, [pc, #128]	; (80092f0 <etharp_update_arp_entry+0x148>)
 800926e:	4613      	mov	r3, r2
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	4413      	add	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	440b      	add	r3, r1
 8009278:	3312      	adds	r3, #18
 800927a:	2200      	movs	r2, #0
 800927c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800927e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009282:	491b      	ldr	r1, [pc, #108]	; (80092f0 <etharp_update_arp_entry+0x148>)
 8009284:	4613      	mov	r3, r2
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	4413      	add	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	440b      	add	r3, r1
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d021      	beq.n	80092d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009294:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009298:	4915      	ldr	r1, [pc, #84]	; (80092f0 <etharp_update_arp_entry+0x148>)
 800929a:	4613      	mov	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4413      	add	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	440b      	add	r3, r1
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80092a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80092ac:	4910      	ldr	r1, [pc, #64]	; (80092f0 <etharp_update_arp_entry+0x148>)
 80092ae:	4613      	mov	r3, r2
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	4413      	add	r3, r2
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	440b      	add	r3, r1
 80092b8:	2200      	movs	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80092c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6939      	ldr	r1, [r7, #16]
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f001 ff8d 	bl	800b1ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80092d2:	6938      	ldr	r0, [r7, #16]
 80092d4:	f7fe fc2c 	bl	8007b30 <pbuf_free>
  }
  return ERR_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	0800d270 	.word	0x0800d270
 80092e8:	0800d368 	.word	0x0800d368
 80092ec:	0800d2e8 	.word	0x0800d2e8
 80092f0:	20008318 	.word	0x20008318

080092f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	e01e      	b.n	8009340 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8009302:	4913      	ldr	r1, [pc, #76]	; (8009350 <etharp_cleanup_netif+0x5c>)
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4613      	mov	r3, r2
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	4413      	add	r3, r2
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	440b      	add	r3, r1
 8009310:	3314      	adds	r3, #20
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009316:	7afb      	ldrb	r3, [r7, #11]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00e      	beq.n	800933a <etharp_cleanup_netif+0x46>
 800931c:	490c      	ldr	r1, [pc, #48]	; (8009350 <etharp_cleanup_netif+0x5c>)
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	3308      	adds	r3, #8
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d102      	bne.n	800933a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f7ff fce5 	bl	8008d04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b09      	cmp	r3, #9
 8009344:	dddd      	ble.n	8009302 <etharp_cleanup_netif+0xe>
    }
  }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20008318 	.word	0x20008318

08009354 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8009354:	b5b0      	push	{r4, r5, r7, lr}
 8009356:	b08a      	sub	sp, #40	; 0x28
 8009358:	af04      	add	r7, sp, #16
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d107      	bne.n	8009374 <etharp_input+0x20>
 8009364:	4b3d      	ldr	r3, [pc, #244]	; (800945c <etharp_input+0x108>)
 8009366:	f240 228a 	movw	r2, #650	; 0x28a
 800936a:	493d      	ldr	r1, [pc, #244]	; (8009460 <etharp_input+0x10c>)
 800936c:	483d      	ldr	r0, [pc, #244]	; (8009464 <etharp_input+0x110>)
 800936e:	f001 ffcf 	bl	800b310 <iprintf>
 8009372:	e06f      	b.n	8009454 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009384:	d10c      	bne.n	80093a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800938a:	2b06      	cmp	r3, #6
 800938c:	d108      	bne.n	80093a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009392:	2b04      	cmp	r3, #4
 8009394:	d104      	bne.n	80093a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	885b      	ldrh	r3, [r3, #2]
 800939a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800939c:	2b08      	cmp	r3, #8
 800939e:	d003      	beq.n	80093a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7fe fbc5 	bl	8007b30 <pbuf_free>
    return;
 80093a6:	e055      	b.n	8009454 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	330e      	adds	r3, #14
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	3318      	adds	r3, #24
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	3304      	adds	r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <etharp_input+0x74>
    for_us = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
 80093c6:	e009      	b.n	80093dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	3304      	adds	r3, #4
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	bf0c      	ite	eq
 80093d4:	2301      	moveq	r3, #1
 80093d6:	2300      	movne	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f103 0208 	add.w	r2, r3, #8
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <etharp_input+0x98>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <etharp_input+0x9a>
 80093ec:	2302      	movs	r3, #2
 80093ee:	f107 010c 	add.w	r1, r7, #12
 80093f2:	6838      	ldr	r0, [r7, #0]
 80093f4:	f7ff fed8 	bl	80091a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	88db      	ldrh	r3, [r3, #6]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009402:	d003      	beq.n	800940c <etharp_input+0xb8>
 8009404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009408:	d01e      	beq.n	8009448 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800940a:	e020      	b.n	800944e <etharp_input+0xfa>
      if (for_us) {
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d01c      	beq.n	800944c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800942c:	2102      	movs	r1, #2
 800942e:	9103      	str	r1, [sp, #12]
 8009430:	f107 010c 	add.w	r1, r7, #12
 8009434:	9102      	str	r1, [sp, #8]
 8009436:	9201      	str	r2, [sp, #4]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	462b      	mov	r3, r5
 800943c:	4622      	mov	r2, r4
 800943e:	4601      	mov	r1, r0
 8009440:	6838      	ldr	r0, [r7, #0]
 8009442:	f000 faeb 	bl	8009a1c <etharp_raw>
      break;
 8009446:	e001      	b.n	800944c <etharp_input+0xf8>
      break;
 8009448:	bf00      	nop
 800944a:	e000      	b.n	800944e <etharp_input+0xfa>
      break;
 800944c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fe fb6e 	bl	8007b30 <pbuf_free>
}
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bdb0      	pop	{r4, r5, r7, pc}
 800945a:	bf00      	nop
 800945c:	0800d270 	.word	0x0800d270
 8009460:	0800d3c0 	.word	0x0800d3c0
 8009464:	0800d2e8 	.word	0x0800d2e8

08009468 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af02      	add	r7, sp, #8
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009476:	79fa      	ldrb	r2, [r7, #7]
 8009478:	4944      	ldr	r1, [pc, #272]	; (800958c <etharp_output_to_arp_index+0x124>)
 800947a:	4613      	mov	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4413      	add	r3, r2
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	440b      	add	r3, r1
 8009484:	3314      	adds	r3, #20
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d806      	bhi.n	800949a <etharp_output_to_arp_index+0x32>
 800948c:	4b40      	ldr	r3, [pc, #256]	; (8009590 <etharp_output_to_arp_index+0x128>)
 800948e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009492:	4940      	ldr	r1, [pc, #256]	; (8009594 <etharp_output_to_arp_index+0x12c>)
 8009494:	4840      	ldr	r0, [pc, #256]	; (8009598 <etharp_output_to_arp_index+0x130>)
 8009496:	f001 ff3b 	bl	800b310 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800949a:	79fa      	ldrb	r2, [r7, #7]
 800949c:	493b      	ldr	r1, [pc, #236]	; (800958c <etharp_output_to_arp_index+0x124>)
 800949e:	4613      	mov	r3, r2
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	4413      	add	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	440b      	add	r3, r1
 80094a8:	3314      	adds	r3, #20
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d153      	bne.n	8009558 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80094b0:	79fa      	ldrb	r2, [r7, #7]
 80094b2:	4936      	ldr	r1, [pc, #216]	; (800958c <etharp_output_to_arp_index+0x124>)
 80094b4:	4613      	mov	r3, r2
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4413      	add	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	440b      	add	r3, r1
 80094be:	3312      	adds	r3, #18
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80094c6:	d919      	bls.n	80094fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80094c8:	79fa      	ldrb	r2, [r7, #7]
 80094ca:	4613      	mov	r3, r2
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	4413      	add	r3, r2
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	4a2e      	ldr	r2, [pc, #184]	; (800958c <etharp_output_to_arp_index+0x124>)
 80094d4:	4413      	add	r3, r2
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fb4c 	bl	8009b78 <etharp_request>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d138      	bne.n	8009558 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80094e6:	79fa      	ldrb	r2, [r7, #7]
 80094e8:	4928      	ldr	r1, [pc, #160]	; (800958c <etharp_output_to_arp_index+0x124>)
 80094ea:	4613      	mov	r3, r2
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	440b      	add	r3, r1
 80094f4:	3314      	adds	r3, #20
 80094f6:	2203      	movs	r2, #3
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e02d      	b.n	8009558 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80094fc:	79fa      	ldrb	r2, [r7, #7]
 80094fe:	4923      	ldr	r1, [pc, #140]	; (800958c <etharp_output_to_arp_index+0x124>)
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	440b      	add	r3, r1
 800950a:	3312      	adds	r3, #18
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8009512:	d321      	bcc.n	8009558 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009514:	79fa      	ldrb	r2, [r7, #7]
 8009516:	4613      	mov	r3, r2
 8009518:	005b      	lsls	r3, r3, #1
 800951a:	4413      	add	r3, r2
 800951c:	00db      	lsls	r3, r3, #3
 800951e:	4a1b      	ldr	r2, [pc, #108]	; (800958c <etharp_output_to_arp_index+0x124>)
 8009520:	4413      	add	r3, r2
 8009522:	1d19      	adds	r1, r3, #4
 8009524:	79fa      	ldrb	r2, [r7, #7]
 8009526:	4613      	mov	r3, r2
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	4413      	add	r3, r2
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	3308      	adds	r3, #8
 8009530:	4a16      	ldr	r2, [pc, #88]	; (800958c <etharp_output_to_arp_index+0x124>)
 8009532:	4413      	add	r3, r2
 8009534:	3304      	adds	r3, #4
 8009536:	461a      	mov	r2, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fafb 	bl	8009b34 <etharp_request_dst>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d109      	bne.n	8009558 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009544:	79fa      	ldrb	r2, [r7, #7]
 8009546:	4911      	ldr	r1, [pc, #68]	; (800958c <etharp_output_to_arp_index+0x124>)
 8009548:	4613      	mov	r3, r2
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	4413      	add	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	440b      	add	r3, r1
 8009552:	3314      	adds	r3, #20
 8009554:	2203      	movs	r2, #3
 8009556:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800955e:	79fa      	ldrb	r2, [r7, #7]
 8009560:	4613      	mov	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	4413      	add	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	3308      	adds	r3, #8
 800956a:	4a08      	ldr	r2, [pc, #32]	; (800958c <etharp_output_to_arp_index+0x124>)
 800956c:	4413      	add	r3, r2
 800956e:	3304      	adds	r3, #4
 8009570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009574:	9200      	str	r2, [sp, #0]
 8009576:	460a      	mov	r2, r1
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f001 fe36 	bl	800b1ec <ethernet_output>
 8009580:	4603      	mov	r3, r0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20008318 	.word	0x20008318
 8009590:	0800d270 	.word	0x0800d270
 8009594:	0800d3e0 	.word	0x0800d3e0
 8009598:	0800d2e8 	.word	0x0800d2e8

0800959c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08a      	sub	sp, #40	; 0x28
 80095a0:	af02      	add	r7, sp, #8
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <etharp_output+0x24>
 80095b2:	4b73      	ldr	r3, [pc, #460]	; (8009780 <etharp_output+0x1e4>)
 80095b4:	f240 321e 	movw	r2, #798	; 0x31e
 80095b8:	4972      	ldr	r1, [pc, #456]	; (8009784 <etharp_output+0x1e8>)
 80095ba:	4873      	ldr	r0, [pc, #460]	; (8009788 <etharp_output+0x1ec>)
 80095bc:	f001 fea8 	bl	800b310 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <etharp_output+0x38>
 80095c6:	4b6e      	ldr	r3, [pc, #440]	; (8009780 <etharp_output+0x1e4>)
 80095c8:	f240 321f 	movw	r2, #799	; 0x31f
 80095cc:	496f      	ldr	r1, [pc, #444]	; (800978c <etharp_output+0x1f0>)
 80095ce:	486e      	ldr	r0, [pc, #440]	; (8009788 <etharp_output+0x1ec>)
 80095d0:	f001 fe9e 	bl	800b310 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <etharp_output+0x4c>
 80095da:	4b69      	ldr	r3, [pc, #420]	; (8009780 <etharp_output+0x1e4>)
 80095dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80095e0:	496b      	ldr	r1, [pc, #428]	; (8009790 <etharp_output+0x1f4>)
 80095e2:	4869      	ldr	r0, [pc, #420]	; (8009788 <etharp_output+0x1ec>)
 80095e4:	f001 fe94 	bl	800b310 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 feee 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80095fa:	4b66      	ldr	r3, [pc, #408]	; (8009794 <etharp_output+0x1f8>)
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	e0af      	b.n	8009760 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009608:	2be0      	cmp	r3, #224	; 0xe0
 800960a:	d118      	bne.n	800963e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800960c:	2301      	movs	r3, #1
 800960e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009610:	2300      	movs	r3, #0
 8009612:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009614:	235e      	movs	r3, #94	; 0x5e
 8009616:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3301      	adds	r3, #1
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009622:	b2db      	uxtb	r3, r3
 8009624:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3302      	adds	r3, #2
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3303      	adds	r3, #3
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009636:	f107 0310 	add.w	r3, r7, #16
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	e090      	b.n	8009760 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3304      	adds	r3, #4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	405a      	eors	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3308      	adds	r3, #8
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4013      	ands	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d012      	beq.n	800967c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800965c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009660:	4293      	cmp	r3, r2
 8009662:	d00b      	beq.n	800967c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	330c      	adds	r3, #12
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	330c      	adds	r3, #12
 8009672:	61bb      	str	r3, [r7, #24]
 8009674:	e002      	b.n	800967c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009676:	f06f 0303 	mvn.w	r3, #3
 800967a:	e07d      	b.n	8009778 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800967c:	4b46      	ldr	r3, [pc, #280]	; (8009798 <etharp_output+0x1fc>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	4619      	mov	r1, r3
 8009682:	4a46      	ldr	r2, [pc, #280]	; (800979c <etharp_output+0x200>)
 8009684:	460b      	mov	r3, r1
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	440b      	add	r3, r1
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	4413      	add	r3, r2
 800968e:	3314      	adds	r3, #20
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d925      	bls.n	80096e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009696:	4b40      	ldr	r3, [pc, #256]	; (8009798 <etharp_output+0x1fc>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	4a3f      	ldr	r2, [pc, #252]	; (800979c <etharp_output+0x200>)
 800969e:	460b      	mov	r3, r1
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	440b      	add	r3, r1
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	4413      	add	r3, r2
 80096a8:	3308      	adds	r3, #8
 80096aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d117      	bne.n	80096e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4b38      	ldr	r3, [pc, #224]	; (8009798 <etharp_output+0x1fc>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	4937      	ldr	r1, [pc, #220]	; (800979c <etharp_output+0x200>)
 80096be:	4603      	mov	r3, r0
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4403      	add	r3, r0
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	440b      	add	r3, r1
 80096c8:	3304      	adds	r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d108      	bne.n	80096e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80096d0:	4b31      	ldr	r3, [pc, #196]	; (8009798 <etharp_output+0x1fc>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fec5 	bl	8009468 <etharp_output_to_arp_index>
 80096de:	4603      	mov	r3, r0
 80096e0:	e04a      	b.n	8009778 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e031      	b.n	800974c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80096e8:	7dfa      	ldrb	r2, [r7, #23]
 80096ea:	492c      	ldr	r1, [pc, #176]	; (800979c <etharp_output+0x200>)
 80096ec:	4613      	mov	r3, r2
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	4413      	add	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	440b      	add	r3, r1
 80096f6:	3314      	adds	r3, #20
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d923      	bls.n	8009746 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80096fe:	7dfa      	ldrb	r2, [r7, #23]
 8009700:	4926      	ldr	r1, [pc, #152]	; (800979c <etharp_output+0x200>)
 8009702:	4613      	mov	r3, r2
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	4413      	add	r3, r2
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	440b      	add	r3, r1
 800970c:	3308      	adds	r3, #8
 800970e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d117      	bne.n	8009746 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	7dfa      	ldrb	r2, [r7, #23]
 800971c:	481f      	ldr	r0, [pc, #124]	; (800979c <etharp_output+0x200>)
 800971e:	4613      	mov	r3, r2
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	4413      	add	r3, r2
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	4403      	add	r3, r0
 8009728:	3304      	adds	r3, #4
 800972a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800972c:	4299      	cmp	r1, r3
 800972e:	d10a      	bne.n	8009746 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009730:	4a19      	ldr	r2, [pc, #100]	; (8009798 <etharp_output+0x1fc>)
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	461a      	mov	r2, r3
 800973a:	68b9      	ldr	r1, [r7, #8]
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff fe93 	bl	8009468 <etharp_output_to_arp_index>
 8009742:	4603      	mov	r3, r0
 8009744:	e018      	b.n	8009778 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	3301      	adds	r3, #1
 800974a:	75fb      	strb	r3, [r7, #23]
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	2b09      	cmp	r3, #9
 8009750:	d9ca      	bls.n	80096e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	69b9      	ldr	r1, [r7, #24]
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f822 	bl	80097a0 <etharp_query>
 800975c:	4603      	mov	r3, r0
 800975e:	e00b      	b.n	8009778 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8009766:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f001 fd3b 	bl	800b1ec <ethernet_output>
 8009776:	4603      	mov	r3, r0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0800d270 	.word	0x0800d270
 8009784:	0800d3c0 	.word	0x0800d3c0
 8009788:	0800d2e8 	.word	0x0800d2e8
 800978c:	0800d410 	.word	0x0800d410
 8009790:	0800d3b0 	.word	0x0800d3b0
 8009794:	0800d9cc 	.word	0x0800d9cc
 8009798:	20008408 	.word	0x20008408
 800979c:	20008318 	.word	0x20008318

080097a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08c      	sub	sp, #48	; 0x30
 80097a4:	af02      	add	r7, sp, #8
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3326      	adds	r3, #38	; 0x26
 80097b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80097b2:	23ff      	movs	r3, #255	; 0xff
 80097b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68f9      	ldr	r1, [r7, #12]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fe04 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10c      	bne.n	80097e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80097d6:	2be0      	cmp	r3, #224	; 0xe0
 80097d8:	d006      	beq.n	80097e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d003      	beq.n	80097e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80097e8:	f06f 030f 	mvn.w	r3, #15
 80097ec:	e101      	b.n	80099f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	2101      	movs	r1, #1
 80097f2:	68b8      	ldr	r0, [r7, #8]
 80097f4:	f7ff fb60 	bl	8008eb8 <etharp_find_entry>
 80097f8:	4603      	mov	r3, r0
 80097fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80097fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009800:	2b00      	cmp	r3, #0
 8009802:	da02      	bge.n	800980a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009804:	8a7b      	ldrh	r3, [r7, #18]
 8009806:	b25b      	sxtb	r3, r3
 8009808:	e0f3      	b.n	80099f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800980a:	8a7b      	ldrh	r3, [r7, #18]
 800980c:	2b7e      	cmp	r3, #126	; 0x7e
 800980e:	d906      	bls.n	800981e <etharp_query+0x7e>
 8009810:	4b7a      	ldr	r3, [pc, #488]	; (80099fc <etharp_query+0x25c>)
 8009812:	f240 32c1 	movw	r2, #961	; 0x3c1
 8009816:	497a      	ldr	r1, [pc, #488]	; (8009a00 <etharp_query+0x260>)
 8009818:	487a      	ldr	r0, [pc, #488]	; (8009a04 <etharp_query+0x264>)
 800981a:	f001 fd79 	bl	800b310 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800981e:	8a7b      	ldrh	r3, [r7, #18]
 8009820:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009822:	7c7a      	ldrb	r2, [r7, #17]
 8009824:	4978      	ldr	r1, [pc, #480]	; (8009a08 <etharp_query+0x268>)
 8009826:	4613      	mov	r3, r2
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	4413      	add	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	440b      	add	r3, r1
 8009830:	3314      	adds	r3, #20
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d115      	bne.n	8009864 <etharp_query+0xc4>
    is_new_entry = 1;
 8009838:	2301      	movs	r3, #1
 800983a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800983c:	7c7a      	ldrb	r2, [r7, #17]
 800983e:	4972      	ldr	r1, [pc, #456]	; (8009a08 <etharp_query+0x268>)
 8009840:	4613      	mov	r3, r2
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	4413      	add	r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	440b      	add	r3, r1
 800984a:	3314      	adds	r3, #20
 800984c:	2201      	movs	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009850:	7c7a      	ldrb	r2, [r7, #17]
 8009852:	496d      	ldr	r1, [pc, #436]	; (8009a08 <etharp_query+0x268>)
 8009854:	4613      	mov	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4413      	add	r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	440b      	add	r3, r1
 800985e:	3308      	adds	r3, #8
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009864:	7c7a      	ldrb	r2, [r7, #17]
 8009866:	4968      	ldr	r1, [pc, #416]	; (8009a08 <etharp_query+0x268>)
 8009868:	4613      	mov	r3, r2
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	4413      	add	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	440b      	add	r3, r1
 8009872:	3314      	adds	r3, #20
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d011      	beq.n	800989e <etharp_query+0xfe>
 800987a:	7c7a      	ldrb	r2, [r7, #17]
 800987c:	4962      	ldr	r1, [pc, #392]	; (8009a08 <etharp_query+0x268>)
 800987e:	4613      	mov	r3, r2
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4413      	add	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	440b      	add	r3, r1
 8009888:	3314      	adds	r3, #20
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d806      	bhi.n	800989e <etharp_query+0xfe>
 8009890:	4b5a      	ldr	r3, [pc, #360]	; (80099fc <etharp_query+0x25c>)
 8009892:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009896:	495d      	ldr	r1, [pc, #372]	; (8009a0c <etharp_query+0x26c>)
 8009898:	485a      	ldr	r0, [pc, #360]	; (8009a04 <etharp_query+0x264>)
 800989a:	f001 fd39 	bl	800b310 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <etharp_query+0x10a>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10c      	bne.n	80098c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80098aa:	68b9      	ldr	r1, [r7, #8]
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f963 	bl	8009b78 <etharp_request>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d102      	bne.n	80098c4 <etharp_query+0x124>
      return result;
 80098be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c2:	e096      	b.n	80099f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <etharp_query+0x138>
 80098ca:	4b4c      	ldr	r3, [pc, #304]	; (80099fc <etharp_query+0x25c>)
 80098cc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80098d0:	494f      	ldr	r1, [pc, #316]	; (8009a10 <etharp_query+0x270>)
 80098d2:	484c      	ldr	r0, [pc, #304]	; (8009a04 <etharp_query+0x264>)
 80098d4:	f001 fd1c 	bl	800b310 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80098d8:	7c7a      	ldrb	r2, [r7, #17]
 80098da:	494b      	ldr	r1, [pc, #300]	; (8009a08 <etharp_query+0x268>)
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	440b      	add	r3, r1
 80098e6:	3314      	adds	r3, #20
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d917      	bls.n	800991e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80098ee:	4a49      	ldr	r2, [pc, #292]	; (8009a14 <etharp_query+0x274>)
 80098f0:	7c7b      	ldrb	r3, [r7, #17]
 80098f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80098f4:	7c7a      	ldrb	r2, [r7, #17]
 80098f6:	4613      	mov	r3, r2
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4413      	add	r3, r2
 80098fc:	00db      	lsls	r3, r3, #3
 80098fe:	3308      	adds	r3, #8
 8009900:	4a41      	ldr	r2, [pc, #260]	; (8009a08 <etharp_query+0x268>)
 8009902:	4413      	add	r3, r2
 8009904:	3304      	adds	r3, #4
 8009906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800990a:	9200      	str	r2, [sp, #0]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f001 fc6b 	bl	800b1ec <ethernet_output>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800991c:	e067      	b.n	80099ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800991e:	7c7a      	ldrb	r2, [r7, #17]
 8009920:	4939      	ldr	r1, [pc, #228]	; (8009a08 <etharp_query+0x268>)
 8009922:	4613      	mov	r3, r2
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	4413      	add	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	440b      	add	r3, r1
 800992c:	3314      	adds	r3, #20
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d15c      	bne.n	80099ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800993c:	e01c      	b.n	8009978 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	895a      	ldrh	r2, [r3, #10]
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	891b      	ldrh	r3, [r3, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d10a      	bne.n	8009960 <etharp_query+0x1c0>
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d006      	beq.n	8009960 <etharp_query+0x1c0>
 8009952:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <etharp_query+0x25c>)
 8009954:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009958:	492f      	ldr	r1, [pc, #188]	; (8009a18 <etharp_query+0x278>)
 800995a:	482a      	ldr	r0, [pc, #168]	; (8009a04 <etharp_query+0x264>)
 800995c:	f001 fcd8 	bl	800b310 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	7b1b      	ldrb	r3, [r3, #12]
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <etharp_query+0x1d2>
        copy_needed = 1;
 800996c:	2301      	movs	r3, #1
 800996e:	61bb      	str	r3, [r7, #24]
        break;
 8009970:	e005      	b.n	800997e <etharp_query+0x1de>
      }
      p = p->next;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1df      	bne.n	800993e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f44f 7120 	mov.w	r1, #640	; 0x280
 800998a:	200e      	movs	r0, #14
 800998c:	f7fe fb5c 	bl	8008048 <pbuf_clone>
 8009990:	61f8      	str	r0, [r7, #28]
 8009992:	e004      	b.n	800999e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009998:	69f8      	ldr	r0, [r7, #28]
 800999a:	f7fe f969 	bl	8007c70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d021      	beq.n	80099e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80099a4:	7c7a      	ldrb	r2, [r7, #17]
 80099a6:	4918      	ldr	r1, [pc, #96]	; (8009a08 <etharp_query+0x268>)
 80099a8:	4613      	mov	r3, r2
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	4413      	add	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	440b      	add	r3, r1
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00a      	beq.n	80099ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80099b8:	7c7a      	ldrb	r2, [r7, #17]
 80099ba:	4913      	ldr	r1, [pc, #76]	; (8009a08 <etharp_query+0x268>)
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	440b      	add	r3, r1
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe f8b1 	bl	8007b30 <pbuf_free>
      }
      arp_table[i].q = p;
 80099ce:	7c7a      	ldrb	r2, [r7, #17]
 80099d0:	490d      	ldr	r1, [pc, #52]	; (8009a08 <etharp_query+0x268>)
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	440b      	add	r3, r1
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099e6:	e002      	b.n	80099ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80099e8:	23ff      	movs	r3, #255	; 0xff
 80099ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80099ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3728      	adds	r7, #40	; 0x28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	0800d270 	.word	0x0800d270
 8009a00:	0800d41c 	.word	0x0800d41c
 8009a04:	0800d2e8 	.word	0x0800d2e8
 8009a08:	20008318 	.word	0x20008318
 8009a0c:	0800d42c 	.word	0x0800d42c
 8009a10:	0800d410 	.word	0x0800d410
 8009a14:	20008408 	.word	0x20008408
 8009a18:	0800d454 	.word	0x0800d454

08009a1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <etharp_raw+0x26>
 8009a34:	4b3a      	ldr	r3, [pc, #232]	; (8009b20 <etharp_raw+0x104>)
 8009a36:	f240 4257 	movw	r2, #1111	; 0x457
 8009a3a:	493a      	ldr	r1, [pc, #232]	; (8009b24 <etharp_raw+0x108>)
 8009a3c:	483a      	ldr	r0, [pc, #232]	; (8009b28 <etharp_raw+0x10c>)
 8009a3e:	f001 fc67 	bl	800b310 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009a42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a46:	211c      	movs	r1, #28
 8009a48:	200e      	movs	r0, #14
 8009a4a:	f7fd fd8f 	bl	800756c <pbuf_alloc>
 8009a4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d102      	bne.n	8009a5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a5a:	e05d      	b.n	8009b18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	895b      	ldrh	r3, [r3, #10]
 8009a60:	2b1b      	cmp	r3, #27
 8009a62:	d806      	bhi.n	8009a72 <etharp_raw+0x56>
 8009a64:	4b2e      	ldr	r3, [pc, #184]	; (8009b20 <etharp_raw+0x104>)
 8009a66:	f240 4262 	movw	r2, #1122	; 0x462
 8009a6a:	4930      	ldr	r1, [pc, #192]	; (8009b2c <etharp_raw+0x110>)
 8009a6c:	482e      	ldr	r0, [pc, #184]	; (8009b28 <etharp_raw+0x10c>)
 8009a6e:	f001 fc4f 	bl	800b310 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009a78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fc fd48 	bl	8006510 <lwip_htons>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a8e:	2b06      	cmp	r3, #6
 8009a90:	d006      	beq.n	8009aa0 <etharp_raw+0x84>
 8009a92:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <etharp_raw+0x104>)
 8009a94:	f240 4269 	movw	r2, #1129	; 0x469
 8009a98:	4925      	ldr	r1, [pc, #148]	; (8009b30 <etharp_raw+0x114>)
 8009a9a:	4823      	ldr	r0, [pc, #140]	; (8009b28 <etharp_raw+0x10c>)
 8009a9c:	f001 fc38 	bl	800b310 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	2206      	movs	r2, #6
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fc1b 	bl	800b2e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	3312      	adds	r3, #18
 8009ab2:	2206      	movs	r2, #6
 8009ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fc14 	bl	800b2e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	330e      	adds	r3, #14
 8009ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	3318      	adds	r3, #24
 8009aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f042 0201 	orr.w	r2, r2, #1
 8009adc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f042 0208 	orr.w	r2, r2, #8
 8009ae6:	709a      	strb	r2, [r3, #2]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2206      	movs	r2, #6
 8009af0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2204      	movs	r2, #4
 8009af6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009af8:	f640 0306 	movw	r3, #2054	; 0x806
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	69b9      	ldr	r1, [r7, #24]
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f001 fb71 	bl	800b1ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009b0a:	69b8      	ldr	r0, [r7, #24]
 8009b0c:	f7fe f810 	bl	8007b30 <pbuf_free>
  p = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009b14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3720      	adds	r7, #32
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	0800d270 	.word	0x0800d270
 8009b24:	0800d3c0 	.word	0x0800d3c0
 8009b28:	0800d2e8 	.word	0x0800d2e8
 8009b2c:	0800d470 	.word	0x0800d470
 8009b30:	0800d4a4 	.word	0x0800d4a4

08009b34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af04      	add	r7, sp, #16
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009b50:	2201      	movs	r2, #1
 8009b52:	9203      	str	r2, [sp, #12]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	9202      	str	r2, [sp, #8]
 8009b58:	4a06      	ldr	r2, [pc, #24]	; (8009b74 <etharp_request_dst+0x40>)
 8009b5a:	9201      	str	r2, [sp, #4]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4603      	mov	r3, r0
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff ff5a 	bl	8009a1c <etharp_raw>
 8009b68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800d9d4 	.word	0x0800d9d4

08009b78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009b82:	4a05      	ldr	r2, [pc, #20]	; (8009b98 <etharp_request+0x20>)
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ffd4 	bl	8009b34 <etharp_request_dst>
 8009b8c:	4603      	mov	r3, r0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	0800d9cc 	.word	0x0800d9cc

08009b9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08e      	sub	sp, #56	; 0x38
 8009ba0:	af04      	add	r7, sp, #16
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009ba6:	4b79      	ldr	r3, [pc, #484]	; (8009d8c <icmp_input+0x1f0>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009bbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bbe:	2b13      	cmp	r3, #19
 8009bc0:	f240 80cd 	bls.w	8009d5e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	895b      	ldrh	r3, [r3, #10]
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	f240 80ca 	bls.w	8009d62 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009bd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80b7 	beq.w	8009d50 <icmp_input+0x1b4>
 8009be2:	2b08      	cmp	r3, #8
 8009be4:	f040 80b7 	bne.w	8009d56 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8009be8:	4b69      	ldr	r3, [pc, #420]	; (8009d90 <icmp_input+0x1f4>)
 8009bea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009bec:	4b67      	ldr	r3, [pc, #412]	; (8009d8c <icmp_input+0x1f0>)
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bf4:	2be0      	cmp	r3, #224	; 0xe0
 8009bf6:	f000 80bb 	beq.w	8009d70 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009bfa:	4b64      	ldr	r3, [pc, #400]	; (8009d8c <icmp_input+0x1f0>)
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	4a63      	ldr	r2, [pc, #396]	; (8009d8c <icmp_input+0x1f0>)
 8009c00:	6812      	ldr	r2, [r2, #0]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fbe3 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 80b1 	bne.w	8009d74 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	891b      	ldrh	r3, [r3, #8]
 8009c16:	2b07      	cmp	r3, #7
 8009c18:	f240 80a5 	bls.w	8009d66 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c1e:	330e      	adds	r3, #14
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fd feee 	bl	8007a04 <pbuf_add_header>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d04b      	beq.n	8009cc6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	891a      	ldrh	r2, [r3, #8]
 8009c32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c34:	4413      	add	r3, r2
 8009c36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	891b      	ldrh	r3, [r3, #8]
 8009c3c:	8b7a      	ldrh	r2, [r7, #26]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	f0c0 809a 	bcc.w	8009d78 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009c44:	8b7b      	ldrh	r3, [r7, #26]
 8009c46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	200e      	movs	r0, #14
 8009c4e:	f7fd fc8d 	bl	800756c <pbuf_alloc>
 8009c52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8090 	beq.w	8009d7c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	895b      	ldrh	r3, [r3, #10]
 8009c60:	461a      	mov	r2, r3
 8009c62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c64:	3308      	adds	r3, #8
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d203      	bcs.n	8009c72 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7fd ff60 	bl	8007b30 <pbuf_free>
          goto icmperr;
 8009c70:	e085      	b.n	8009d7e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 fb32 	bl	800b2e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c82:	4619      	mov	r1, r3
 8009c84:	6978      	ldr	r0, [r7, #20]
 8009c86:	f7fd fecd 	bl	8007a24 <pbuf_remove_header>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009c90:	4b40      	ldr	r3, [pc, #256]	; (8009d94 <icmp_input+0x1f8>)
 8009c92:	22b6      	movs	r2, #182	; 0xb6
 8009c94:	4940      	ldr	r1, [pc, #256]	; (8009d98 <icmp_input+0x1fc>)
 8009c96:	4841      	ldr	r0, [pc, #260]	; (8009d9c <icmp_input+0x200>)
 8009c98:	f001 fb3a 	bl	800b310 <iprintf>
          pbuf_free(r);
 8009c9c:	6978      	ldr	r0, [r7, #20]
 8009c9e:	f7fd ff47 	bl	8007b30 <pbuf_free>
          goto icmperr;
 8009ca2:	e06c      	b.n	8009d7e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	6978      	ldr	r0, [r7, #20]
 8009ca8:	f7fe f86a 	bl	8007d80 <pbuf_copy>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8009cb2:	6978      	ldr	r0, [r7, #20]
 8009cb4:	f7fd ff3c 	bl	8007b30 <pbuf_free>
          goto icmperr;
 8009cb8:	e061      	b.n	8009d7e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fd ff38 	bl	8007b30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	607b      	str	r3, [r7, #4]
 8009cc4:	e00f      	b.n	8009ce6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cc8:	330e      	adds	r3, #14
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7fd fea9 	bl	8007a24 <pbuf_remove_header>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009cd8:	4b2e      	ldr	r3, [pc, #184]	; (8009d94 <icmp_input+0x1f8>)
 8009cda:	22c7      	movs	r2, #199	; 0xc7
 8009cdc:	4930      	ldr	r1, [pc, #192]	; (8009da0 <icmp_input+0x204>)
 8009cde:	482f      	ldr	r0, [pc, #188]	; (8009d9c <icmp_input+0x200>)
 8009ce0:	f001 fb16 	bl	800b310 <iprintf>
          goto icmperr;
 8009ce4:	e04b      	b.n	8009d7e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f7fd fe87 	bl	8007a04 <pbuf_add_header>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d12b      	bne.n	8009d54 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8009d0a:	4b20      	ldr	r3, [pc, #128]	; (8009d8c <icmp_input+0x1f0>)
 8009d0c:	691a      	ldr	r2, [r3, #16]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	709a      	strb	r2, [r3, #2]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	729a      	strb	r2, [r3, #10]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	9302      	str	r3, [sp, #8]
 8009d36:	2301      	movs	r3, #1
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	23ff      	movs	r3, #255	; 0xff
 8009d40:	2200      	movs	r2, #0
 8009d42:	69f9      	ldr	r1, [r7, #28]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa6b 	bl	800a220 <ip4_output_if>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009d4e:	e001      	b.n	8009d54 <icmp_input+0x1b8>
      break;
 8009d50:	bf00      	nop
 8009d52:	e000      	b.n	8009d56 <icmp_input+0x1ba>
      break;
 8009d54:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7fd feea 	bl	8007b30 <pbuf_free>
  return;
 8009d5c:	e013      	b.n	8009d86 <icmp_input+0x1ea>
    goto lenerr;
 8009d5e:	bf00      	nop
 8009d60:	e002      	b.n	8009d68 <icmp_input+0x1cc>
    goto lenerr;
 8009d62:	bf00      	nop
 8009d64:	e000      	b.n	8009d68 <icmp_input+0x1cc>
        goto lenerr;
 8009d66:	bf00      	nop
lenerr:
  pbuf_free(p);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fd fee1 	bl	8007b30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009d6e:	e00a      	b.n	8009d86 <icmp_input+0x1ea>
        goto icmperr;
 8009d70:	bf00      	nop
 8009d72:	e004      	b.n	8009d7e <icmp_input+0x1e2>
        goto icmperr;
 8009d74:	bf00      	nop
 8009d76:	e002      	b.n	8009d7e <icmp_input+0x1e2>
          goto icmperr;
 8009d78:	bf00      	nop
 8009d7a:	e000      	b.n	8009d7e <icmp_input+0x1e2>
          goto icmperr;
 8009d7c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fd fed6 	bl	8007b30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009d84:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8009d86:	3728      	adds	r7, #40	; 0x28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	200052b0 	.word	0x200052b0
 8009d90:	200052c4 	.word	0x200052c4
 8009d94:	0800d4e8 	.word	0x0800d4e8
 8009d98:	0800d520 	.word	0x0800d520
 8009d9c:	0800d558 	.word	0x0800d558
 8009da0:	0800d580 	.word	0x0800d580

08009da4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	461a      	mov	r2, r3
 8009db4:	2103      	movs	r1, #3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f814 	bl	8009de4 <icmp_send_response>
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	210b      	movs	r1, #11
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f804 	bl	8009de4 <icmp_send_response>
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	; 0x30
 8009de8:	af04      	add	r7, sp, #16
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
 8009df0:	4613      	mov	r3, r2
 8009df2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009df4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009df8:	2124      	movs	r1, #36	; 0x24
 8009dfa:	2022      	movs	r0, #34	; 0x22
 8009dfc:	f7fd fbb6 	bl	800756c <pbuf_alloc>
 8009e00:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d04c      	beq.n	8009ea2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	895b      	ldrh	r3, [r3, #10]
 8009e0c:	2b23      	cmp	r3, #35	; 0x23
 8009e0e:	d806      	bhi.n	8009e1e <icmp_send_response+0x3a>
 8009e10:	4b26      	ldr	r3, [pc, #152]	; (8009eac <icmp_send_response+0xc8>)
 8009e12:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009e16:	4926      	ldr	r1, [pc, #152]	; (8009eb0 <icmp_send_response+0xcc>)
 8009e18:	4826      	ldr	r0, [pc, #152]	; (8009eb4 <icmp_send_response+0xd0>)
 8009e1a:	f001 fa79 	bl	800b310 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	78fa      	ldrb	r2, [r7, #3]
 8009e2e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	78ba      	ldrb	r2, [r7, #2]
 8009e34:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	711a      	strb	r2, [r3, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2200      	movs	r2, #0
 8009e44:	719a      	strb	r2, [r3, #6]
 8009e46:	2200      	movs	r2, #0
 8009e48:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f103 0008 	add.w	r0, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	221c      	movs	r2, #28
 8009e58:	4619      	mov	r1, r3
 8009e5a:	f001 fa43 	bl	800b2e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f825 	bl	8009eb8 <ip4_route>
 8009e6e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d011      	beq.n	8009e9a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	709a      	strb	r2, [r3, #2]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009e80:	f107 020c 	add.w	r2, r7, #12
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	2301      	movs	r3, #1
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	23ff      	movs	r3, #255	; 0xff
 8009e92:	2100      	movs	r1, #0
 8009e94:	69f8      	ldr	r0, [r7, #28]
 8009e96:	f000 f9c3 	bl	800a220 <ip4_output_if>
  }
  pbuf_free(q);
 8009e9a:	69f8      	ldr	r0, [r7, #28]
 8009e9c:	f7fd fe48 	bl	8007b30 <pbuf_free>
 8009ea0:	e000      	b.n	8009ea4 <icmp_send_response+0xc0>
    return;
 8009ea2:	bf00      	nop
}
 8009ea4:	3720      	adds	r7, #32
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800d4e8 	.word	0x0800d4e8
 8009eb0:	0800d5b4 	.word	0x0800d5b4
 8009eb4:	0800d558 	.word	0x0800d558

08009eb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009ec0:	4b33      	ldr	r3, [pc, #204]	; (8009f90 <ip4_route+0xd8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	e036      	b.n	8009f36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d02b      	beq.n	8009f30 <ip4_route+0x78>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ede:	089b      	lsrs	r3, r3, #2
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d022      	beq.n	8009f30 <ip4_route+0x78>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3304      	adds	r3, #4
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01d      	beq.n	8009f30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3304      	adds	r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	405a      	eors	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3308      	adds	r3, #8
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	e038      	b.n	8009f82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d108      	bne.n	8009f30 <ip4_route+0x78>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	330c      	adds	r3, #12
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d101      	bne.n	8009f30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	e028      	b.n	8009f82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1c5      	bne.n	8009ec8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009f3c:	4b15      	ldr	r3, [pc, #84]	; (8009f94 <ip4_route+0xdc>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d01a      	beq.n	8009f7a <ip4_route+0xc2>
 8009f44:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <ip4_route+0xdc>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d012      	beq.n	8009f7a <ip4_route+0xc2>
 8009f54:	4b0f      	ldr	r3, [pc, #60]	; (8009f94 <ip4_route+0xdc>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00a      	beq.n	8009f7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009f64:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <ip4_route+0xdc>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b7f      	cmp	r3, #127	; 0x7f
 8009f78:	d101      	bne.n	8009f7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e001      	b.n	8009f82 <ip4_route+0xca>
  }

  return netif_default;
 8009f7e:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <ip4_route+0xdc>)
 8009f80:	681b      	ldr	r3, [r3, #0]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20008300 	.word	0x20008300
 8009f94:	20008304 	.word	0x20008304

08009f98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d016      	beq.n	8009fde <ip4_input_accept+0x46>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d011      	beq.n	8009fde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009fba:	4b0b      	ldr	r3, [pc, #44]	; (8009fe8 <ip4_input_accept+0x50>)
 8009fbc:	695a      	ldr	r2, [r3, #20]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d008      	beq.n	8009fda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <ip4_input_accept+0x50>)
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f9fe 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 8009fd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e000      	b.n	8009fe0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	200052b0 	.word	0x200052b0

08009fec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	091b      	lsrs	r3, r3, #4
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b04      	cmp	r3, #4
 800a006:	d004      	beq.n	800a012 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fd fd91 	bl	8007b30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	e0fd      	b.n	800a20e <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	f003 030f 	and.w	r3, r3, #15
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	885b      	ldrh	r3, [r3, #2]
 800a026:	b29b      	uxth	r3, r3
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fc fa71 	bl	8006510 <lwip_htons>
 800a02e:	4603      	mov	r3, r0
 800a030:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	891b      	ldrh	r3, [r3, #8]
 800a036:	89ba      	ldrh	r2, [r7, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d204      	bcs.n	800a046 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a03c:	89bb      	ldrh	r3, [r7, #12]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7fd fbef 	bl	8007824 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	895b      	ldrh	r3, [r3, #10]
 800a04a:	89fa      	ldrh	r2, [r7, #14]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d807      	bhi.n	800a060 <ip4_input+0x74>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	89ba      	ldrh	r2, [r7, #12]
 800a056:	429a      	cmp	r2, r3
 800a058:	d802      	bhi.n	800a060 <ip4_input+0x74>
 800a05a:	89fb      	ldrh	r3, [r7, #14]
 800a05c:	2b13      	cmp	r3, #19
 800a05e:	d804      	bhi.n	800a06a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7fd fd65 	bl	8007b30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	e0d1      	b.n	800a20e <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4a6a      	ldr	r2, [pc, #424]	; (800a218 <ip4_input+0x22c>)
 800a070:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	4a68      	ldr	r2, [pc, #416]	; (800a218 <ip4_input+0x22c>)
 800a078:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a07a:	4b67      	ldr	r3, [pc, #412]	; (800a218 <ip4_input+0x22c>)
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a082:	2be0      	cmp	r3, #224	; 0xe0
 800a084:	d112      	bne.n	800a0ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <ip4_input+0xba>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	3304      	adds	r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <ip4_input+0xba>
      netif = inp;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	e02a      	b.n	800a0fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	e027      	b.n	800a0fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800a0ac:	6838      	ldr	r0, [r7, #0]
 800a0ae:	f7ff ff73 	bl	8009f98 <ip4_input_accept>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <ip4_input+0xd2>
      netif = inp;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	613b      	str	r3, [r7, #16]
 800a0bc:	e01e      	b.n	800a0fc <ip4_input+0x110>
    } else {
      netif = NULL;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a0c2:	4b55      	ldr	r3, [pc, #340]	; (800a218 <ip4_input+0x22c>)
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b7f      	cmp	r3, #127	; 0x7f
 800a0ca:	d017      	beq.n	800a0fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800a0cc:	4b53      	ldr	r3, [pc, #332]	; (800a21c <ip4_input+0x230>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	613b      	str	r3, [r7, #16]
 800a0d2:	e00e      	b.n	800a0f2 <ip4_input+0x106>
          if (netif == inp) {
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d006      	beq.n	800a0ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f7ff ff5b 	bl	8009f98 <ip4_input_accept>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <ip4_input+0x10e>
 800a0e8:	e000      	b.n	800a0ec <ip4_input+0x100>
            continue;
 800a0ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1ed      	bne.n	800a0d4 <ip4_input+0xe8>
 800a0f8:	e000      	b.n	800a0fc <ip4_input+0x110>
            break;
 800a0fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a0fc:	4b46      	ldr	r3, [pc, #280]	; (800a218 <ip4_input+0x22c>)
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f964 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d105      	bne.n	800a11a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a10e:	4b42      	ldr	r3, [pc, #264]	; (800a218 <ip4_input+0x22c>)
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a116:	2be0      	cmp	r3, #224	; 0xe0
 800a118:	d104      	bne.n	800a124 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7fd fd08 	bl	8007b30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	e074      	b.n	800a20e <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d104      	bne.n	800a134 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7fd fd00 	bl	8007b30 <pbuf_free>
    return ERR_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	e06c      	b.n	800a20e <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	88db      	ldrh	r3, [r3, #6]
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fc88 	bl	800aa5c <ip4_reass>
 800a14c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <ip4_input+0x16c>
      return ERR_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	e05a      	b.n	800a20e <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a15e:	4a2e      	ldr	r2, [pc, #184]	; (800a218 <ip4_input+0x22c>)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a164:	4a2c      	ldr	r2, [pc, #176]	; (800a218 <ip4_input+0x22c>)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a16a:	4a2b      	ldr	r2, [pc, #172]	; (800a218 <ip4_input+0x22c>)
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 030f 	and.w	r3, r3, #15
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	b29a      	uxth	r2, r3
 800a180:	4b25      	ldr	r3, [pc, #148]	; (800a218 <ip4_input+0x22c>)
 800a182:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a184:	89fb      	ldrh	r3, [r7, #14]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7fd fc4b 	bl	8007a24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	7a5b      	ldrb	r3, [r3, #9]
 800a192:	2b01      	cmp	r3, #1
 800a194:	d006      	beq.n	800a1a4 <ip4_input+0x1b8>
 800a196:	2b11      	cmp	r3, #17
 800a198:	d109      	bne.n	800a1ae <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe f955 	bl	800844c <udp_input>
        break;
 800a1a2:	e021      	b.n	800a1e8 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff fcf8 	bl	8009b9c <icmp_input>
        break;
 800a1ac:	e01c      	b.n	800a1e8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a1ae:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <ip4_input+0x22c>)
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	6939      	ldr	r1, [r7, #16]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 f90b 	bl	800a3d0 <ip4_addr_isbroadcast_u32>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10f      	bne.n	800a1e0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a1c0:	4b15      	ldr	r3, [pc, #84]	; (800a218 <ip4_input+0x22c>)
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a1c8:	2be0      	cmp	r3, #224	; 0xe0
 800a1ca:	d009      	beq.n	800a1e0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a1cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fd fc99 	bl	8007b0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a1d8:	2102      	movs	r1, #2
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7ff fde2 	bl	8009da4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7fd fca5 	bl	8007b30 <pbuf_free>
        break;
 800a1e6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a1e8:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <ip4_input+0x22c>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a1ee:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <ip4_input+0x22c>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <ip4_input+0x22c>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a1fa:	4b07      	ldr	r3, [pc, #28]	; (800a218 <ip4_input+0x22c>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <ip4_input+0x22c>)
 800a202:	2200      	movs	r2, #0
 800a204:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a206:	4b04      	ldr	r3, [pc, #16]	; (800a218 <ip4_input+0x22c>)
 800a208:	2200      	movs	r2, #0
 800a20a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	200052b0 	.word	0x200052b0
 800a21c:	20008300 	.word	0x20008300

0800a220 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08a      	sub	sp, #40	; 0x28
 800a224:	af04      	add	r7, sp, #16
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d009      	beq.n	800a24c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <ip4_output_if+0x26>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	3304      	adds	r3, #4
 800a24a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a24c:	78fa      	ldrb	r2, [r7, #3]
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	9302      	str	r3, [sp, #8]
 800a252:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	4613      	mov	r3, r2
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6979      	ldr	r1, [r7, #20]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f805 	bl	800a274 <ip4_output_if_src>
 800a26a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	7b9b      	ldrb	r3, [r3, #14]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d006      	beq.n	800a298 <ip4_output_if_src+0x24>
 800a28a:	4b4b      	ldr	r3, [pc, #300]	; (800a3b8 <ip4_output_if_src+0x144>)
 800a28c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800a290:	494a      	ldr	r1, [pc, #296]	; (800a3bc <ip4_output_if_src+0x148>)
 800a292:	484b      	ldr	r0, [pc, #300]	; (800a3c0 <ip4_output_if_src+0x14c>)
 800a294:	f001 f83c 	bl	800b310 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d060      	beq.n	800a360 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a29e:	2314      	movs	r3, #20
 800a2a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a2a2:	2114      	movs	r1, #20
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7fd fbad 	bl	8007a04 <pbuf_add_header>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a2b0:	f06f 0301 	mvn.w	r3, #1
 800a2b4:	e07c      	b.n	800a3b0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	895b      	ldrh	r3, [r3, #10]
 800a2c0:	2b13      	cmp	r3, #19
 800a2c2:	d806      	bhi.n	800a2d2 <ip4_output_if_src+0x5e>
 800a2c4:	4b3c      	ldr	r3, [pc, #240]	; (800a3b8 <ip4_output_if_src+0x144>)
 800a2c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800a2ca:	493e      	ldr	r1, [pc, #248]	; (800a3c4 <ip4_output_if_src+0x150>)
 800a2cc:	483c      	ldr	r0, [pc, #240]	; (800a3c0 <ip4_output_if_src+0x14c>)
 800a2ce:	f001 f81f 	bl	800b310 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a2de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a2e8:	8b7b      	ldrh	r3, [r7, #26]
 800a2ea:	089b      	lsrs	r3, r3, #2
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a300:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	891b      	ldrh	r3, [r3, #8]
 800a306:	4618      	mov	r0, r3
 800a308:	f7fc f902 	bl	8006510 <lwip_htons>
 800a30c:	4603      	mov	r3, r0
 800a30e:	461a      	mov	r2, r3
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2200      	movs	r2, #0
 800a318:	719a      	strb	r2, [r3, #6]
 800a31a:	2200      	movs	r2, #0
 800a31c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a31e:	4b2a      	ldr	r3, [pc, #168]	; (800a3c8 <ip4_output_if_src+0x154>)
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f7fc f8f4 	bl	8006510 <lwip_htons>
 800a328:	4603      	mov	r3, r0
 800a32a:	461a      	mov	r2, r3
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a330:	4b25      	ldr	r3, [pc, #148]	; (800a3c8 <ip4_output_if_src+0x154>)
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	4b23      	ldr	r3, [pc, #140]	; (800a3c8 <ip4_output_if_src+0x154>)
 800a33a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d104      	bne.n	800a34c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a342:	4b22      	ldr	r3, [pc, #136]	; (800a3cc <ip4_output_if_src+0x158>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	e003      	b.n	800a354 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	2200      	movs	r2, #0
 800a358:	729a      	strb	r2, [r3, #10]
 800a35a:	2200      	movs	r2, #0
 800a35c:	72da      	strb	r2, [r3, #11]
 800a35e:	e00f      	b.n	800a380 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	895b      	ldrh	r3, [r3, #10]
 800a364:	2b13      	cmp	r3, #19
 800a366:	d802      	bhi.n	800a36e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a368:	f06f 0301 	mvn.w	r3, #1
 800a36c:	e020      	b.n	800a3b0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a37a:	f107 0314 	add.w	r3, r7, #20
 800a37e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00c      	beq.n	800a3a2 <ip4_output_if_src+0x12e>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	891a      	ldrh	r2, [r3, #8]
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a390:	429a      	cmp	r2, r3
 800a392:	d906      	bls.n	800a3a2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fd53 	bl	800ae44 <ip4_frag>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	e006      	b.n	800a3b0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	68f9      	ldr	r1, [r7, #12]
 800a3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0800d5e0 	.word	0x0800d5e0
 800a3bc:	0800d614 	.word	0x0800d614
 800a3c0:	0800d620 	.word	0x0800d620
 800a3c4:	0800d648 	.word	0x0800d648
 800a3c8:	2000840a 	.word	0x2000840a
 800a3cc:	0800d9c8 	.word	0x0800d9c8

0800a3d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e4:	d002      	beq.n	800a3ec <ip4_addr_isbroadcast_u32+0x1c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e02a      	b.n	800a446 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e021      	b.n	800a446 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	3304      	adds	r3, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d101      	bne.n	800a412 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	e019      	b.n	800a446 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	3304      	adds	r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	405a      	eors	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	3308      	adds	r3, #8
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4013      	ands	r3, r2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10d      	bne.n	800a444 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	43da      	mvns	r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d101      	bne.n	800a444 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a444:	2300      	movs	r3, #0
  }
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a45e:	4b12      	ldr	r3, [pc, #72]	; (800a4a8 <ip_reass_tmr+0x54>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a464:	e018      	b.n	800a498 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	7fdb      	ldrb	r3, [r3, #31]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <ip_reass_tmr+0x32>
      r->timer--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	7fdb      	ldrb	r3, [r3, #31]
 800a472:	3b01      	subs	r3, #1
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e008      	b.n	800a498 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f80a 	bl	800a4ac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1e3      	bne.n	800a466 <ip_reass_tmr+0x12>
    }
  }
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	2000840c 	.word	0x2000840c

0800a4ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d105      	bne.n	800a4ce <ip_reass_free_complete_datagram+0x22>
 800a4c2:	4b45      	ldr	r3, [pc, #276]	; (800a5d8 <ip_reass_free_complete_datagram+0x12c>)
 800a4c4:	22ab      	movs	r2, #171	; 0xab
 800a4c6:	4945      	ldr	r1, [pc, #276]	; (800a5dc <ip_reass_free_complete_datagram+0x130>)
 800a4c8:	4845      	ldr	r0, [pc, #276]	; (800a5e0 <ip_reass_free_complete_datagram+0x134>)
 800a4ca:	f000 ff21 	bl	800b310 <iprintf>
  if (prev != NULL) {
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00a      	beq.n	800a4ea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d005      	beq.n	800a4ea <ip_reass_free_complete_datagram+0x3e>
 800a4de:	4b3e      	ldr	r3, [pc, #248]	; (800a5d8 <ip_reass_free_complete_datagram+0x12c>)
 800a4e0:	22ad      	movs	r2, #173	; 0xad
 800a4e2:	4940      	ldr	r1, [pc, #256]	; (800a5e4 <ip_reass_free_complete_datagram+0x138>)
 800a4e4:	483e      	ldr	r0, [pc, #248]	; (800a5e0 <ip_reass_free_complete_datagram+0x134>)
 800a4e6:	f000 ff13 	bl	800b310 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	889b      	ldrh	r3, [r3, #4]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d12a      	bne.n	800a552 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	6858      	ldr	r0, [r3, #4]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3308      	adds	r3, #8
 800a512:	2214      	movs	r2, #20
 800a514:	4619      	mov	r1, r3
 800a516:	f000 fee5 	bl	800b2e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a51a:	2101      	movs	r1, #1
 800a51c:	69b8      	ldr	r0, [r7, #24]
 800a51e:	f7ff fc51 	bl	8009dc4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a522:	69b8      	ldr	r0, [r7, #24]
 800a524:	f7fd fb8c 	bl	8007c40 <pbuf_clen>
 800a528:	4603      	mov	r3, r0
 800a52a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a52c:	8bfa      	ldrh	r2, [r7, #30]
 800a52e:	8a7b      	ldrh	r3, [r7, #18]
 800a530:	4413      	add	r3, r2
 800a532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a536:	db05      	blt.n	800a544 <ip_reass_free_complete_datagram+0x98>
 800a538:	4b27      	ldr	r3, [pc, #156]	; (800a5d8 <ip_reass_free_complete_datagram+0x12c>)
 800a53a:	22bc      	movs	r2, #188	; 0xbc
 800a53c:	492a      	ldr	r1, [pc, #168]	; (800a5e8 <ip_reass_free_complete_datagram+0x13c>)
 800a53e:	4828      	ldr	r0, [pc, #160]	; (800a5e0 <ip_reass_free_complete_datagram+0x134>)
 800a540:	f000 fee6 	bl	800b310 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a544:	8bfa      	ldrh	r2, [r7, #30]
 800a546:	8a7b      	ldrh	r3, [r7, #18]
 800a548:	4413      	add	r3, r2
 800a54a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a54c:	69b8      	ldr	r0, [r7, #24]
 800a54e:	f7fd faef 	bl	8007b30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a558:	e01f      	b.n	800a59a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7fd fb68 	bl	8007c40 <pbuf_clen>
 800a570:	4603      	mov	r3, r0
 800a572:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a574:	8bfa      	ldrh	r2, [r7, #30]
 800a576:	8a7b      	ldrh	r3, [r7, #18]
 800a578:	4413      	add	r3, r2
 800a57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57e:	db05      	blt.n	800a58c <ip_reass_free_complete_datagram+0xe0>
 800a580:	4b15      	ldr	r3, [pc, #84]	; (800a5d8 <ip_reass_free_complete_datagram+0x12c>)
 800a582:	22cc      	movs	r2, #204	; 0xcc
 800a584:	4918      	ldr	r1, [pc, #96]	; (800a5e8 <ip_reass_free_complete_datagram+0x13c>)
 800a586:	4816      	ldr	r0, [pc, #88]	; (800a5e0 <ip_reass_free_complete_datagram+0x134>)
 800a588:	f000 fec2 	bl	800b310 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a58c:	8bfa      	ldrh	r2, [r7, #30]
 800a58e:	8a7b      	ldrh	r3, [r7, #18]
 800a590:	4413      	add	r3, r2
 800a592:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7fd facb 	bl	8007b30 <pbuf_free>
  while (p != NULL) {
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1dc      	bne.n	800a55a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f8c2 	bl	800a72c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a5a8:	4b10      	ldr	r3, [pc, #64]	; (800a5ec <ip_reass_free_complete_datagram+0x140>)
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	8bfa      	ldrh	r2, [r7, #30]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d905      	bls.n	800a5be <ip_reass_free_complete_datagram+0x112>
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <ip_reass_free_complete_datagram+0x12c>)
 800a5b4:	22d2      	movs	r2, #210	; 0xd2
 800a5b6:	490e      	ldr	r1, [pc, #56]	; (800a5f0 <ip_reass_free_complete_datagram+0x144>)
 800a5b8:	4809      	ldr	r0, [pc, #36]	; (800a5e0 <ip_reass_free_complete_datagram+0x134>)
 800a5ba:	f000 fea9 	bl	800b310 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <ip_reass_free_complete_datagram+0x140>)
 800a5c0:	881a      	ldrh	r2, [r3, #0]
 800a5c2:	8bfb      	ldrh	r3, [r7, #30]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <ip_reass_free_complete_datagram+0x140>)
 800a5ca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a5cc:	8bfb      	ldrh	r3, [r7, #30]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	0800d678 	.word	0x0800d678
 800a5dc:	0800d6b4 	.word	0x0800d6b4
 800a5e0:	0800d6c0 	.word	0x0800d6c0
 800a5e4:	0800d6e8 	.word	0x0800d6e8
 800a5e8:	0800d6fc 	.word	0x0800d6fc
 800a5ec:	20008410 	.word	0x20008410
 800a5f0:	0800d71c 	.word	0x0800d71c

0800a5f4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	; 0x28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a612:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <ip_reass_remove_oldest_datagram+0xc0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a618:	e030      	b.n	800a67c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	695a      	ldr	r2, [r3, #20]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	429a      	cmp	r2, r3
 800a624:	d10c      	bne.n	800a640 <ip_reass_remove_oldest_datagram+0x4c>
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	699a      	ldr	r2, [r3, #24]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d106      	bne.n	800a640 <ip_reass_remove_oldest_datagram+0x4c>
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	899a      	ldrh	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	889b      	ldrh	r3, [r3, #4]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d014      	beq.n	800a66a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	3301      	adds	r3, #1
 800a644:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d104      	bne.n	800a656 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	61bb      	str	r3, [r7, #24]
 800a654:	e009      	b.n	800a66a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	7fda      	ldrb	r2, [r3, #31]
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	7fdb      	ldrb	r3, [r3, #31]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d803      	bhi.n	800a66a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1cb      	bne.n	800a61a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d008      	beq.n	800a69a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a688:	69b9      	ldr	r1, [r7, #24]
 800a68a:	6a38      	ldr	r0, [r7, #32]
 800a68c:	f7ff ff0e 	bl	800a4ac <ip_reass_free_complete_datagram>
 800a690:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	da02      	bge.n	800a6a8 <ip_reass_remove_oldest_datagram+0xb4>
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	dcac      	bgt.n	800a602 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a6a8:	697b      	ldr	r3, [r7, #20]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	2000840c 	.word	0x2000840c

0800a6b8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f7fc fb80 	bl	8006dc8 <memp_malloc>
 800a6c8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d110      	bne.n	800a6f2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff8e 	bl	800a5f4 <ip_reass_remove_oldest_datagram>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	dc03      	bgt.n	800a6e8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	f7fc fb71 	bl	8006dc8 <memp_malloc>
 800a6e6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e016      	b.n	800a720 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 fe02 	bl	800b300 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	220f      	movs	r2, #15
 800a700:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a702:	4b09      	ldr	r3, [pc, #36]	; (800a728 <ip_reass_enqueue_new_datagram+0x70>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a70a:	4a07      	ldr	r2, [pc, #28]	; (800a728 <ip_reass_enqueue_new_datagram+0x70>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3308      	adds	r3, #8
 800a714:	2214      	movs	r2, #20
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fde3 	bl	800b2e4 <memcpy>
  return ipr;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2000840c 	.word	0x2000840c

0800a72c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a736:	4b10      	ldr	r3, [pc, #64]	; (800a778 <ip_reass_dequeue_datagram+0x4c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d104      	bne.n	800a74a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a0c      	ldr	r2, [pc, #48]	; (800a778 <ip_reass_dequeue_datagram+0x4c>)
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e00d      	b.n	800a766 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <ip_reass_dequeue_datagram+0x32>
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <ip_reass_dequeue_datagram+0x50>)
 800a752:	f240 1245 	movw	r2, #325	; 0x145
 800a756:	490a      	ldr	r1, [pc, #40]	; (800a780 <ip_reass_dequeue_datagram+0x54>)
 800a758:	480a      	ldr	r0, [pc, #40]	; (800a784 <ip_reass_dequeue_datagram+0x58>)
 800a75a:	f000 fdd9 	bl	800b310 <iprintf>
    prev->next = ipr->next;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	2001      	movs	r0, #1
 800a76a:	f7fc fb9d 	bl	8006ea8 <memp_free>
}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	2000840c 	.word	0x2000840c
 800a77c:	0800d678 	.word	0x0800d678
 800a780:	0800d740 	.word	0x0800d740
 800a784:	0800d6c0 	.word	0x0800d6c0

0800a788 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08c      	sub	sp, #48	; 0x30
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a794:	2300      	movs	r3, #0
 800a796:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a798:	2301      	movs	r3, #1
 800a79a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	885b      	ldrh	r3, [r3, #2]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fb feb1 	bl	8006510 <lwip_htons>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a7c0:	7e7b      	ldrb	r3, [r7, #25]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	8b7a      	ldrh	r2, [r7, #26]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d202      	bcs.n	800a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ce:	e135      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a7d0:	7e7b      	ldrb	r3, [r7, #25]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	8b7a      	ldrh	r2, [r7, #26]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	88db      	ldrh	r3, [r3, #6]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fb fe95 	bl	8006510 <lwip_htons>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	701a      	strb	r2, [r3, #0]
 800a7fe:	2200      	movs	r2, #0
 800a800:	705a      	strb	r2, [r3, #1]
 800a802:	2200      	movs	r2, #0
 800a804:	709a      	strb	r2, [r3, #2]
 800a806:	2200      	movs	r2, #0
 800a808:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	8afa      	ldrh	r2, [r7, #22]
 800a80e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a810:	8afa      	ldrh	r2, [r7, #22]
 800a812:	8b7b      	ldrh	r3, [r7, #26]
 800a814:	4413      	add	r3, r2
 800a816:	b29a      	uxth	r2, r3
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	88db      	ldrh	r3, [r3, #6]
 800a820:	b29b      	uxth	r3, r3
 800a822:	8afa      	ldrh	r2, [r7, #22]
 800a824:	429a      	cmp	r2, r3
 800a826:	d902      	bls.n	800a82e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a82c:	e106      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
 800a834:	e068      	b.n	800a908 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	889b      	ldrh	r3, [r3, #4]
 800a840:	b29a      	uxth	r2, r3
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	889b      	ldrh	r3, [r3, #4]
 800a846:	b29b      	uxth	r3, r3
 800a848:	429a      	cmp	r2, r3
 800a84a:	d235      	bcs.n	800a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a850:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d020      	beq.n	800a89a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	889b      	ldrh	r3, [r3, #4]
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	88db      	ldrh	r3, [r3, #6]
 800a862:	b29b      	uxth	r3, r3
 800a864:	429a      	cmp	r2, r3
 800a866:	d307      	bcc.n	800a878 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86a:	88db      	ldrh	r3, [r3, #6]
 800a86c:	b29a      	uxth	r2, r3
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	889b      	ldrh	r3, [r3, #4]
 800a872:	b29b      	uxth	r3, r3
 800a874:	429a      	cmp	r2, r3
 800a876:	d902      	bls.n	800a87e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a87c:	e0de      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	88db      	ldrh	r3, [r3, #6]
 800a888:	b29a      	uxth	r2, r3
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	889b      	ldrh	r3, [r3, #4]
 800a88e:	b29b      	uxth	r3, r3
 800a890:	429a      	cmp	r2, r3
 800a892:	d03d      	beq.n	800a910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a898:	e03a      	b.n	800a910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	88db      	ldrh	r3, [r3, #6]
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	889b      	ldrh	r3, [r3, #4]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d902      	bls.n	800a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ae:	e0c5      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	605a      	str	r2, [r3, #4]
      break;
 800a8b6:	e02b      	b.n	800a910 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ba:	889b      	ldrh	r3, [r3, #4]
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	889b      	ldrh	r3, [r3, #4]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d102      	bne.n	800a8ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8cc:	e0b6      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d0:	889b      	ldrh	r3, [r3, #4]
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	88db      	ldrh	r3, [r3, #6]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d202      	bcs.n	800a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8e2:	e0ab      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	88db      	ldrh	r3, [r3, #6]
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	889b      	ldrh	r3, [r3, #4]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d001      	beq.n	800a8fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d193      	bne.n	800a836 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a90e:	e000      	b.n	800a912 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a910:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	2b00      	cmp	r3, #0
 800a916:	d12d      	bne.n	800a974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d01c      	beq.n	800a958 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	88db      	ldrh	r3, [r3, #6]
 800a922:	b29a      	uxth	r2, r3
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	889b      	ldrh	r3, [r3, #4]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d906      	bls.n	800a93c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a92e:	4b45      	ldr	r3, [pc, #276]	; (800aa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a930:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a934:	4944      	ldr	r1, [pc, #272]	; (800aa48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a936:	4845      	ldr	r0, [pc, #276]	; (800aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a938:	f000 fcea 	bl	800b310 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	88db      	ldrh	r3, [r3, #6]
 800a946:	b29a      	uxth	r2, r3
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	889b      	ldrh	r3, [r3, #4]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	429a      	cmp	r2, r3
 800a950:	d010      	beq.n	800a974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	e00d      	b.n	800a974 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a960:	4b38      	ldr	r3, [pc, #224]	; (800aa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a962:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a966:	493a      	ldr	r1, [pc, #232]	; (800aa50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a968:	4838      	ldr	r0, [pc, #224]	; (800aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a96a:	f000 fcd1 	bl	800b310 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	7f9b      	ldrb	r3, [r3, #30]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d059      	beq.n	800aa3a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d04f      	beq.n	800aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d006      	beq.n	800a9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	889b      	ldrh	r3, [r3, #4]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d002      	beq.n	800a9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	623b      	str	r3, [r7, #32]
 800a9a6:	e041      	b.n	800aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a9b2:	e012      	b.n	800a9da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	88db      	ldrh	r3, [r3, #6]
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	889b      	ldrh	r3, [r3, #4]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d002      	beq.n	800a9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	623b      	str	r3, [r7, #32]
            break;
 800a9ce:	e007      	b.n	800a9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1e9      	bne.n	800a9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d022      	beq.n	800aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a9ee:	4b15      	ldr	r3, [pc, #84]	; (800aa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a9f0:	f240 12df 	movw	r2, #479	; 0x1df
 800a9f4:	4917      	ldr	r1, [pc, #92]	; (800aa54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a9f6:	4815      	ldr	r0, [pc, #84]	; (800aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a9f8:	f000 fc8a 	bl	800b310 <iprintf>
          LWIP_ASSERT("sanity check",
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d106      	bne.n	800aa16 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800aa08:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aa0e:	4911      	ldr	r1, [pc, #68]	; (800aa54 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800aa10:	480e      	ldr	r0, [pc, #56]	; (800aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa12:	f000 fc7d 	bl	800b310 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d006      	beq.n	800aa2c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800aa1e:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aa20:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800aa24:	490c      	ldr	r1, [pc, #48]	; (800aa58 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800aa26:	4809      	ldr	r0, [pc, #36]	; (800aa4c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800aa28:	f000 fc72 	bl	800b310 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	bf14      	ite	ne
 800aa32:	2301      	movne	r3, #1
 800aa34:	2300      	moveq	r3, #0
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	e000      	b.n	800aa3c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3730      	adds	r7, #48	; 0x30
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	0800d678 	.word	0x0800d678
 800aa48:	0800d75c 	.word	0x0800d75c
 800aa4c:	0800d6c0 	.word	0x0800d6c0
 800aa50:	0800d77c 	.word	0x0800d77c
 800aa54:	0800d7b4 	.word	0x0800d7b4
 800aa58:	0800d7c4 	.word	0x0800d7c4

0800aa5c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b08e      	sub	sp, #56	; 0x38
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f003 030f 	and.w	r3, r3, #15
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b14      	cmp	r3, #20
 800aa7a:	f040 8171 	bne.w	800ad60 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	88db      	ldrh	r3, [r3, #6]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fb fd43 	bl	8006510 <lwip_htons>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	885b      	ldrh	r3, [r3, #2]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fb fd37 	bl	8006510 <lwip_htons>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800aab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aabe:	429a      	cmp	r2, r3
 800aac0:	f0c0 8150 	bcc.w	800ad64 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800aac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7fd f8b5 	bl	8007c40 <pbuf_clen>
 800aad6:	4603      	mov	r3, r0
 800aad8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800aada:	4b8c      	ldr	r3, [pc, #560]	; (800ad0c <ip4_reass+0x2b0>)
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	8c3b      	ldrh	r3, [r7, #32]
 800aae2:	4413      	add	r3, r2
 800aae4:	2b0a      	cmp	r3, #10
 800aae6:	dd10      	ble.n	800ab0a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800aae8:	8c3b      	ldrh	r3, [r7, #32]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaee:	f7ff fd81 	bl	800a5f4 <ip_reass_remove_oldest_datagram>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 8137 	beq.w	800ad68 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800aafa:	4b84      	ldr	r3, [pc, #528]	; (800ad0c <ip4_reass+0x2b0>)
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	8c3b      	ldrh	r3, [r7, #32]
 800ab02:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ab04:	2b0a      	cmp	r3, #10
 800ab06:	f300 812f 	bgt.w	800ad68 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ab0a:	4b81      	ldr	r3, [pc, #516]	; (800ad10 <ip4_reass+0x2b4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ab10:	e015      	b.n	800ab3e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	695a      	ldr	r2, [r3, #20]
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d10c      	bne.n	800ab38 <ip4_reass+0xdc>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d106      	bne.n	800ab38 <ip4_reass+0xdc>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	899a      	ldrh	r2, [r3, #12]
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	889b      	ldrh	r3, [r3, #4]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d006      	beq.n	800ab46 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e6      	bne.n	800ab12 <ip4_reass+0xb6>
 800ab44:	e000      	b.n	800ab48 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ab46:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ab4e:	8c3b      	ldrh	r3, [r7, #32]
 800ab50:	4619      	mov	r1, r3
 800ab52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab54:	f7ff fdb0 	bl	800a6b8 <ip_reass_enqueue_new_datagram>
 800ab58:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d11c      	bne.n	800ab9a <ip4_reass+0x13e>
      goto nullreturn;
 800ab60:	e105      	b.n	800ad6e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	88db      	ldrh	r3, [r3, #6]
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fb fcd1 	bl	8006510 <lwip_htons>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d110      	bne.n	800ab9a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	89db      	ldrh	r3, [r3, #14]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fb fcc7 	bl	8006510 <lwip_htons>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	3308      	adds	r3, #8
 800ab90:	2214      	movs	r2, #20
 800ab92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fba5 	bl	800b2e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	88db      	ldrh	r3, [r3, #6]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	f003 0320 	and.w	r3, r3, #32
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bf0c      	ite	eq
 800aba8:	2301      	moveq	r3, #1
 800abaa:	2300      	movne	r3, #0
 800abac:	b2db      	uxtb	r3, r3
 800abae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00e      	beq.n	800abd4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800abb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800abb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800abba:	4413      	add	r3, r2
 800abbc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800abbe:	8b7a      	ldrh	r2, [r7, #26]
 800abc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f0c0 80a0 	bcc.w	800ad08 <ip4_reass+0x2ac>
 800abc8:	8b7b      	ldrh	r3, [r7, #26]
 800abca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800abce:	4293      	cmp	r3, r2
 800abd0:	f200 809a 	bhi.w	800ad08 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800abd4:	69fa      	ldr	r2, [r7, #28]
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abda:	f7ff fdd5 	bl	800a788 <ip_reass_chain_frag_into_datagram_and_validate>
 800abde:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe6:	f000 809b 	beq.w	800ad20 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800abea:	4b48      	ldr	r3, [pc, #288]	; (800ad0c <ip4_reass+0x2b0>)
 800abec:	881a      	ldrh	r2, [r3, #0]
 800abee:	8c3b      	ldrh	r3, [r7, #32]
 800abf0:	4413      	add	r3, r2
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	4b45      	ldr	r3, [pc, #276]	; (800ad0c <ip4_reass+0x2b0>)
 800abf6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00d      	beq.n	800ac1a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800abfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac02:	4413      	add	r3, r2
 800ac04:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	8a7a      	ldrh	r2, [r7, #18]
 800ac0a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	7f9b      	ldrb	r3, [r3, #30]
 800ac10:	f043 0301 	orr.w	r3, r3, #1
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d171      	bne.n	800ad04 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	8b9b      	ldrh	r3, [r3, #28]
 800ac24:	3314      	adds	r3, #20
 800ac26:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	2214      	movs	r2, #20
 800ac40:	4619      	mov	r1, r3
 800ac42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac44:	f000 fb4e 	bl	800b2e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ac48:	8a3b      	ldrh	r3, [r7, #16]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fb fc60 	bl	8006510 <lwip_htons>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	719a      	strb	r2, [r3, #6]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	2200      	movs	r2, #0
 800ac66:	729a      	strb	r2, [r3, #10]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ac72:	e00d      	b.n	800ac90 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ac74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ac7a:	2114      	movs	r1, #20
 800ac7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ac7e:	f7fc fed1 	bl	8007a24 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ac82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7fd f815 	bl	8007cb4 <pbuf_cat>
      r = iprh->next_pbuf;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1ee      	bne.n	800ac74 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ac96:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <ip4_reass+0x2b4>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d102      	bne.n	800aca6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aca4:	e010      	b.n	800acc8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <ip4_reass+0x2b4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acac:	e007      	b.n	800acbe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d006      	beq.n	800acc6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1f4      	bne.n	800acae <ip4_reass+0x252>
 800acc4:	e000      	b.n	800acc8 <ip4_reass+0x26c>
          break;
 800acc6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800acc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800accc:	f7ff fd2e 	bl	800a72c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7fc ffb5 	bl	8007c40 <pbuf_clen>
 800acd6:	4603      	mov	r3, r0
 800acd8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800acda:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <ip4_reass+0x2b0>)
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	8c3a      	ldrh	r2, [r7, #32]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d906      	bls.n	800acf2 <ip4_reass+0x296>
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <ip4_reass+0x2b8>)
 800ace6:	f240 229b 	movw	r2, #667	; 0x29b
 800acea:	490b      	ldr	r1, [pc, #44]	; (800ad18 <ip4_reass+0x2bc>)
 800acec:	480b      	ldr	r0, [pc, #44]	; (800ad1c <ip4_reass+0x2c0>)
 800acee:	f000 fb0f 	bl	800b310 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800acf2:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <ip4_reass+0x2b0>)
 800acf4:	881a      	ldrh	r2, [r3, #0]
 800acf6:	8c3b      	ldrh	r3, [r7, #32]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <ip4_reass+0x2b0>)
 800acfe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	e038      	b.n	800ad76 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	e036      	b.n	800ad76 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ad08:	bf00      	nop
 800ad0a:	e00a      	b.n	800ad22 <ip4_reass+0x2c6>
 800ad0c:	20008410 	.word	0x20008410
 800ad10:	2000840c 	.word	0x2000840c
 800ad14:	0800d678 	.word	0x0800d678
 800ad18:	0800d7e8 	.word	0x0800d7e8
 800ad1c:	0800d6c0 	.word	0x0800d6c0
    goto nullreturn_ipr;
 800ad20:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d106      	bne.n	800ad36 <ip4_reass+0x2da>
 800ad28:	4b15      	ldr	r3, [pc, #84]	; (800ad80 <ip4_reass+0x324>)
 800ad2a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ad2e:	4915      	ldr	r1, [pc, #84]	; (800ad84 <ip4_reass+0x328>)
 800ad30:	4815      	ldr	r0, [pc, #84]	; (800ad88 <ip4_reass+0x32c>)
 800ad32:	f000 faed 	bl	800b310 <iprintf>
  if (ipr->p == NULL) {
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d116      	bne.n	800ad6c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <ip4_reass+0x330>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d006      	beq.n	800ad56 <ip4_reass+0x2fa>
 800ad48:	4b0d      	ldr	r3, [pc, #52]	; (800ad80 <ip4_reass+0x324>)
 800ad4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ad4e:	4910      	ldr	r1, [pc, #64]	; (800ad90 <ip4_reass+0x334>)
 800ad50:	480d      	ldr	r0, [pc, #52]	; (800ad88 <ip4_reass+0x32c>)
 800ad52:	f000 fadd 	bl	800b310 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ad56:	2100      	movs	r1, #0
 800ad58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad5a:	f7ff fce7 	bl	800a72c <ip_reass_dequeue_datagram>
 800ad5e:	e006      	b.n	800ad6e <ip4_reass+0x312>
    goto nullreturn;
 800ad60:	bf00      	nop
 800ad62:	e004      	b.n	800ad6e <ip4_reass+0x312>
    goto nullreturn;
 800ad64:	bf00      	nop
 800ad66:	e002      	b.n	800ad6e <ip4_reass+0x312>
      goto nullreturn;
 800ad68:	bf00      	nop
 800ad6a:	e000      	b.n	800ad6e <ip4_reass+0x312>
  }

nullreturn:
 800ad6c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7fc fede 	bl	8007b30 <pbuf_free>
  return NULL;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3738      	adds	r7, #56	; 0x38
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	0800d678 	.word	0x0800d678
 800ad84:	0800d804 	.word	0x0800d804
 800ad88:	0800d6c0 	.word	0x0800d6c0
 800ad8c:	2000840c 	.word	0x2000840c
 800ad90:	0800d810 	.word	0x0800d810

0800ad94 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ad98:	2002      	movs	r0, #2
 800ad9a:	f7fc f815 	bl	8006dc8 <memp_malloc>
 800ad9e:	4603      	mov	r3, r0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800adb2:	4b07      	ldr	r3, [pc, #28]	; (800add0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800adb4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800adb8:	4906      	ldr	r1, [pc, #24]	; (800add4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800adba:	4807      	ldr	r0, [pc, #28]	; (800add8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800adbc:	f000 faa8 	bl	800b310 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	2002      	movs	r0, #2
 800adc4:	f7fc f870 	bl	8006ea8 <memp_free>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	0800d678 	.word	0x0800d678
 800add4:	0800d830 	.word	0x0800d830
 800add8:	0800d6c0 	.word	0x0800d6c0

0800addc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <ipfrag_free_pbuf_custom+0x20>
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <ipfrag_free_pbuf_custom+0x58>)
 800adf0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800adf4:	4910      	ldr	r1, [pc, #64]	; (800ae38 <ipfrag_free_pbuf_custom+0x5c>)
 800adf6:	4811      	ldr	r0, [pc, #68]	; (800ae3c <ipfrag_free_pbuf_custom+0x60>)
 800adf8:	f000 fa8a 	bl	800b310 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d006      	beq.n	800ae12 <ipfrag_free_pbuf_custom+0x36>
 800ae04:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <ipfrag_free_pbuf_custom+0x58>)
 800ae06:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ae0a:	490d      	ldr	r1, [pc, #52]	; (800ae40 <ipfrag_free_pbuf_custom+0x64>)
 800ae0c:	480b      	ldr	r0, [pc, #44]	; (800ae3c <ipfrag_free_pbuf_custom+0x60>)
 800ae0e:	f000 fa7f 	bl	800b310 <iprintf>
  if (pcr->original != NULL) {
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fc fe86 	bl	8007b30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7ff ffbd 	bl	800ada4 <ip_frag_free_pbuf_custom_ref>
}
 800ae2a:	bf00      	nop
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	0800d678 	.word	0x0800d678
 800ae38:	0800d83c 	.word	0x0800d83c
 800ae3c:	0800d6c0 	.word	0x0800d6c0
 800ae40:	0800d848 	.word	0x0800d848

0800ae44 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b094      	sub	sp, #80	; 0x50
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ae5a:	3b14      	subs	r3, #20
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da00      	bge.n	800ae62 <ip4_frag+0x1e>
 800ae60:	3307      	adds	r3, #7
 800ae62:	10db      	asrs	r3, r3, #3
 800ae64:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ae66:	2314      	movs	r3, #20
 800ae68:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 030f 	and.w	r3, r3, #15
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b14      	cmp	r3, #20
 800ae84:	d002      	beq.n	800ae8c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ae86:	f06f 0305 	mvn.w	r3, #5
 800ae8a:	e110      	b.n	800b0ae <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	895b      	ldrh	r3, [r3, #10]
 800ae90:	2b13      	cmp	r3, #19
 800ae92:	d809      	bhi.n	800aea8 <ip4_frag+0x64>
 800ae94:	4b88      	ldr	r3, [pc, #544]	; (800b0b8 <ip4_frag+0x274>)
 800ae96:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ae9a:	4988      	ldr	r1, [pc, #544]	; (800b0bc <ip4_frag+0x278>)
 800ae9c:	4888      	ldr	r0, [pc, #544]	; (800b0c0 <ip4_frag+0x27c>)
 800ae9e:	f000 fa37 	bl	800b310 <iprintf>
 800aea2:	f06f 0305 	mvn.w	r3, #5
 800aea6:	e102      	b.n	800b0ae <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	88db      	ldrh	r3, [r3, #6]
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fb fb2e 	bl	8006510 <lwip_htons>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800aeb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aeba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800aec2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	891b      	ldrh	r3, [r3, #8]
 800aece:	3b14      	subs	r3, #20
 800aed0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800aed4:	e0e1      	b.n	800b09a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800aed6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aed8:	00db      	lsls	r3, r3, #3
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aee0:	4293      	cmp	r3, r2
 800aee2:	bf28      	it	cs
 800aee4:	4613      	movcs	r3, r2
 800aee6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800aee8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aeec:	2114      	movs	r1, #20
 800aeee:	200e      	movs	r0, #14
 800aef0:	f7fc fb3c 	bl	800756c <pbuf_alloc>
 800aef4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 80d5 	beq.w	800b0a8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	895b      	ldrh	r3, [r3, #10]
 800af02:	2b13      	cmp	r3, #19
 800af04:	d806      	bhi.n	800af14 <ip4_frag+0xd0>
 800af06:	4b6c      	ldr	r3, [pc, #432]	; (800b0b8 <ip4_frag+0x274>)
 800af08:	f44f 7249 	mov.w	r2, #804	; 0x324
 800af0c:	496d      	ldr	r1, [pc, #436]	; (800b0c4 <ip4_frag+0x280>)
 800af0e:	486c      	ldr	r0, [pc, #432]	; (800b0c0 <ip4_frag+0x27c>)
 800af10:	f000 f9fe 	bl	800b310 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	2214      	movs	r2, #20
 800af1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 f9e1 	bl	800b2e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800af28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800af2e:	e064      	b.n	800affa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	895a      	ldrh	r2, [r3, #10]
 800af34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	895b      	ldrh	r3, [r3, #10]
 800af3e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800af40:	429a      	cmp	r2, r3
 800af42:	d906      	bls.n	800af52 <ip4_frag+0x10e>
 800af44:	4b5c      	ldr	r3, [pc, #368]	; (800b0b8 <ip4_frag+0x274>)
 800af46:	f240 322d 	movw	r2, #813	; 0x32d
 800af4a:	495f      	ldr	r1, [pc, #380]	; (800b0c8 <ip4_frag+0x284>)
 800af4c:	485c      	ldr	r0, [pc, #368]	; (800b0c0 <ip4_frag+0x27c>)
 800af4e:	f000 f9df 	bl	800b310 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800af52:	8bfa      	ldrh	r2, [r7, #30]
 800af54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af58:	4293      	cmp	r3, r2
 800af5a:	bf28      	it	cs
 800af5c:	4613      	movcs	r3, r2
 800af5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800af62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <ip4_frag+0x132>
        poff = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]
        continue;
 800af74:	e041      	b.n	800affa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800af76:	f7ff ff0d 	bl	800ad94 <ip_frag_alloc_pbuf_custom_ref>
 800af7a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d103      	bne.n	800af8a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800af82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af84:	f7fc fdd4 	bl	8007b30 <pbuf_free>
        goto memerr;
 800af88:	e08f      	b.n	800b0aa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800af8a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800af90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af92:	4413      	add	r3, r2
 800af94:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800af98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800af9c:	9201      	str	r2, [sp, #4]
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	4603      	mov	r3, r0
 800afa2:	2241      	movs	r2, #65	; 0x41
 800afa4:	2000      	movs	r0, #0
 800afa6:	f7fc fc09 	bl	80077bc <pbuf_alloced_custom>
 800afaa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800afb2:	69b8      	ldr	r0, [r7, #24]
 800afb4:	f7ff fef6 	bl	800ada4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800afb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afba:	f7fc fdb9 	bl	8007b30 <pbuf_free>
        goto memerr;
 800afbe:	e074      	b.n	800b0aa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7fc fe55 	bl	8007c70 <pbuf_ref>
      pcr->original = p;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	4a3f      	ldr	r2, [pc, #252]	; (800b0cc <ip4_frag+0x288>)
 800afd0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800afd2:	6979      	ldr	r1, [r7, #20]
 800afd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd6:	f7fc fe6d 	bl	8007cb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800afda:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800afde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800afe8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800afec:	2b00      	cmp	r3, #0
 800afee:	d004      	beq.n	800affa <ip4_frag+0x1b6>
        poff = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800affa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800affe:	2b00      	cmp	r3, #0
 800b000:	d196      	bne.n	800af30 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b002:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b004:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b008:	4413      	add	r3, r2
 800b00a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b010:	f1a3 0213 	sub.w	r2, r3, #19
 800b014:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b018:	429a      	cmp	r2, r3
 800b01a:	bfcc      	ite	gt
 800b01c:	2301      	movgt	r3, #1
 800b01e:	2300      	movle	r3, #0
 800b020:	b2db      	uxtb	r3, r3
 800b022:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b024:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b02c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <ip4_frag+0x1f6>
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b03a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b03c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b040:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b042:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b044:	4618      	mov	r0, r3
 800b046:	f7fb fa63 	bl	8006510 <lwip_htons>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b052:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b054:	3314      	adds	r3, #20
 800b056:	b29b      	uxth	r3, r3
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fb fa59 	bl	8006510 <lwip_htons>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	2200      	movs	r2, #0
 800b06a:	729a      	strb	r2, [r3, #10]
 800b06c:	2200      	movs	r2, #0
 800b06e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b078:	68b8      	ldr	r0, [r7, #8]
 800b07a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b07e:	f7fc fd57 	bl	8007b30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b082:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800b08e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b092:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b094:	4413      	add	r3, r2
 800b096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800b09a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f47f af19 	bne.w	800aed6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e002      	b.n	800b0ae <ip4_frag+0x26a>
      goto memerr;
 800b0a8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3748      	adds	r7, #72	; 0x48
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800d678 	.word	0x0800d678
 800b0bc:	0800d854 	.word	0x0800d854
 800b0c0:	0800d6c0 	.word	0x0800d6c0
 800b0c4:	0800d870 	.word	0x0800d870
 800b0c8:	0800d890 	.word	0x0800d890
 800b0cc:	0800addd 	.word	0x0800addd

0800b0d0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800b0da:	230e      	movs	r3, #14
 800b0dc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	895b      	ldrh	r3, [r3, #10]
 800b0e2:	2b0e      	cmp	r3, #14
 800b0e4:	d96e      	bls.n	800b1c4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	7bdb      	ldrb	r3, [r3, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	7b1a      	ldrb	r2, [r3, #12]
 800b106:	7b5b      	ldrb	r3, [r3, #13]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	4313      	orrs	r3, r2
 800b10c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d023      	beq.n	800b162 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d10f      	bne.n	800b142 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	785b      	ldrb	r3, [r3, #1]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d11b      	bne.n	800b162 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b12e:	2b5e      	cmp	r3, #94	; 0x5e
 800b130:	d117      	bne.n	800b162 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	7b5b      	ldrb	r3, [r3, #13]
 800b136:	f043 0310 	orr.w	r3, r3, #16
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	735a      	strb	r2, [r3, #13]
 800b140:	e00f      	b.n	800b162 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2206      	movs	r2, #6
 800b146:	4928      	ldr	r1, [pc, #160]	; (800b1e8 <ethernet_input+0x118>)
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f8bb 	bl	800b2c4 <memcmp>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7b5b      	ldrb	r3, [r3, #13]
 800b158:	f043 0308 	orr.w	r3, r3, #8
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b162:	89fb      	ldrh	r3, [r7, #14]
 800b164:	2b08      	cmp	r3, #8
 800b166:	d003      	beq.n	800b170 <ethernet_input+0xa0>
 800b168:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800b16c:	d014      	beq.n	800b198 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b16e:	e032      	b.n	800b1d6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d024      	beq.n	800b1c8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b17e:	8afb      	ldrh	r3, [r7, #22]
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7fc fc4e 	bl	8007a24 <pbuf_remove_header>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d11e      	bne.n	800b1cc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7fe ff2b 	bl	8009fec <ip4_input>
      break;
 800b196:	e013      	b.n	800b1c0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b19e:	f003 0308 	and.w	r3, r3, #8
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d014      	beq.n	800b1d0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800b1a6:	8afb      	ldrh	r3, [r7, #22]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fc fc3a 	bl	8007a24 <pbuf_remove_header>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10e      	bne.n	800b1d4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7fe f8cb 	bl	8009354 <etharp_input>
      break;
 800b1be:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e00c      	b.n	800b1de <ethernet_input+0x10e>
    goto free_and_return;
 800b1c4:	bf00      	nop
 800b1c6:	e006      	b.n	800b1d6 <ethernet_input+0x106>
        goto free_and_return;
 800b1c8:	bf00      	nop
 800b1ca:	e004      	b.n	800b1d6 <ethernet_input+0x106>
        goto free_and_return;
 800b1cc:	bf00      	nop
 800b1ce:	e002      	b.n	800b1d6 <ethernet_input+0x106>
        goto free_and_return;
 800b1d0:	bf00      	nop
 800b1d2:	e000      	b.n	800b1d6 <ethernet_input+0x106>
        goto free_and_return;
 800b1d4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7fc fcaa 	bl	8007b30 <pbuf_free>
  return ERR_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800d9cc 	.word	0x0800d9cc

0800b1ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b1fa:	8c3b      	ldrh	r3, [r7, #32]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fb f987 	bl	8006510 <lwip_htons>
 800b202:	4603      	mov	r3, r0
 800b204:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800b206:	210e      	movs	r1, #14
 800b208:	68b8      	ldr	r0, [r7, #8]
 800b20a:	f7fc fbfb 	bl	8007a04 <pbuf_add_header>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d125      	bne.n	800b260 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	8afa      	ldrh	r2, [r7, #22]
 800b21e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2206      	movs	r2, #6
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f85c 	bl	800b2e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3306      	adds	r3, #6
 800b230:	2206      	movs	r2, #6
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4618      	mov	r0, r3
 800b236:	f000 f855 	bl	800b2e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b240:	2b06      	cmp	r3, #6
 800b242:	d006      	beq.n	800b252 <ethernet_output+0x66>
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <ethernet_output+0x84>)
 800b246:	f44f 7299 	mov.w	r2, #306	; 0x132
 800b24a:	490a      	ldr	r1, [pc, #40]	; (800b274 <ethernet_output+0x88>)
 800b24c:	480a      	ldr	r0, [pc, #40]	; (800b278 <ethernet_output+0x8c>)
 800b24e:	f000 f85f 	bl	800b310 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	4798      	blx	r3
 800b25c:	4603      	mov	r3, r0
 800b25e:	e002      	b.n	800b266 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800b260:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b262:	f06f 0301 	mvn.w	r3, #1
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	0800d8a0 	.word	0x0800d8a0
 800b274:	0800d8d8 	.word	0x0800d8d8
 800b278:	0800d90c 	.word	0x0800d90c

0800b27c <__libc_init_array>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	4d0d      	ldr	r5, [pc, #52]	; (800b2b4 <__libc_init_array+0x38>)
 800b280:	4c0d      	ldr	r4, [pc, #52]	; (800b2b8 <__libc_init_array+0x3c>)
 800b282:	1b64      	subs	r4, r4, r5
 800b284:	10a4      	asrs	r4, r4, #2
 800b286:	2600      	movs	r6, #0
 800b288:	42a6      	cmp	r6, r4
 800b28a:	d109      	bne.n	800b2a0 <__libc_init_array+0x24>
 800b28c:	4d0b      	ldr	r5, [pc, #44]	; (800b2bc <__libc_init_array+0x40>)
 800b28e:	4c0c      	ldr	r4, [pc, #48]	; (800b2c0 <__libc_init_array+0x44>)
 800b290:	f001 f88e 	bl	800c3b0 <_init>
 800b294:	1b64      	subs	r4, r4, r5
 800b296:	10a4      	asrs	r4, r4, #2
 800b298:	2600      	movs	r6, #0
 800b29a:	42a6      	cmp	r6, r4
 800b29c:	d105      	bne.n	800b2aa <__libc_init_array+0x2e>
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a4:	4798      	blx	r3
 800b2a6:	3601      	adds	r6, #1
 800b2a8:	e7ee      	b.n	800b288 <__libc_init_array+0xc>
 800b2aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ae:	4798      	blx	r3
 800b2b0:	3601      	adds	r6, #1
 800b2b2:	e7f2      	b.n	800b29a <__libc_init_array+0x1e>
 800b2b4:	0800db2c 	.word	0x0800db2c
 800b2b8:	0800db2c 	.word	0x0800db2c
 800b2bc:	0800db2c 	.word	0x0800db2c
 800b2c0:	0800db30 	.word	0x0800db30

0800b2c4 <memcmp>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	3901      	subs	r1, #1
 800b2c8:	4402      	add	r2, r0
 800b2ca:	4290      	cmp	r0, r2
 800b2cc:	d101      	bne.n	800b2d2 <memcmp+0xe>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	e005      	b.n	800b2de <memcmp+0x1a>
 800b2d2:	7803      	ldrb	r3, [r0, #0]
 800b2d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	d001      	beq.n	800b2e0 <memcmp+0x1c>
 800b2dc:	1b18      	subs	r0, r3, r4
 800b2de:	bd10      	pop	{r4, pc}
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	e7f2      	b.n	800b2ca <memcmp+0x6>

0800b2e4 <memcpy>:
 800b2e4:	440a      	add	r2, r1
 800b2e6:	4291      	cmp	r1, r2
 800b2e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2ec:	d100      	bne.n	800b2f0 <memcpy+0xc>
 800b2ee:	4770      	bx	lr
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	d1f9      	bne.n	800b2f2 <memcpy+0xe>
 800b2fe:	bd10      	pop	{r4, pc}

0800b300 <memset>:
 800b300:	4402      	add	r2, r0
 800b302:	4603      	mov	r3, r0
 800b304:	4293      	cmp	r3, r2
 800b306:	d100      	bne.n	800b30a <memset+0xa>
 800b308:	4770      	bx	lr
 800b30a:	f803 1b01 	strb.w	r1, [r3], #1
 800b30e:	e7f9      	b.n	800b304 <memset+0x4>

0800b310 <iprintf>:
 800b310:	b40f      	push	{r0, r1, r2, r3}
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <iprintf+0x2c>)
 800b314:	b513      	push	{r0, r1, r4, lr}
 800b316:	681c      	ldr	r4, [r3, #0]
 800b318:	b124      	cbz	r4, 800b324 <iprintf+0x14>
 800b31a:	69a3      	ldr	r3, [r4, #24]
 800b31c:	b913      	cbnz	r3, 800b324 <iprintf+0x14>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 f8c2 	bl	800b4a8 <__sinit>
 800b324:	ab05      	add	r3, sp, #20
 800b326:	9a04      	ldr	r2, [sp, #16]
 800b328:	68a1      	ldr	r1, [r4, #8]
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fa7f 	bl	800b830 <_vfiprintf_r>
 800b332:	b002      	add	sp, #8
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	b004      	add	sp, #16
 800b33a:	4770      	bx	lr
 800b33c:	20000024 	.word	0x20000024

0800b340 <rand>:
 800b340:	4b16      	ldr	r3, [pc, #88]	; (800b39c <rand+0x5c>)
 800b342:	b510      	push	{r4, lr}
 800b344:	681c      	ldr	r4, [r3, #0]
 800b346:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b348:	b9b3      	cbnz	r3, 800b378 <rand+0x38>
 800b34a:	2018      	movs	r0, #24
 800b34c:	f000 f95e 	bl	800b60c <malloc>
 800b350:	63a0      	str	r0, [r4, #56]	; 0x38
 800b352:	b928      	cbnz	r0, 800b360 <rand+0x20>
 800b354:	4602      	mov	r2, r0
 800b356:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <rand+0x60>)
 800b358:	4812      	ldr	r0, [pc, #72]	; (800b3a4 <rand+0x64>)
 800b35a:	214e      	movs	r1, #78	; 0x4e
 800b35c:	f000 f82e 	bl	800b3bc <__assert_func>
 800b360:	4a11      	ldr	r2, [pc, #68]	; (800b3a8 <rand+0x68>)
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <rand+0x6c>)
 800b364:	e9c0 2300 	strd	r2, r3, [r0]
 800b368:	4b11      	ldr	r3, [pc, #68]	; (800b3b0 <rand+0x70>)
 800b36a:	6083      	str	r3, [r0, #8]
 800b36c:	230b      	movs	r3, #11
 800b36e:	8183      	strh	r3, [r0, #12]
 800b370:	2201      	movs	r2, #1
 800b372:	2300      	movs	r3, #0
 800b374:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b378:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b37a:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <rand+0x74>)
 800b37c:	6920      	ldr	r0, [r4, #16]
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	490d      	ldr	r1, [pc, #52]	; (800b3b8 <rand+0x78>)
 800b382:	4342      	muls	r2, r0
 800b384:	fb01 2203 	mla	r2, r1, r3, r2
 800b388:	fba0 0101 	umull	r0, r1, r0, r1
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	eb42 0001 	adc.w	r0, r2, r1
 800b392:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b396:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b39a:	bd10      	pop	{r4, pc}
 800b39c:	20000024 	.word	0x20000024
 800b3a0:	0800d9e0 	.word	0x0800d9e0
 800b3a4:	0800d9f7 	.word	0x0800d9f7
 800b3a8:	abcd330e 	.word	0xabcd330e
 800b3ac:	e66d1234 	.word	0xe66d1234
 800b3b0:	0005deec 	.word	0x0005deec
 800b3b4:	5851f42d 	.word	0x5851f42d
 800b3b8:	4c957f2d 	.word	0x4c957f2d

0800b3bc <__assert_func>:
 800b3bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3be:	4614      	mov	r4, r2
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <__assert_func+0x2c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	68d8      	ldr	r0, [r3, #12]
 800b3ca:	b14c      	cbz	r4, 800b3e0 <__assert_func+0x24>
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <__assert_func+0x30>)
 800b3ce:	9100      	str	r1, [sp, #0]
 800b3d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3d4:	4906      	ldr	r1, [pc, #24]	; (800b3f0 <__assert_func+0x34>)
 800b3d6:	462b      	mov	r3, r5
 800b3d8:	f000 f8e4 	bl	800b5a4 <fiprintf>
 800b3dc:	f000 fe12 	bl	800c004 <abort>
 800b3e0:	4b04      	ldr	r3, [pc, #16]	; (800b3f4 <__assert_func+0x38>)
 800b3e2:	461c      	mov	r4, r3
 800b3e4:	e7f3      	b.n	800b3ce <__assert_func+0x12>
 800b3e6:	bf00      	nop
 800b3e8:	20000024 	.word	0x20000024
 800b3ec:	0800da52 	.word	0x0800da52
 800b3f0:	0800da5f 	.word	0x0800da5f
 800b3f4:	0800da8d 	.word	0x0800da8d

0800b3f8 <std>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b406:	6083      	str	r3, [r0, #8]
 800b408:	8181      	strh	r1, [r0, #12]
 800b40a:	6643      	str	r3, [r0, #100]	; 0x64
 800b40c:	81c2      	strh	r2, [r0, #14]
 800b40e:	6183      	str	r3, [r0, #24]
 800b410:	4619      	mov	r1, r3
 800b412:	2208      	movs	r2, #8
 800b414:	305c      	adds	r0, #92	; 0x5c
 800b416:	f7ff ff73 	bl	800b300 <memset>
 800b41a:	4b05      	ldr	r3, [pc, #20]	; (800b430 <std+0x38>)
 800b41c:	6263      	str	r3, [r4, #36]	; 0x24
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <std+0x3c>)
 800b420:	62a3      	str	r3, [r4, #40]	; 0x28
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <std+0x40>)
 800b424:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b426:	4b05      	ldr	r3, [pc, #20]	; (800b43c <std+0x44>)
 800b428:	6224      	str	r4, [r4, #32]
 800b42a:	6323      	str	r3, [r4, #48]	; 0x30
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800bdd9 	.word	0x0800bdd9
 800b434:	0800bdfb 	.word	0x0800bdfb
 800b438:	0800be33 	.word	0x0800be33
 800b43c:	0800be57 	.word	0x0800be57

0800b440 <_cleanup_r>:
 800b440:	4901      	ldr	r1, [pc, #4]	; (800b448 <_cleanup_r+0x8>)
 800b442:	f000 b8c1 	b.w	800b5c8 <_fwalk_reent>
 800b446:	bf00      	nop
 800b448:	0800c141 	.word	0x0800c141

0800b44c <__sfmoreglue>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	2268      	movs	r2, #104	; 0x68
 800b450:	1e4d      	subs	r5, r1, #1
 800b452:	4355      	muls	r5, r2
 800b454:	460e      	mov	r6, r1
 800b456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b45a:	f000 f94b 	bl	800b6f4 <_malloc_r>
 800b45e:	4604      	mov	r4, r0
 800b460:	b140      	cbz	r0, 800b474 <__sfmoreglue+0x28>
 800b462:	2100      	movs	r1, #0
 800b464:	e9c0 1600 	strd	r1, r6, [r0]
 800b468:	300c      	adds	r0, #12
 800b46a:	60a0      	str	r0, [r4, #8]
 800b46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b470:	f7ff ff46 	bl	800b300 <memset>
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}

0800b478 <__sfp_lock_acquire>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__sfp_lock_acquire+0x8>)
 800b47a:	f000 b8c5 	b.w	800b608 <__retarget_lock_acquire_recursive>
 800b47e:	bf00      	nop
 800b480:	20008419 	.word	0x20008419

0800b484 <__sfp_lock_release>:
 800b484:	4801      	ldr	r0, [pc, #4]	; (800b48c <__sfp_lock_release+0x8>)
 800b486:	f000 b8c0 	b.w	800b60a <__retarget_lock_release_recursive>
 800b48a:	bf00      	nop
 800b48c:	20008419 	.word	0x20008419

0800b490 <__sinit_lock_acquire>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__sinit_lock_acquire+0x8>)
 800b492:	f000 b8b9 	b.w	800b608 <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	2000841a 	.word	0x2000841a

0800b49c <__sinit_lock_release>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__sinit_lock_release+0x8>)
 800b49e:	f000 b8b4 	b.w	800b60a <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	2000841a 	.word	0x2000841a

0800b4a8 <__sinit>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f7ff fff0 	bl	800b490 <__sinit_lock_acquire>
 800b4b0:	69a3      	ldr	r3, [r4, #24]
 800b4b2:	b11b      	cbz	r3, 800b4bc <__sinit+0x14>
 800b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b8:	f7ff bff0 	b.w	800b49c <__sinit_lock_release>
 800b4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4c2:	4b13      	ldr	r3, [pc, #76]	; (800b510 <__sinit+0x68>)
 800b4c4:	4a13      	ldr	r2, [pc, #76]	; (800b514 <__sinit+0x6c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	bf04      	itt	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	61a3      	streq	r3, [r4, #24]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 f820 	bl	800b518 <__sfp>
 800b4d8:	6060      	str	r0, [r4, #4]
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 f81c 	bl	800b518 <__sfp>
 800b4e0:	60a0      	str	r0, [r4, #8]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f818 	bl	800b518 <__sfp>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	60e0      	str	r0, [r4, #12]
 800b4ec:	2104      	movs	r1, #4
 800b4ee:	6860      	ldr	r0, [r4, #4]
 800b4f0:	f7ff ff82 	bl	800b3f8 <std>
 800b4f4:	68a0      	ldr	r0, [r4, #8]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	2109      	movs	r1, #9
 800b4fa:	f7ff ff7d 	bl	800b3f8 <std>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	2202      	movs	r2, #2
 800b502:	2112      	movs	r1, #18
 800b504:	f7ff ff78 	bl	800b3f8 <std>
 800b508:	2301      	movs	r3, #1
 800b50a:	61a3      	str	r3, [r4, #24]
 800b50c:	e7d2      	b.n	800b4b4 <__sinit+0xc>
 800b50e:	bf00      	nop
 800b510:	0800d9dc 	.word	0x0800d9dc
 800b514:	0800b441 	.word	0x0800b441

0800b518 <__sfp>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	4607      	mov	r7, r0
 800b51c:	f7ff ffac 	bl	800b478 <__sfp_lock_acquire>
 800b520:	4b1e      	ldr	r3, [pc, #120]	; (800b59c <__sfp+0x84>)
 800b522:	681e      	ldr	r6, [r3, #0]
 800b524:	69b3      	ldr	r3, [r6, #24]
 800b526:	b913      	cbnz	r3, 800b52e <__sfp+0x16>
 800b528:	4630      	mov	r0, r6
 800b52a:	f7ff ffbd 	bl	800b4a8 <__sinit>
 800b52e:	3648      	adds	r6, #72	; 0x48
 800b530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b534:	3b01      	subs	r3, #1
 800b536:	d503      	bpl.n	800b540 <__sfp+0x28>
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	b30b      	cbz	r3, 800b580 <__sfp+0x68>
 800b53c:	6836      	ldr	r6, [r6, #0]
 800b53e:	e7f7      	b.n	800b530 <__sfp+0x18>
 800b540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b544:	b9d5      	cbnz	r5, 800b57c <__sfp+0x64>
 800b546:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <__sfp+0x88>)
 800b548:	60e3      	str	r3, [r4, #12]
 800b54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b54e:	6665      	str	r5, [r4, #100]	; 0x64
 800b550:	f000 f859 	bl	800b606 <__retarget_lock_init_recursive>
 800b554:	f7ff ff96 	bl	800b484 <__sfp_lock_release>
 800b558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b560:	6025      	str	r5, [r4, #0]
 800b562:	61a5      	str	r5, [r4, #24]
 800b564:	2208      	movs	r2, #8
 800b566:	4629      	mov	r1, r5
 800b568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b56c:	f7ff fec8 	bl	800b300 <memset>
 800b570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b578:	4620      	mov	r0, r4
 800b57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b57c:	3468      	adds	r4, #104	; 0x68
 800b57e:	e7d9      	b.n	800b534 <__sfp+0x1c>
 800b580:	2104      	movs	r1, #4
 800b582:	4638      	mov	r0, r7
 800b584:	f7ff ff62 	bl	800b44c <__sfmoreglue>
 800b588:	4604      	mov	r4, r0
 800b58a:	6030      	str	r0, [r6, #0]
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1d5      	bne.n	800b53c <__sfp+0x24>
 800b590:	f7ff ff78 	bl	800b484 <__sfp_lock_release>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	e7ee      	b.n	800b578 <__sfp+0x60>
 800b59a:	bf00      	nop
 800b59c:	0800d9dc 	.word	0x0800d9dc
 800b5a0:	ffff0001 	.word	0xffff0001

0800b5a4 <fiprintf>:
 800b5a4:	b40e      	push	{r1, r2, r3}
 800b5a6:	b503      	push	{r0, r1, lr}
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	ab03      	add	r3, sp, #12
 800b5ac:	4805      	ldr	r0, [pc, #20]	; (800b5c4 <fiprintf+0x20>)
 800b5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b2:	6800      	ldr	r0, [r0, #0]
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	f000 f93b 	bl	800b830 <_vfiprintf_r>
 800b5ba:	b002      	add	sp, #8
 800b5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c0:	b003      	add	sp, #12
 800b5c2:	4770      	bx	lr
 800b5c4:	20000024 	.word	0x20000024

0800b5c8 <_fwalk_reent>:
 800b5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	4688      	mov	r8, r1
 800b5d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5d4:	2700      	movs	r7, #0
 800b5d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5da:	f1b9 0901 	subs.w	r9, r9, #1
 800b5de:	d505      	bpl.n	800b5ec <_fwalk_reent+0x24>
 800b5e0:	6824      	ldr	r4, [r4, #0]
 800b5e2:	2c00      	cmp	r4, #0
 800b5e4:	d1f7      	bne.n	800b5d6 <_fwalk_reent+0xe>
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ec:	89ab      	ldrh	r3, [r5, #12]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d907      	bls.n	800b602 <_fwalk_reent+0x3a>
 800b5f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	d003      	beq.n	800b602 <_fwalk_reent+0x3a>
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	47c0      	blx	r8
 800b600:	4307      	orrs	r7, r0
 800b602:	3568      	adds	r5, #104	; 0x68
 800b604:	e7e9      	b.n	800b5da <_fwalk_reent+0x12>

0800b606 <__retarget_lock_init_recursive>:
 800b606:	4770      	bx	lr

0800b608 <__retarget_lock_acquire_recursive>:
 800b608:	4770      	bx	lr

0800b60a <__retarget_lock_release_recursive>:
 800b60a:	4770      	bx	lr

0800b60c <malloc>:
 800b60c:	4b02      	ldr	r3, [pc, #8]	; (800b618 <malloc+0xc>)
 800b60e:	4601      	mov	r1, r0
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	f000 b86f 	b.w	800b6f4 <_malloc_r>
 800b616:	bf00      	nop
 800b618:	20000024 	.word	0x20000024

0800b61c <_free_r>:
 800b61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61e:	2900      	cmp	r1, #0
 800b620:	d044      	beq.n	800b6ac <_free_r+0x90>
 800b622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b626:	9001      	str	r0, [sp, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f1a1 0404 	sub.w	r4, r1, #4
 800b62e:	bfb8      	it	lt
 800b630:	18e4      	addlt	r4, r4, r3
 800b632:	f000 fe39 	bl	800c2a8 <__malloc_lock>
 800b636:	4a1e      	ldr	r2, [pc, #120]	; (800b6b0 <_free_r+0x94>)
 800b638:	9801      	ldr	r0, [sp, #4]
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	b933      	cbnz	r3, 800b64c <_free_r+0x30>
 800b63e:	6063      	str	r3, [r4, #4]
 800b640:	6014      	str	r4, [r2, #0]
 800b642:	b003      	add	sp, #12
 800b644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b648:	f000 be34 	b.w	800c2b4 <__malloc_unlock>
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	d908      	bls.n	800b662 <_free_r+0x46>
 800b650:	6825      	ldr	r5, [r4, #0]
 800b652:	1961      	adds	r1, r4, r5
 800b654:	428b      	cmp	r3, r1
 800b656:	bf01      	itttt	eq
 800b658:	6819      	ldreq	r1, [r3, #0]
 800b65a:	685b      	ldreq	r3, [r3, #4]
 800b65c:	1949      	addeq	r1, r1, r5
 800b65e:	6021      	streq	r1, [r4, #0]
 800b660:	e7ed      	b.n	800b63e <_free_r+0x22>
 800b662:	461a      	mov	r2, r3
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	b10b      	cbz	r3, 800b66c <_free_r+0x50>
 800b668:	42a3      	cmp	r3, r4
 800b66a:	d9fa      	bls.n	800b662 <_free_r+0x46>
 800b66c:	6811      	ldr	r1, [r2, #0]
 800b66e:	1855      	adds	r5, r2, r1
 800b670:	42a5      	cmp	r5, r4
 800b672:	d10b      	bne.n	800b68c <_free_r+0x70>
 800b674:	6824      	ldr	r4, [r4, #0]
 800b676:	4421      	add	r1, r4
 800b678:	1854      	adds	r4, r2, r1
 800b67a:	42a3      	cmp	r3, r4
 800b67c:	6011      	str	r1, [r2, #0]
 800b67e:	d1e0      	bne.n	800b642 <_free_r+0x26>
 800b680:	681c      	ldr	r4, [r3, #0]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	6053      	str	r3, [r2, #4]
 800b686:	4421      	add	r1, r4
 800b688:	6011      	str	r1, [r2, #0]
 800b68a:	e7da      	b.n	800b642 <_free_r+0x26>
 800b68c:	d902      	bls.n	800b694 <_free_r+0x78>
 800b68e:	230c      	movs	r3, #12
 800b690:	6003      	str	r3, [r0, #0]
 800b692:	e7d6      	b.n	800b642 <_free_r+0x26>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	1961      	adds	r1, r4, r5
 800b698:	428b      	cmp	r3, r1
 800b69a:	bf04      	itt	eq
 800b69c:	6819      	ldreq	r1, [r3, #0]
 800b69e:	685b      	ldreq	r3, [r3, #4]
 800b6a0:	6063      	str	r3, [r4, #4]
 800b6a2:	bf04      	itt	eq
 800b6a4:	1949      	addeq	r1, r1, r5
 800b6a6:	6021      	streq	r1, [r4, #0]
 800b6a8:	6054      	str	r4, [r2, #4]
 800b6aa:	e7ca      	b.n	800b642 <_free_r+0x26>
 800b6ac:	b003      	add	sp, #12
 800b6ae:	bd30      	pop	{r4, r5, pc}
 800b6b0:	2000841c 	.word	0x2000841c

0800b6b4 <sbrk_aligned>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	4e0e      	ldr	r6, [pc, #56]	; (800b6f0 <sbrk_aligned+0x3c>)
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	6831      	ldr	r1, [r6, #0]
 800b6bc:	4605      	mov	r5, r0
 800b6be:	b911      	cbnz	r1, 800b6c6 <sbrk_aligned+0x12>
 800b6c0:	f000 fb7a 	bl	800bdb8 <_sbrk_r>
 800b6c4:	6030      	str	r0, [r6, #0]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 fb75 	bl	800bdb8 <_sbrk_r>
 800b6ce:	1c43      	adds	r3, r0, #1
 800b6d0:	d00a      	beq.n	800b6e8 <sbrk_aligned+0x34>
 800b6d2:	1cc4      	adds	r4, r0, #3
 800b6d4:	f024 0403 	bic.w	r4, r4, #3
 800b6d8:	42a0      	cmp	r0, r4
 800b6da:	d007      	beq.n	800b6ec <sbrk_aligned+0x38>
 800b6dc:	1a21      	subs	r1, r4, r0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f000 fb6a 	bl	800bdb8 <_sbrk_r>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d101      	bne.n	800b6ec <sbrk_aligned+0x38>
 800b6e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}
 800b6f0:	20008420 	.word	0x20008420

0800b6f4 <_malloc_r>:
 800b6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f8:	1ccd      	adds	r5, r1, #3
 800b6fa:	f025 0503 	bic.w	r5, r5, #3
 800b6fe:	3508      	adds	r5, #8
 800b700:	2d0c      	cmp	r5, #12
 800b702:	bf38      	it	cc
 800b704:	250c      	movcc	r5, #12
 800b706:	2d00      	cmp	r5, #0
 800b708:	4607      	mov	r7, r0
 800b70a:	db01      	blt.n	800b710 <_malloc_r+0x1c>
 800b70c:	42a9      	cmp	r1, r5
 800b70e:	d905      	bls.n	800b71c <_malloc_r+0x28>
 800b710:	230c      	movs	r3, #12
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	2600      	movs	r6, #0
 800b716:	4630      	mov	r0, r6
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	4e2e      	ldr	r6, [pc, #184]	; (800b7d8 <_malloc_r+0xe4>)
 800b71e:	f000 fdc3 	bl	800c2a8 <__malloc_lock>
 800b722:	6833      	ldr	r3, [r6, #0]
 800b724:	461c      	mov	r4, r3
 800b726:	bb34      	cbnz	r4, 800b776 <_malloc_r+0x82>
 800b728:	4629      	mov	r1, r5
 800b72a:	4638      	mov	r0, r7
 800b72c:	f7ff ffc2 	bl	800b6b4 <sbrk_aligned>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	4604      	mov	r4, r0
 800b734:	d14d      	bne.n	800b7d2 <_malloc_r+0xde>
 800b736:	6834      	ldr	r4, [r6, #0]
 800b738:	4626      	mov	r6, r4
 800b73a:	2e00      	cmp	r6, #0
 800b73c:	d140      	bne.n	800b7c0 <_malloc_r+0xcc>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	4631      	mov	r1, r6
 800b742:	4638      	mov	r0, r7
 800b744:	eb04 0803 	add.w	r8, r4, r3
 800b748:	f000 fb36 	bl	800bdb8 <_sbrk_r>
 800b74c:	4580      	cmp	r8, r0
 800b74e:	d13a      	bne.n	800b7c6 <_malloc_r+0xd2>
 800b750:	6821      	ldr	r1, [r4, #0]
 800b752:	3503      	adds	r5, #3
 800b754:	1a6d      	subs	r5, r5, r1
 800b756:	f025 0503 	bic.w	r5, r5, #3
 800b75a:	3508      	adds	r5, #8
 800b75c:	2d0c      	cmp	r5, #12
 800b75e:	bf38      	it	cc
 800b760:	250c      	movcc	r5, #12
 800b762:	4629      	mov	r1, r5
 800b764:	4638      	mov	r0, r7
 800b766:	f7ff ffa5 	bl	800b6b4 <sbrk_aligned>
 800b76a:	3001      	adds	r0, #1
 800b76c:	d02b      	beq.n	800b7c6 <_malloc_r+0xd2>
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	442b      	add	r3, r5
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	e00e      	b.n	800b794 <_malloc_r+0xa0>
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	1b52      	subs	r2, r2, r5
 800b77a:	d41e      	bmi.n	800b7ba <_malloc_r+0xc6>
 800b77c:	2a0b      	cmp	r2, #11
 800b77e:	d916      	bls.n	800b7ae <_malloc_r+0xba>
 800b780:	1961      	adds	r1, r4, r5
 800b782:	42a3      	cmp	r3, r4
 800b784:	6025      	str	r5, [r4, #0]
 800b786:	bf18      	it	ne
 800b788:	6059      	strne	r1, [r3, #4]
 800b78a:	6863      	ldr	r3, [r4, #4]
 800b78c:	bf08      	it	eq
 800b78e:	6031      	streq	r1, [r6, #0]
 800b790:	5162      	str	r2, [r4, r5]
 800b792:	604b      	str	r3, [r1, #4]
 800b794:	4638      	mov	r0, r7
 800b796:	f104 060b 	add.w	r6, r4, #11
 800b79a:	f000 fd8b 	bl	800c2b4 <__malloc_unlock>
 800b79e:	f026 0607 	bic.w	r6, r6, #7
 800b7a2:	1d23      	adds	r3, r4, #4
 800b7a4:	1af2      	subs	r2, r6, r3
 800b7a6:	d0b6      	beq.n	800b716 <_malloc_r+0x22>
 800b7a8:	1b9b      	subs	r3, r3, r6
 800b7aa:	50a3      	str	r3, [r4, r2]
 800b7ac:	e7b3      	b.n	800b716 <_malloc_r+0x22>
 800b7ae:	6862      	ldr	r2, [r4, #4]
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	bf0c      	ite	eq
 800b7b4:	6032      	streq	r2, [r6, #0]
 800b7b6:	605a      	strne	r2, [r3, #4]
 800b7b8:	e7ec      	b.n	800b794 <_malloc_r+0xa0>
 800b7ba:	4623      	mov	r3, r4
 800b7bc:	6864      	ldr	r4, [r4, #4]
 800b7be:	e7b2      	b.n	800b726 <_malloc_r+0x32>
 800b7c0:	4634      	mov	r4, r6
 800b7c2:	6876      	ldr	r6, [r6, #4]
 800b7c4:	e7b9      	b.n	800b73a <_malloc_r+0x46>
 800b7c6:	230c      	movs	r3, #12
 800b7c8:	603b      	str	r3, [r7, #0]
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	f000 fd72 	bl	800c2b4 <__malloc_unlock>
 800b7d0:	e7a1      	b.n	800b716 <_malloc_r+0x22>
 800b7d2:	6025      	str	r5, [r4, #0]
 800b7d4:	e7de      	b.n	800b794 <_malloc_r+0xa0>
 800b7d6:	bf00      	nop
 800b7d8:	2000841c 	.word	0x2000841c

0800b7dc <__sfputc_r>:
 800b7dc:	6893      	ldr	r3, [r2, #8]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	b410      	push	{r4}
 800b7e4:	6093      	str	r3, [r2, #8]
 800b7e6:	da08      	bge.n	800b7fa <__sfputc_r+0x1e>
 800b7e8:	6994      	ldr	r4, [r2, #24]
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	db01      	blt.n	800b7f2 <__sfputc_r+0x16>
 800b7ee:	290a      	cmp	r1, #10
 800b7f0:	d103      	bne.n	800b7fa <__sfputc_r+0x1e>
 800b7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f6:	f000 bb33 	b.w	800be60 <__swbuf_r>
 800b7fa:	6813      	ldr	r3, [r2, #0]
 800b7fc:	1c58      	adds	r0, r3, #1
 800b7fe:	6010      	str	r0, [r2, #0]
 800b800:	7019      	strb	r1, [r3, #0]
 800b802:	4608      	mov	r0, r1
 800b804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <__sfputs_r>:
 800b80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80c:	4606      	mov	r6, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	4614      	mov	r4, r2
 800b812:	18d5      	adds	r5, r2, r3
 800b814:	42ac      	cmp	r4, r5
 800b816:	d101      	bne.n	800b81c <__sfputs_r+0x12>
 800b818:	2000      	movs	r0, #0
 800b81a:	e007      	b.n	800b82c <__sfputs_r+0x22>
 800b81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b820:	463a      	mov	r2, r7
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ffda 	bl	800b7dc <__sfputc_r>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d1f3      	bne.n	800b814 <__sfputs_r+0xa>
 800b82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b830 <_vfiprintf_r>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	460d      	mov	r5, r1
 800b836:	b09d      	sub	sp, #116	; 0x74
 800b838:	4614      	mov	r4, r2
 800b83a:	4698      	mov	r8, r3
 800b83c:	4606      	mov	r6, r0
 800b83e:	b118      	cbz	r0, 800b848 <_vfiprintf_r+0x18>
 800b840:	6983      	ldr	r3, [r0, #24]
 800b842:	b90b      	cbnz	r3, 800b848 <_vfiprintf_r+0x18>
 800b844:	f7ff fe30 	bl	800b4a8 <__sinit>
 800b848:	4b89      	ldr	r3, [pc, #548]	; (800ba70 <_vfiprintf_r+0x240>)
 800b84a:	429d      	cmp	r5, r3
 800b84c:	d11b      	bne.n	800b886 <_vfiprintf_r+0x56>
 800b84e:	6875      	ldr	r5, [r6, #4]
 800b850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b852:	07d9      	lsls	r1, r3, #31
 800b854:	d405      	bmi.n	800b862 <_vfiprintf_r+0x32>
 800b856:	89ab      	ldrh	r3, [r5, #12]
 800b858:	059a      	lsls	r2, r3, #22
 800b85a:	d402      	bmi.n	800b862 <_vfiprintf_r+0x32>
 800b85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b85e:	f7ff fed3 	bl	800b608 <__retarget_lock_acquire_recursive>
 800b862:	89ab      	ldrh	r3, [r5, #12]
 800b864:	071b      	lsls	r3, r3, #28
 800b866:	d501      	bpl.n	800b86c <_vfiprintf_r+0x3c>
 800b868:	692b      	ldr	r3, [r5, #16]
 800b86a:	b9eb      	cbnz	r3, 800b8a8 <_vfiprintf_r+0x78>
 800b86c:	4629      	mov	r1, r5
 800b86e:	4630      	mov	r0, r6
 800b870:	f000 fb5a 	bl	800bf28 <__swsetup_r>
 800b874:	b1c0      	cbz	r0, 800b8a8 <_vfiprintf_r+0x78>
 800b876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b878:	07dc      	lsls	r4, r3, #31
 800b87a:	d50e      	bpl.n	800b89a <_vfiprintf_r+0x6a>
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b880:	b01d      	add	sp, #116	; 0x74
 800b882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b886:	4b7b      	ldr	r3, [pc, #492]	; (800ba74 <_vfiprintf_r+0x244>)
 800b888:	429d      	cmp	r5, r3
 800b88a:	d101      	bne.n	800b890 <_vfiprintf_r+0x60>
 800b88c:	68b5      	ldr	r5, [r6, #8]
 800b88e:	e7df      	b.n	800b850 <_vfiprintf_r+0x20>
 800b890:	4b79      	ldr	r3, [pc, #484]	; (800ba78 <_vfiprintf_r+0x248>)
 800b892:	429d      	cmp	r5, r3
 800b894:	bf08      	it	eq
 800b896:	68f5      	ldreq	r5, [r6, #12]
 800b898:	e7da      	b.n	800b850 <_vfiprintf_r+0x20>
 800b89a:	89ab      	ldrh	r3, [r5, #12]
 800b89c:	0598      	lsls	r0, r3, #22
 800b89e:	d4ed      	bmi.n	800b87c <_vfiprintf_r+0x4c>
 800b8a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a2:	f7ff feb2 	bl	800b60a <__retarget_lock_release_recursive>
 800b8a6:	e7e9      	b.n	800b87c <_vfiprintf_r+0x4c>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b6:	2330      	movs	r3, #48	; 0x30
 800b8b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba7c <_vfiprintf_r+0x24c>
 800b8bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c0:	f04f 0901 	mov.w	r9, #1
 800b8c4:	4623      	mov	r3, r4
 800b8c6:	469a      	mov	sl, r3
 800b8c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8cc:	b10a      	cbz	r2, 800b8d2 <_vfiprintf_r+0xa2>
 800b8ce:	2a25      	cmp	r2, #37	; 0x25
 800b8d0:	d1f9      	bne.n	800b8c6 <_vfiprintf_r+0x96>
 800b8d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d6:	d00b      	beq.n	800b8f0 <_vfiprintf_r+0xc0>
 800b8d8:	465b      	mov	r3, fp
 800b8da:	4622      	mov	r2, r4
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7ff ff93 	bl	800b80a <__sfputs_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f000 80aa 	beq.w	800ba3e <_vfiprintf_r+0x20e>
 800b8ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ec:	445a      	add	r2, fp
 800b8ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 80a2 	beq.w	800ba3e <_vfiprintf_r+0x20e>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b904:	f10a 0a01 	add.w	sl, sl, #1
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	9307      	str	r3, [sp, #28]
 800b90c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b910:	931a      	str	r3, [sp, #104]	; 0x68
 800b912:	4654      	mov	r4, sl
 800b914:	2205      	movs	r2, #5
 800b916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b91a:	4858      	ldr	r0, [pc, #352]	; (800ba7c <_vfiprintf_r+0x24c>)
 800b91c:	f7f4 fc90 	bl	8000240 <memchr>
 800b920:	9a04      	ldr	r2, [sp, #16]
 800b922:	b9d8      	cbnz	r0, 800b95c <_vfiprintf_r+0x12c>
 800b924:	06d1      	lsls	r1, r2, #27
 800b926:	bf44      	itt	mi
 800b928:	2320      	movmi	r3, #32
 800b92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b92e:	0713      	lsls	r3, r2, #28
 800b930:	bf44      	itt	mi
 800b932:	232b      	movmi	r3, #43	; 0x2b
 800b934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b938:	f89a 3000 	ldrb.w	r3, [sl]
 800b93c:	2b2a      	cmp	r3, #42	; 0x2a
 800b93e:	d015      	beq.n	800b96c <_vfiprintf_r+0x13c>
 800b940:	9a07      	ldr	r2, [sp, #28]
 800b942:	4654      	mov	r4, sl
 800b944:	2000      	movs	r0, #0
 800b946:	f04f 0c0a 	mov.w	ip, #10
 800b94a:	4621      	mov	r1, r4
 800b94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b950:	3b30      	subs	r3, #48	; 0x30
 800b952:	2b09      	cmp	r3, #9
 800b954:	d94e      	bls.n	800b9f4 <_vfiprintf_r+0x1c4>
 800b956:	b1b0      	cbz	r0, 800b986 <_vfiprintf_r+0x156>
 800b958:	9207      	str	r2, [sp, #28]
 800b95a:	e014      	b.n	800b986 <_vfiprintf_r+0x156>
 800b95c:	eba0 0308 	sub.w	r3, r0, r8
 800b960:	fa09 f303 	lsl.w	r3, r9, r3
 800b964:	4313      	orrs	r3, r2
 800b966:	9304      	str	r3, [sp, #16]
 800b968:	46a2      	mov	sl, r4
 800b96a:	e7d2      	b.n	800b912 <_vfiprintf_r+0xe2>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1d19      	adds	r1, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	9103      	str	r1, [sp, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	bfbb      	ittet	lt
 800b978:	425b      	neglt	r3, r3
 800b97a:	f042 0202 	orrlt.w	r2, r2, #2
 800b97e:	9307      	strge	r3, [sp, #28]
 800b980:	9307      	strlt	r3, [sp, #28]
 800b982:	bfb8      	it	lt
 800b984:	9204      	strlt	r2, [sp, #16]
 800b986:	7823      	ldrb	r3, [r4, #0]
 800b988:	2b2e      	cmp	r3, #46	; 0x2e
 800b98a:	d10c      	bne.n	800b9a6 <_vfiprintf_r+0x176>
 800b98c:	7863      	ldrb	r3, [r4, #1]
 800b98e:	2b2a      	cmp	r3, #42	; 0x2a
 800b990:	d135      	bne.n	800b9fe <_vfiprintf_r+0x1ce>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	1d1a      	adds	r2, r3, #4
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	9203      	str	r2, [sp, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	bfb8      	it	lt
 800b99e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9a2:	3402      	adds	r4, #2
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba8c <_vfiprintf_r+0x25c>
 800b9aa:	7821      	ldrb	r1, [r4, #0]
 800b9ac:	2203      	movs	r2, #3
 800b9ae:	4650      	mov	r0, sl
 800b9b0:	f7f4 fc46 	bl	8000240 <memchr>
 800b9b4:	b140      	cbz	r0, 800b9c8 <_vfiprintf_r+0x198>
 800b9b6:	2340      	movs	r3, #64	; 0x40
 800b9b8:	eba0 000a 	sub.w	r0, r0, sl
 800b9bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b9c0:	9b04      	ldr	r3, [sp, #16]
 800b9c2:	4303      	orrs	r3, r0
 800b9c4:	3401      	adds	r4, #1
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9cc:	482c      	ldr	r0, [pc, #176]	; (800ba80 <_vfiprintf_r+0x250>)
 800b9ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9d2:	2206      	movs	r2, #6
 800b9d4:	f7f4 fc34 	bl	8000240 <memchr>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d03f      	beq.n	800ba5c <_vfiprintf_r+0x22c>
 800b9dc:	4b29      	ldr	r3, [pc, #164]	; (800ba84 <_vfiprintf_r+0x254>)
 800b9de:	bb1b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x1f8>
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	3307      	adds	r3, #7
 800b9e4:	f023 0307 	bic.w	r3, r3, #7
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	9303      	str	r3, [sp, #12]
 800b9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ee:	443b      	add	r3, r7
 800b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9f2:	e767      	b.n	800b8c4 <_vfiprintf_r+0x94>
 800b9f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	e7a5      	b.n	800b94a <_vfiprintf_r+0x11a>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	3401      	adds	r4, #1
 800ba02:	9305      	str	r3, [sp, #20]
 800ba04:	4619      	mov	r1, r3
 800ba06:	f04f 0c0a 	mov.w	ip, #10
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba10:	3a30      	subs	r2, #48	; 0x30
 800ba12:	2a09      	cmp	r2, #9
 800ba14:	d903      	bls.n	800ba1e <_vfiprintf_r+0x1ee>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0c5      	beq.n	800b9a6 <_vfiprintf_r+0x176>
 800ba1a:	9105      	str	r1, [sp, #20]
 800ba1c:	e7c3      	b.n	800b9a6 <_vfiprintf_r+0x176>
 800ba1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba22:	4604      	mov	r4, r0
 800ba24:	2301      	movs	r3, #1
 800ba26:	e7f0      	b.n	800ba0a <_vfiprintf_r+0x1da>
 800ba28:	ab03      	add	r3, sp, #12
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	462a      	mov	r2, r5
 800ba2e:	4b16      	ldr	r3, [pc, #88]	; (800ba88 <_vfiprintf_r+0x258>)
 800ba30:	a904      	add	r1, sp, #16
 800ba32:	4630      	mov	r0, r6
 800ba34:	f3af 8000 	nop.w
 800ba38:	4607      	mov	r7, r0
 800ba3a:	1c78      	adds	r0, r7, #1
 800ba3c:	d1d6      	bne.n	800b9ec <_vfiprintf_r+0x1bc>
 800ba3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba40:	07d9      	lsls	r1, r3, #31
 800ba42:	d405      	bmi.n	800ba50 <_vfiprintf_r+0x220>
 800ba44:	89ab      	ldrh	r3, [r5, #12]
 800ba46:	059a      	lsls	r2, r3, #22
 800ba48:	d402      	bmi.n	800ba50 <_vfiprintf_r+0x220>
 800ba4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba4c:	f7ff fddd 	bl	800b60a <__retarget_lock_release_recursive>
 800ba50:	89ab      	ldrh	r3, [r5, #12]
 800ba52:	065b      	lsls	r3, r3, #25
 800ba54:	f53f af12 	bmi.w	800b87c <_vfiprintf_r+0x4c>
 800ba58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba5a:	e711      	b.n	800b880 <_vfiprintf_r+0x50>
 800ba5c:	ab03      	add	r3, sp, #12
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	462a      	mov	r2, r5
 800ba62:	4b09      	ldr	r3, [pc, #36]	; (800ba88 <_vfiprintf_r+0x258>)
 800ba64:	a904      	add	r1, sp, #16
 800ba66:	4630      	mov	r0, r6
 800ba68:	f000 f880 	bl	800bb6c <_printf_i>
 800ba6c:	e7e4      	b.n	800ba38 <_vfiprintf_r+0x208>
 800ba6e:	bf00      	nop
 800ba70:	0800dab0 	.word	0x0800dab0
 800ba74:	0800dad0 	.word	0x0800dad0
 800ba78:	0800da90 	.word	0x0800da90
 800ba7c:	0800daf0 	.word	0x0800daf0
 800ba80:	0800dafa 	.word	0x0800dafa
 800ba84:	00000000 	.word	0x00000000
 800ba88:	0800b80b 	.word	0x0800b80b
 800ba8c:	0800daf6 	.word	0x0800daf6

0800ba90 <_printf_common>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	4616      	mov	r6, r2
 800ba96:	4699      	mov	r9, r3
 800ba98:	688a      	ldr	r2, [r1, #8]
 800ba9a:	690b      	ldr	r3, [r1, #16]
 800ba9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baa0:	4293      	cmp	r3, r2
 800baa2:	bfb8      	it	lt
 800baa4:	4613      	movlt	r3, r2
 800baa6:	6033      	str	r3, [r6, #0]
 800baa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baac:	4607      	mov	r7, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	b10a      	cbz	r2, 800bab6 <_printf_common+0x26>
 800bab2:	3301      	adds	r3, #1
 800bab4:	6033      	str	r3, [r6, #0]
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	0699      	lsls	r1, r3, #26
 800baba:	bf42      	ittt	mi
 800babc:	6833      	ldrmi	r3, [r6, #0]
 800babe:	3302      	addmi	r3, #2
 800bac0:	6033      	strmi	r3, [r6, #0]
 800bac2:	6825      	ldr	r5, [r4, #0]
 800bac4:	f015 0506 	ands.w	r5, r5, #6
 800bac8:	d106      	bne.n	800bad8 <_printf_common+0x48>
 800baca:	f104 0a19 	add.w	sl, r4, #25
 800bace:	68e3      	ldr	r3, [r4, #12]
 800bad0:	6832      	ldr	r2, [r6, #0]
 800bad2:	1a9b      	subs	r3, r3, r2
 800bad4:	42ab      	cmp	r3, r5
 800bad6:	dc26      	bgt.n	800bb26 <_printf_common+0x96>
 800bad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800badc:	1e13      	subs	r3, r2, #0
 800bade:	6822      	ldr	r2, [r4, #0]
 800bae0:	bf18      	it	ne
 800bae2:	2301      	movne	r3, #1
 800bae4:	0692      	lsls	r2, r2, #26
 800bae6:	d42b      	bmi.n	800bb40 <_printf_common+0xb0>
 800bae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baec:	4649      	mov	r1, r9
 800baee:	4638      	mov	r0, r7
 800baf0:	47c0      	blx	r8
 800baf2:	3001      	adds	r0, #1
 800baf4:	d01e      	beq.n	800bb34 <_printf_common+0xa4>
 800baf6:	6823      	ldr	r3, [r4, #0]
 800baf8:	68e5      	ldr	r5, [r4, #12]
 800bafa:	6832      	ldr	r2, [r6, #0]
 800bafc:	f003 0306 	and.w	r3, r3, #6
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	bf08      	it	eq
 800bb04:	1aad      	subeq	r5, r5, r2
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	6922      	ldr	r2, [r4, #16]
 800bb0a:	bf0c      	ite	eq
 800bb0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb10:	2500      	movne	r5, #0
 800bb12:	4293      	cmp	r3, r2
 800bb14:	bfc4      	itt	gt
 800bb16:	1a9b      	subgt	r3, r3, r2
 800bb18:	18ed      	addgt	r5, r5, r3
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	341a      	adds	r4, #26
 800bb1e:	42b5      	cmp	r5, r6
 800bb20:	d11a      	bne.n	800bb58 <_printf_common+0xc8>
 800bb22:	2000      	movs	r0, #0
 800bb24:	e008      	b.n	800bb38 <_printf_common+0xa8>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4652      	mov	r2, sl
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	4638      	mov	r0, r7
 800bb2e:	47c0      	blx	r8
 800bb30:	3001      	adds	r0, #1
 800bb32:	d103      	bne.n	800bb3c <_printf_common+0xac>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3c:	3501      	adds	r5, #1
 800bb3e:	e7c6      	b.n	800bace <_printf_common+0x3e>
 800bb40:	18e1      	adds	r1, r4, r3
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	2030      	movs	r0, #48	; 0x30
 800bb46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb4a:	4422      	add	r2, r4
 800bb4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb54:	3302      	adds	r3, #2
 800bb56:	e7c7      	b.n	800bae8 <_printf_common+0x58>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	4638      	mov	r0, r7
 800bb60:	47c0      	blx	r8
 800bb62:	3001      	adds	r0, #1
 800bb64:	d0e6      	beq.n	800bb34 <_printf_common+0xa4>
 800bb66:	3601      	adds	r6, #1
 800bb68:	e7d9      	b.n	800bb1e <_printf_common+0x8e>
	...

0800bb6c <_printf_i>:
 800bb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	7e0f      	ldrb	r7, [r1, #24]
 800bb72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb74:	2f78      	cmp	r7, #120	; 0x78
 800bb76:	4691      	mov	r9, r2
 800bb78:	4680      	mov	r8, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	469a      	mov	sl, r3
 800bb7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb82:	d807      	bhi.n	800bb94 <_printf_i+0x28>
 800bb84:	2f62      	cmp	r7, #98	; 0x62
 800bb86:	d80a      	bhi.n	800bb9e <_printf_i+0x32>
 800bb88:	2f00      	cmp	r7, #0
 800bb8a:	f000 80d8 	beq.w	800bd3e <_printf_i+0x1d2>
 800bb8e:	2f58      	cmp	r7, #88	; 0x58
 800bb90:	f000 80a3 	beq.w	800bcda <_printf_i+0x16e>
 800bb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb9c:	e03a      	b.n	800bc14 <_printf_i+0xa8>
 800bb9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bba2:	2b15      	cmp	r3, #21
 800bba4:	d8f6      	bhi.n	800bb94 <_printf_i+0x28>
 800bba6:	a101      	add	r1, pc, #4	; (adr r1, 800bbac <_printf_i+0x40>)
 800bba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbac:	0800bc05 	.word	0x0800bc05
 800bbb0:	0800bc19 	.word	0x0800bc19
 800bbb4:	0800bb95 	.word	0x0800bb95
 800bbb8:	0800bb95 	.word	0x0800bb95
 800bbbc:	0800bb95 	.word	0x0800bb95
 800bbc0:	0800bb95 	.word	0x0800bb95
 800bbc4:	0800bc19 	.word	0x0800bc19
 800bbc8:	0800bb95 	.word	0x0800bb95
 800bbcc:	0800bb95 	.word	0x0800bb95
 800bbd0:	0800bb95 	.word	0x0800bb95
 800bbd4:	0800bb95 	.word	0x0800bb95
 800bbd8:	0800bd25 	.word	0x0800bd25
 800bbdc:	0800bc49 	.word	0x0800bc49
 800bbe0:	0800bd07 	.word	0x0800bd07
 800bbe4:	0800bb95 	.word	0x0800bb95
 800bbe8:	0800bb95 	.word	0x0800bb95
 800bbec:	0800bd47 	.word	0x0800bd47
 800bbf0:	0800bb95 	.word	0x0800bb95
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bb95 	.word	0x0800bb95
 800bbfc:	0800bb95 	.word	0x0800bb95
 800bc00:	0800bd0f 	.word	0x0800bd0f
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	1d1a      	adds	r2, r3, #4
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	602a      	str	r2, [r5, #0]
 800bc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc14:	2301      	movs	r3, #1
 800bc16:	e0a3      	b.n	800bd60 <_printf_i+0x1f4>
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	6829      	ldr	r1, [r5, #0]
 800bc1c:	0606      	lsls	r6, r0, #24
 800bc1e:	f101 0304 	add.w	r3, r1, #4
 800bc22:	d50a      	bpl.n	800bc3a <_printf_i+0xce>
 800bc24:	680e      	ldr	r6, [r1, #0]
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	da03      	bge.n	800bc34 <_printf_i+0xc8>
 800bc2c:	232d      	movs	r3, #45	; 0x2d
 800bc2e:	4276      	negs	r6, r6
 800bc30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc34:	485e      	ldr	r0, [pc, #376]	; (800bdb0 <_printf_i+0x244>)
 800bc36:	230a      	movs	r3, #10
 800bc38:	e019      	b.n	800bc6e <_printf_i+0x102>
 800bc3a:	680e      	ldr	r6, [r1, #0]
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc42:	bf18      	it	ne
 800bc44:	b236      	sxthne	r6, r6
 800bc46:	e7ef      	b.n	800bc28 <_printf_i+0xbc>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	6820      	ldr	r0, [r4, #0]
 800bc4c:	1d19      	adds	r1, r3, #4
 800bc4e:	6029      	str	r1, [r5, #0]
 800bc50:	0601      	lsls	r1, r0, #24
 800bc52:	d501      	bpl.n	800bc58 <_printf_i+0xec>
 800bc54:	681e      	ldr	r6, [r3, #0]
 800bc56:	e002      	b.n	800bc5e <_printf_i+0xf2>
 800bc58:	0646      	lsls	r6, r0, #25
 800bc5a:	d5fb      	bpl.n	800bc54 <_printf_i+0xe8>
 800bc5c:	881e      	ldrh	r6, [r3, #0]
 800bc5e:	4854      	ldr	r0, [pc, #336]	; (800bdb0 <_printf_i+0x244>)
 800bc60:	2f6f      	cmp	r7, #111	; 0x6f
 800bc62:	bf0c      	ite	eq
 800bc64:	2308      	moveq	r3, #8
 800bc66:	230a      	movne	r3, #10
 800bc68:	2100      	movs	r1, #0
 800bc6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc6e:	6865      	ldr	r5, [r4, #4]
 800bc70:	60a5      	str	r5, [r4, #8]
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	bfa2      	ittt	ge
 800bc76:	6821      	ldrge	r1, [r4, #0]
 800bc78:	f021 0104 	bicge.w	r1, r1, #4
 800bc7c:	6021      	strge	r1, [r4, #0]
 800bc7e:	b90e      	cbnz	r6, 800bc84 <_printf_i+0x118>
 800bc80:	2d00      	cmp	r5, #0
 800bc82:	d04d      	beq.n	800bd20 <_printf_i+0x1b4>
 800bc84:	4615      	mov	r5, r2
 800bc86:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc8a:	fb03 6711 	mls	r7, r3, r1, r6
 800bc8e:	5dc7      	ldrb	r7, [r0, r7]
 800bc90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc94:	4637      	mov	r7, r6
 800bc96:	42bb      	cmp	r3, r7
 800bc98:	460e      	mov	r6, r1
 800bc9a:	d9f4      	bls.n	800bc86 <_printf_i+0x11a>
 800bc9c:	2b08      	cmp	r3, #8
 800bc9e:	d10b      	bne.n	800bcb8 <_printf_i+0x14c>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	07de      	lsls	r6, r3, #31
 800bca4:	d508      	bpl.n	800bcb8 <_printf_i+0x14c>
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	6861      	ldr	r1, [r4, #4]
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	bfde      	ittt	le
 800bcae:	2330      	movle	r3, #48	; 0x30
 800bcb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bcb8:	1b52      	subs	r2, r2, r5
 800bcba:	6122      	str	r2, [r4, #16]
 800bcbc:	f8cd a000 	str.w	sl, [sp]
 800bcc0:	464b      	mov	r3, r9
 800bcc2:	aa03      	add	r2, sp, #12
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	f7ff fee2 	bl	800ba90 <_printf_common>
 800bccc:	3001      	adds	r0, #1
 800bcce:	d14c      	bne.n	800bd6a <_printf_i+0x1fe>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd4:	b004      	add	sp, #16
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	4835      	ldr	r0, [pc, #212]	; (800bdb0 <_printf_i+0x244>)
 800bcdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bce0:	6829      	ldr	r1, [r5, #0]
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bce8:	6029      	str	r1, [r5, #0]
 800bcea:	061d      	lsls	r5, r3, #24
 800bcec:	d514      	bpl.n	800bd18 <_printf_i+0x1ac>
 800bcee:	07df      	lsls	r7, r3, #31
 800bcf0:	bf44      	itt	mi
 800bcf2:	f043 0320 	orrmi.w	r3, r3, #32
 800bcf6:	6023      	strmi	r3, [r4, #0]
 800bcf8:	b91e      	cbnz	r6, 800bd02 <_printf_i+0x196>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	f023 0320 	bic.w	r3, r3, #32
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	2310      	movs	r3, #16
 800bd04:	e7b0      	b.n	800bc68 <_printf_i+0xfc>
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	f043 0320 	orr.w	r3, r3, #32
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	2378      	movs	r3, #120	; 0x78
 800bd10:	4828      	ldr	r0, [pc, #160]	; (800bdb4 <_printf_i+0x248>)
 800bd12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd16:	e7e3      	b.n	800bce0 <_printf_i+0x174>
 800bd18:	0659      	lsls	r1, r3, #25
 800bd1a:	bf48      	it	mi
 800bd1c:	b2b6      	uxthmi	r6, r6
 800bd1e:	e7e6      	b.n	800bcee <_printf_i+0x182>
 800bd20:	4615      	mov	r5, r2
 800bd22:	e7bb      	b.n	800bc9c <_printf_i+0x130>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	6826      	ldr	r6, [r4, #0]
 800bd28:	6961      	ldr	r1, [r4, #20]
 800bd2a:	1d18      	adds	r0, r3, #4
 800bd2c:	6028      	str	r0, [r5, #0]
 800bd2e:	0635      	lsls	r5, r6, #24
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	d501      	bpl.n	800bd38 <_printf_i+0x1cc>
 800bd34:	6019      	str	r1, [r3, #0]
 800bd36:	e002      	b.n	800bd3e <_printf_i+0x1d2>
 800bd38:	0670      	lsls	r0, r6, #25
 800bd3a:	d5fb      	bpl.n	800bd34 <_printf_i+0x1c8>
 800bd3c:	8019      	strh	r1, [r3, #0]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	4615      	mov	r5, r2
 800bd44:	e7ba      	b.n	800bcbc <_printf_i+0x150>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	1d1a      	adds	r2, r3, #4
 800bd4a:	602a      	str	r2, [r5, #0]
 800bd4c:	681d      	ldr	r5, [r3, #0]
 800bd4e:	6862      	ldr	r2, [r4, #4]
 800bd50:	2100      	movs	r1, #0
 800bd52:	4628      	mov	r0, r5
 800bd54:	f7f4 fa74 	bl	8000240 <memchr>
 800bd58:	b108      	cbz	r0, 800bd5e <_printf_i+0x1f2>
 800bd5a:	1b40      	subs	r0, r0, r5
 800bd5c:	6060      	str	r0, [r4, #4]
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	2300      	movs	r3, #0
 800bd64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd68:	e7a8      	b.n	800bcbc <_printf_i+0x150>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	47d0      	blx	sl
 800bd74:	3001      	adds	r0, #1
 800bd76:	d0ab      	beq.n	800bcd0 <_printf_i+0x164>
 800bd78:	6823      	ldr	r3, [r4, #0]
 800bd7a:	079b      	lsls	r3, r3, #30
 800bd7c:	d413      	bmi.n	800bda6 <_printf_i+0x23a>
 800bd7e:	68e0      	ldr	r0, [r4, #12]
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	4298      	cmp	r0, r3
 800bd84:	bfb8      	it	lt
 800bd86:	4618      	movlt	r0, r3
 800bd88:	e7a4      	b.n	800bcd4 <_printf_i+0x168>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	4649      	mov	r1, r9
 800bd90:	4640      	mov	r0, r8
 800bd92:	47d0      	blx	sl
 800bd94:	3001      	adds	r0, #1
 800bd96:	d09b      	beq.n	800bcd0 <_printf_i+0x164>
 800bd98:	3501      	adds	r5, #1
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	9903      	ldr	r1, [sp, #12]
 800bd9e:	1a5b      	subs	r3, r3, r1
 800bda0:	42ab      	cmp	r3, r5
 800bda2:	dcf2      	bgt.n	800bd8a <_printf_i+0x21e>
 800bda4:	e7eb      	b.n	800bd7e <_printf_i+0x212>
 800bda6:	2500      	movs	r5, #0
 800bda8:	f104 0619 	add.w	r6, r4, #25
 800bdac:	e7f5      	b.n	800bd9a <_printf_i+0x22e>
 800bdae:	bf00      	nop
 800bdb0:	0800db01 	.word	0x0800db01
 800bdb4:	0800db12 	.word	0x0800db12

0800bdb8 <_sbrk_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4d06      	ldr	r5, [pc, #24]	; (800bdd4 <_sbrk_r+0x1c>)
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4604      	mov	r4, r0
 800bdc0:	4608      	mov	r0, r1
 800bdc2:	602b      	str	r3, [r5, #0]
 800bdc4:	f7f4 fff6 	bl	8000db4 <_sbrk>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_sbrk_r+0x1a>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_sbrk_r+0x1a>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20008414 	.word	0x20008414

0800bdd8 <__sread>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	f000 fa6e 	bl	800c2c0 <_read_r>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	bfab      	itete	ge
 800bde8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdea:	89a3      	ldrhlt	r3, [r4, #12]
 800bdec:	181b      	addge	r3, r3, r0
 800bdee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdf2:	bfac      	ite	ge
 800bdf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdf6:	81a3      	strhlt	r3, [r4, #12]
 800bdf8:	bd10      	pop	{r4, pc}

0800bdfa <__swrite>:
 800bdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	461f      	mov	r7, r3
 800be00:	898b      	ldrh	r3, [r1, #12]
 800be02:	05db      	lsls	r3, r3, #23
 800be04:	4605      	mov	r5, r0
 800be06:	460c      	mov	r4, r1
 800be08:	4616      	mov	r6, r2
 800be0a:	d505      	bpl.n	800be18 <__swrite+0x1e>
 800be0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be10:	2302      	movs	r3, #2
 800be12:	2200      	movs	r2, #0
 800be14:	f000 f9d0 	bl	800c1b8 <_lseek_r>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	4628      	mov	r0, r5
 800be2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	f000 b869 	b.w	800bf04 <_write_r>

0800be32 <__sseek>:
 800be32:	b510      	push	{r4, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3a:	f000 f9bd 	bl	800c1b8 <_lseek_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	bf15      	itete	ne
 800be44:	6560      	strne	r0, [r4, #84]	; 0x54
 800be46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be4e:	81a3      	strheq	r3, [r4, #12]
 800be50:	bf18      	it	ne
 800be52:	81a3      	strhne	r3, [r4, #12]
 800be54:	bd10      	pop	{r4, pc}

0800be56 <__sclose>:
 800be56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5a:	f000 b8db 	b.w	800c014 <_close_r>
	...

0800be60 <__swbuf_r>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	460e      	mov	r6, r1
 800be64:	4614      	mov	r4, r2
 800be66:	4605      	mov	r5, r0
 800be68:	b118      	cbz	r0, 800be72 <__swbuf_r+0x12>
 800be6a:	6983      	ldr	r3, [r0, #24]
 800be6c:	b90b      	cbnz	r3, 800be72 <__swbuf_r+0x12>
 800be6e:	f7ff fb1b 	bl	800b4a8 <__sinit>
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <__swbuf_r+0x98>)
 800be74:	429c      	cmp	r4, r3
 800be76:	d12b      	bne.n	800bed0 <__swbuf_r+0x70>
 800be78:	686c      	ldr	r4, [r5, #4]
 800be7a:	69a3      	ldr	r3, [r4, #24]
 800be7c:	60a3      	str	r3, [r4, #8]
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	071a      	lsls	r2, r3, #28
 800be82:	d52f      	bpl.n	800bee4 <__swbuf_r+0x84>
 800be84:	6923      	ldr	r3, [r4, #16]
 800be86:	b36b      	cbz	r3, 800bee4 <__swbuf_r+0x84>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	6820      	ldr	r0, [r4, #0]
 800be8c:	1ac0      	subs	r0, r0, r3
 800be8e:	6963      	ldr	r3, [r4, #20]
 800be90:	b2f6      	uxtb	r6, r6
 800be92:	4283      	cmp	r3, r0
 800be94:	4637      	mov	r7, r6
 800be96:	dc04      	bgt.n	800bea2 <__swbuf_r+0x42>
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f950 	bl	800c140 <_fflush_r>
 800bea0:	bb30      	cbnz	r0, 800bef0 <__swbuf_r+0x90>
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	60a3      	str	r3, [r4, #8]
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	6022      	str	r2, [r4, #0]
 800beae:	701e      	strb	r6, [r3, #0]
 800beb0:	6963      	ldr	r3, [r4, #20]
 800beb2:	3001      	adds	r0, #1
 800beb4:	4283      	cmp	r3, r0
 800beb6:	d004      	beq.n	800bec2 <__swbuf_r+0x62>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	07db      	lsls	r3, r3, #31
 800bebc:	d506      	bpl.n	800becc <__swbuf_r+0x6c>
 800bebe:	2e0a      	cmp	r6, #10
 800bec0:	d104      	bne.n	800becc <__swbuf_r+0x6c>
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f000 f93b 	bl	800c140 <_fflush_r>
 800beca:	b988      	cbnz	r0, 800bef0 <__swbuf_r+0x90>
 800becc:	4638      	mov	r0, r7
 800bece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed0:	4b0a      	ldr	r3, [pc, #40]	; (800befc <__swbuf_r+0x9c>)
 800bed2:	429c      	cmp	r4, r3
 800bed4:	d101      	bne.n	800beda <__swbuf_r+0x7a>
 800bed6:	68ac      	ldr	r4, [r5, #8]
 800bed8:	e7cf      	b.n	800be7a <__swbuf_r+0x1a>
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <__swbuf_r+0xa0>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	bf08      	it	eq
 800bee0:	68ec      	ldreq	r4, [r5, #12]
 800bee2:	e7ca      	b.n	800be7a <__swbuf_r+0x1a>
 800bee4:	4621      	mov	r1, r4
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f81e 	bl	800bf28 <__swsetup_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	d0cb      	beq.n	800be88 <__swbuf_r+0x28>
 800bef0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bef4:	e7ea      	b.n	800becc <__swbuf_r+0x6c>
 800bef6:	bf00      	nop
 800bef8:	0800dab0 	.word	0x0800dab0
 800befc:	0800dad0 	.word	0x0800dad0
 800bf00:	0800da90 	.word	0x0800da90

0800bf04 <_write_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	4d07      	ldr	r5, [pc, #28]	; (800bf24 <_write_r+0x20>)
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	2200      	movs	r2, #0
 800bf10:	602a      	str	r2, [r5, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	f7f4 fefd 	bl	8000d12 <_write>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_write_r+0x1e>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_write_r+0x1e>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20008414 	.word	0x20008414

0800bf28 <__swsetup_r>:
 800bf28:	4b32      	ldr	r3, [pc, #200]	; (800bff4 <__swsetup_r+0xcc>)
 800bf2a:	b570      	push	{r4, r5, r6, lr}
 800bf2c:	681d      	ldr	r5, [r3, #0]
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460c      	mov	r4, r1
 800bf32:	b125      	cbz	r5, 800bf3e <__swsetup_r+0x16>
 800bf34:	69ab      	ldr	r3, [r5, #24]
 800bf36:	b913      	cbnz	r3, 800bf3e <__swsetup_r+0x16>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f7ff fab5 	bl	800b4a8 <__sinit>
 800bf3e:	4b2e      	ldr	r3, [pc, #184]	; (800bff8 <__swsetup_r+0xd0>)
 800bf40:	429c      	cmp	r4, r3
 800bf42:	d10f      	bne.n	800bf64 <__swsetup_r+0x3c>
 800bf44:	686c      	ldr	r4, [r5, #4]
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf4c:	0719      	lsls	r1, r3, #28
 800bf4e:	d42c      	bmi.n	800bfaa <__swsetup_r+0x82>
 800bf50:	06dd      	lsls	r5, r3, #27
 800bf52:	d411      	bmi.n	800bf78 <__swsetup_r+0x50>
 800bf54:	2309      	movs	r3, #9
 800bf56:	6033      	str	r3, [r6, #0]
 800bf58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf62:	e03e      	b.n	800bfe2 <__swsetup_r+0xba>
 800bf64:	4b25      	ldr	r3, [pc, #148]	; (800bffc <__swsetup_r+0xd4>)
 800bf66:	429c      	cmp	r4, r3
 800bf68:	d101      	bne.n	800bf6e <__swsetup_r+0x46>
 800bf6a:	68ac      	ldr	r4, [r5, #8]
 800bf6c:	e7eb      	b.n	800bf46 <__swsetup_r+0x1e>
 800bf6e:	4b24      	ldr	r3, [pc, #144]	; (800c000 <__swsetup_r+0xd8>)
 800bf70:	429c      	cmp	r4, r3
 800bf72:	bf08      	it	eq
 800bf74:	68ec      	ldreq	r4, [r5, #12]
 800bf76:	e7e6      	b.n	800bf46 <__swsetup_r+0x1e>
 800bf78:	0758      	lsls	r0, r3, #29
 800bf7a:	d512      	bpl.n	800bfa2 <__swsetup_r+0x7a>
 800bf7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf7e:	b141      	cbz	r1, 800bf92 <__swsetup_r+0x6a>
 800bf80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf84:	4299      	cmp	r1, r3
 800bf86:	d002      	beq.n	800bf8e <__swsetup_r+0x66>
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff fb47 	bl	800b61c <_free_r>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	6363      	str	r3, [r4, #52]	; 0x34
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf98:	81a3      	strh	r3, [r4, #12]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	6063      	str	r3, [r4, #4]
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f043 0308 	orr.w	r3, r3, #8
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	6923      	ldr	r3, [r4, #16]
 800bfac:	b94b      	cbnz	r3, 800bfc2 <__swsetup_r+0x9a>
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfb8:	d003      	beq.n	800bfc2 <__swsetup_r+0x9a>
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f000 f933 	bl	800c228 <__smakebuf_r>
 800bfc2:	89a0      	ldrh	r0, [r4, #12]
 800bfc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfc8:	f010 0301 	ands.w	r3, r0, #1
 800bfcc:	d00a      	beq.n	800bfe4 <__swsetup_r+0xbc>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60a3      	str	r3, [r4, #8]
 800bfd2:	6963      	ldr	r3, [r4, #20]
 800bfd4:	425b      	negs	r3, r3
 800bfd6:	61a3      	str	r3, [r4, #24]
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	b943      	cbnz	r3, 800bfee <__swsetup_r+0xc6>
 800bfdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfe0:	d1ba      	bne.n	800bf58 <__swsetup_r+0x30>
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	0781      	lsls	r1, r0, #30
 800bfe6:	bf58      	it	pl
 800bfe8:	6963      	ldrpl	r3, [r4, #20]
 800bfea:	60a3      	str	r3, [r4, #8]
 800bfec:	e7f4      	b.n	800bfd8 <__swsetup_r+0xb0>
 800bfee:	2000      	movs	r0, #0
 800bff0:	e7f7      	b.n	800bfe2 <__swsetup_r+0xba>
 800bff2:	bf00      	nop
 800bff4:	20000024 	.word	0x20000024
 800bff8:	0800dab0 	.word	0x0800dab0
 800bffc:	0800dad0 	.word	0x0800dad0
 800c000:	0800da90 	.word	0x0800da90

0800c004 <abort>:
 800c004:	b508      	push	{r3, lr}
 800c006:	2006      	movs	r0, #6
 800c008:	f000 f994 	bl	800c334 <raise>
 800c00c:	2001      	movs	r0, #1
 800c00e:	f7f4 fe59 	bl	8000cc4 <_exit>
	...

0800c014 <_close_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d06      	ldr	r5, [pc, #24]	; (800c030 <_close_r+0x1c>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	602b      	str	r3, [r5, #0]
 800c020:	f7f4 fe93 	bl	8000d4a <_close>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_close_r+0x1a>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_close_r+0x1a>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	20008414 	.word	0x20008414

0800c034 <__sflush_r>:
 800c034:	898a      	ldrh	r2, [r1, #12]
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	4605      	mov	r5, r0
 800c03c:	0710      	lsls	r0, r2, #28
 800c03e:	460c      	mov	r4, r1
 800c040:	d458      	bmi.n	800c0f4 <__sflush_r+0xc0>
 800c042:	684b      	ldr	r3, [r1, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	dc05      	bgt.n	800c054 <__sflush_r+0x20>
 800c048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dc02      	bgt.n	800c054 <__sflush_r+0x20>
 800c04e:	2000      	movs	r0, #0
 800c050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c056:	2e00      	cmp	r6, #0
 800c058:	d0f9      	beq.n	800c04e <__sflush_r+0x1a>
 800c05a:	2300      	movs	r3, #0
 800c05c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c060:	682f      	ldr	r7, [r5, #0]
 800c062:	602b      	str	r3, [r5, #0]
 800c064:	d032      	beq.n	800c0cc <__sflush_r+0x98>
 800c066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	075a      	lsls	r2, r3, #29
 800c06c:	d505      	bpl.n	800c07a <__sflush_r+0x46>
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	1ac0      	subs	r0, r0, r3
 800c072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c074:	b10b      	cbz	r3, 800c07a <__sflush_r+0x46>
 800c076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c078:	1ac0      	subs	r0, r0, r3
 800c07a:	2300      	movs	r3, #0
 800c07c:	4602      	mov	r2, r0
 800c07e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c080:	6a21      	ldr	r1, [r4, #32]
 800c082:	4628      	mov	r0, r5
 800c084:	47b0      	blx	r6
 800c086:	1c43      	adds	r3, r0, #1
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	d106      	bne.n	800c09a <__sflush_r+0x66>
 800c08c:	6829      	ldr	r1, [r5, #0]
 800c08e:	291d      	cmp	r1, #29
 800c090:	d82c      	bhi.n	800c0ec <__sflush_r+0xb8>
 800c092:	4a2a      	ldr	r2, [pc, #168]	; (800c13c <__sflush_r+0x108>)
 800c094:	40ca      	lsrs	r2, r1
 800c096:	07d6      	lsls	r6, r2, #31
 800c098:	d528      	bpl.n	800c0ec <__sflush_r+0xb8>
 800c09a:	2200      	movs	r2, #0
 800c09c:	6062      	str	r2, [r4, #4]
 800c09e:	04d9      	lsls	r1, r3, #19
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	6022      	str	r2, [r4, #0]
 800c0a4:	d504      	bpl.n	800c0b0 <__sflush_r+0x7c>
 800c0a6:	1c42      	adds	r2, r0, #1
 800c0a8:	d101      	bne.n	800c0ae <__sflush_r+0x7a>
 800c0aa:	682b      	ldr	r3, [r5, #0]
 800c0ac:	b903      	cbnz	r3, 800c0b0 <__sflush_r+0x7c>
 800c0ae:	6560      	str	r0, [r4, #84]	; 0x54
 800c0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0b2:	602f      	str	r7, [r5, #0]
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	d0ca      	beq.n	800c04e <__sflush_r+0x1a>
 800c0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d002      	beq.n	800c0c6 <__sflush_r+0x92>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f7ff faab 	bl	800b61c <_free_r>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ca:	e7c1      	b.n	800c050 <__sflush_r+0x1c>
 800c0cc:	6a21      	ldr	r1, [r4, #32]
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	47b0      	blx	r6
 800c0d4:	1c41      	adds	r1, r0, #1
 800c0d6:	d1c7      	bne.n	800c068 <__sflush_r+0x34>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d0c4      	beq.n	800c068 <__sflush_r+0x34>
 800c0de:	2b1d      	cmp	r3, #29
 800c0e0:	d001      	beq.n	800c0e6 <__sflush_r+0xb2>
 800c0e2:	2b16      	cmp	r3, #22
 800c0e4:	d101      	bne.n	800c0ea <__sflush_r+0xb6>
 800c0e6:	602f      	str	r7, [r5, #0]
 800c0e8:	e7b1      	b.n	800c04e <__sflush_r+0x1a>
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	e7ad      	b.n	800c050 <__sflush_r+0x1c>
 800c0f4:	690f      	ldr	r7, [r1, #16]
 800c0f6:	2f00      	cmp	r7, #0
 800c0f8:	d0a9      	beq.n	800c04e <__sflush_r+0x1a>
 800c0fa:	0793      	lsls	r3, r2, #30
 800c0fc:	680e      	ldr	r6, [r1, #0]
 800c0fe:	bf08      	it	eq
 800c100:	694b      	ldreq	r3, [r1, #20]
 800c102:	600f      	str	r7, [r1, #0]
 800c104:	bf18      	it	ne
 800c106:	2300      	movne	r3, #0
 800c108:	eba6 0807 	sub.w	r8, r6, r7
 800c10c:	608b      	str	r3, [r1, #8]
 800c10e:	f1b8 0f00 	cmp.w	r8, #0
 800c112:	dd9c      	ble.n	800c04e <__sflush_r+0x1a>
 800c114:	6a21      	ldr	r1, [r4, #32]
 800c116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c118:	4643      	mov	r3, r8
 800c11a:	463a      	mov	r2, r7
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b0      	blx	r6
 800c120:	2800      	cmp	r0, #0
 800c122:	dc06      	bgt.n	800c132 <__sflush_r+0xfe>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c130:	e78e      	b.n	800c050 <__sflush_r+0x1c>
 800c132:	4407      	add	r7, r0
 800c134:	eba8 0800 	sub.w	r8, r8, r0
 800c138:	e7e9      	b.n	800c10e <__sflush_r+0xda>
 800c13a:	bf00      	nop
 800c13c:	20400001 	.word	0x20400001

0800c140 <_fflush_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	690b      	ldr	r3, [r1, #16]
 800c144:	4605      	mov	r5, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b913      	cbnz	r3, 800c150 <_fflush_r+0x10>
 800c14a:	2500      	movs	r5, #0
 800c14c:	4628      	mov	r0, r5
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	b118      	cbz	r0, 800c15a <_fflush_r+0x1a>
 800c152:	6983      	ldr	r3, [r0, #24]
 800c154:	b90b      	cbnz	r3, 800c15a <_fflush_r+0x1a>
 800c156:	f7ff f9a7 	bl	800b4a8 <__sinit>
 800c15a:	4b14      	ldr	r3, [pc, #80]	; (800c1ac <_fflush_r+0x6c>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	d11b      	bne.n	800c198 <_fflush_r+0x58>
 800c160:	686c      	ldr	r4, [r5, #4]
 800c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d0ef      	beq.n	800c14a <_fflush_r+0xa>
 800c16a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c16c:	07d0      	lsls	r0, r2, #31
 800c16e:	d404      	bmi.n	800c17a <_fflush_r+0x3a>
 800c170:	0599      	lsls	r1, r3, #22
 800c172:	d402      	bmi.n	800c17a <_fflush_r+0x3a>
 800c174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c176:	f7ff fa47 	bl	800b608 <__retarget_lock_acquire_recursive>
 800c17a:	4628      	mov	r0, r5
 800c17c:	4621      	mov	r1, r4
 800c17e:	f7ff ff59 	bl	800c034 <__sflush_r>
 800c182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c184:	07da      	lsls	r2, r3, #31
 800c186:	4605      	mov	r5, r0
 800c188:	d4e0      	bmi.n	800c14c <_fflush_r+0xc>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	059b      	lsls	r3, r3, #22
 800c18e:	d4dd      	bmi.n	800c14c <_fflush_r+0xc>
 800c190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c192:	f7ff fa3a 	bl	800b60a <__retarget_lock_release_recursive>
 800c196:	e7d9      	b.n	800c14c <_fflush_r+0xc>
 800c198:	4b05      	ldr	r3, [pc, #20]	; (800c1b0 <_fflush_r+0x70>)
 800c19a:	429c      	cmp	r4, r3
 800c19c:	d101      	bne.n	800c1a2 <_fflush_r+0x62>
 800c19e:	68ac      	ldr	r4, [r5, #8]
 800c1a0:	e7df      	b.n	800c162 <_fflush_r+0x22>
 800c1a2:	4b04      	ldr	r3, [pc, #16]	; (800c1b4 <_fflush_r+0x74>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	bf08      	it	eq
 800c1a8:	68ec      	ldreq	r4, [r5, #12]
 800c1aa:	e7da      	b.n	800c162 <_fflush_r+0x22>
 800c1ac:	0800dab0 	.word	0x0800dab0
 800c1b0:	0800dad0 	.word	0x0800dad0
 800c1b4:	0800da90 	.word	0x0800da90

0800c1b8 <_lseek_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d07      	ldr	r5, [pc, #28]	; (800c1d8 <_lseek_r+0x20>)
 800c1bc:	4604      	mov	r4, r0
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	602a      	str	r2, [r5, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	f7f4 fde6 	bl	8000d98 <_lseek>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_lseek_r+0x1e>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_lseek_r+0x1e>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20008414 	.word	0x20008414

0800c1dc <__swhatbuf_r>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	460e      	mov	r6, r1
 800c1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	b096      	sub	sp, #88	; 0x58
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	461d      	mov	r5, r3
 800c1ec:	da08      	bge.n	800c200 <__swhatbuf_r+0x24>
 800c1ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	061a      	lsls	r2, r3, #24
 800c1f8:	d410      	bmi.n	800c21c <__swhatbuf_r+0x40>
 800c1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1fe:	e00e      	b.n	800c21e <__swhatbuf_r+0x42>
 800c200:	466a      	mov	r2, sp
 800c202:	f000 f8b3 	bl	800c36c <_fstat_r>
 800c206:	2800      	cmp	r0, #0
 800c208:	dbf1      	blt.n	800c1ee <__swhatbuf_r+0x12>
 800c20a:	9a01      	ldr	r2, [sp, #4]
 800c20c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c214:	425a      	negs	r2, r3
 800c216:	415a      	adcs	r2, r3
 800c218:	602a      	str	r2, [r5, #0]
 800c21a:	e7ee      	b.n	800c1fa <__swhatbuf_r+0x1e>
 800c21c:	2340      	movs	r3, #64	; 0x40
 800c21e:	2000      	movs	r0, #0
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	b016      	add	sp, #88	; 0x58
 800c224:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c228 <__smakebuf_r>:
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c22c:	079d      	lsls	r5, r3, #30
 800c22e:	4606      	mov	r6, r0
 800c230:	460c      	mov	r4, r1
 800c232:	d507      	bpl.n	800c244 <__smakebuf_r+0x1c>
 800c234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	6123      	str	r3, [r4, #16]
 800c23c:	2301      	movs	r3, #1
 800c23e:	6163      	str	r3, [r4, #20]
 800c240:	b002      	add	sp, #8
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	ab01      	add	r3, sp, #4
 800c246:	466a      	mov	r2, sp
 800c248:	f7ff ffc8 	bl	800c1dc <__swhatbuf_r>
 800c24c:	9900      	ldr	r1, [sp, #0]
 800c24e:	4605      	mov	r5, r0
 800c250:	4630      	mov	r0, r6
 800c252:	f7ff fa4f 	bl	800b6f4 <_malloc_r>
 800c256:	b948      	cbnz	r0, 800c26c <__smakebuf_r+0x44>
 800c258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25c:	059a      	lsls	r2, r3, #22
 800c25e:	d4ef      	bmi.n	800c240 <__smakebuf_r+0x18>
 800c260:	f023 0303 	bic.w	r3, r3, #3
 800c264:	f043 0302 	orr.w	r3, r3, #2
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	e7e3      	b.n	800c234 <__smakebuf_r+0xc>
 800c26c:	4b0d      	ldr	r3, [pc, #52]	; (800c2a4 <__smakebuf_r+0x7c>)
 800c26e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	6020      	str	r0, [r4, #0]
 800c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	9b00      	ldr	r3, [sp, #0]
 800c27c:	6163      	str	r3, [r4, #20]
 800c27e:	9b01      	ldr	r3, [sp, #4]
 800c280:	6120      	str	r0, [r4, #16]
 800c282:	b15b      	cbz	r3, 800c29c <__smakebuf_r+0x74>
 800c284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 f881 	bl	800c390 <_isatty_r>
 800c28e:	b128      	cbz	r0, 800c29c <__smakebuf_r+0x74>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f023 0303 	bic.w	r3, r3, #3
 800c296:	f043 0301 	orr.w	r3, r3, #1
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	89a0      	ldrh	r0, [r4, #12]
 800c29e:	4305      	orrs	r5, r0
 800c2a0:	81a5      	strh	r5, [r4, #12]
 800c2a2:	e7cd      	b.n	800c240 <__smakebuf_r+0x18>
 800c2a4:	0800b441 	.word	0x0800b441

0800c2a8 <__malloc_lock>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__malloc_lock+0x8>)
 800c2aa:	f7ff b9ad 	b.w	800b608 <__retarget_lock_acquire_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	20008418 	.word	0x20008418

0800c2b4 <__malloc_unlock>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__malloc_unlock+0x8>)
 800c2b6:	f7ff b9a8 	b.w	800b60a <__retarget_lock_release_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	20008418 	.word	0x20008418

0800c2c0 <_read_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	; (800c2e0 <_read_r+0x20>)
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	4608      	mov	r0, r1
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f7f4 fd02 	bl	8000cd8 <_read>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_read_r+0x1e>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_read_r+0x1e>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20008414 	.word	0x20008414

0800c2e4 <_raise_r>:
 800c2e4:	291f      	cmp	r1, #31
 800c2e6:	b538      	push	{r3, r4, r5, lr}
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	d904      	bls.n	800c2f8 <_raise_r+0x14>
 800c2ee:	2316      	movs	r3, #22
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2fa:	b112      	cbz	r2, 800c302 <_raise_r+0x1e>
 800c2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c300:	b94b      	cbnz	r3, 800c316 <_raise_r+0x32>
 800c302:	4620      	mov	r0, r4
 800c304:	f000 f830 	bl	800c368 <_getpid_r>
 800c308:	462a      	mov	r2, r5
 800c30a:	4601      	mov	r1, r0
 800c30c:	4620      	mov	r0, r4
 800c30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c312:	f000 b817 	b.w	800c344 <_kill_r>
 800c316:	2b01      	cmp	r3, #1
 800c318:	d00a      	beq.n	800c330 <_raise_r+0x4c>
 800c31a:	1c59      	adds	r1, r3, #1
 800c31c:	d103      	bne.n	800c326 <_raise_r+0x42>
 800c31e:	2316      	movs	r3, #22
 800c320:	6003      	str	r3, [r0, #0]
 800c322:	2001      	movs	r0, #1
 800c324:	e7e7      	b.n	800c2f6 <_raise_r+0x12>
 800c326:	2400      	movs	r4, #0
 800c328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c32c:	4628      	mov	r0, r5
 800c32e:	4798      	blx	r3
 800c330:	2000      	movs	r0, #0
 800c332:	e7e0      	b.n	800c2f6 <_raise_r+0x12>

0800c334 <raise>:
 800c334:	4b02      	ldr	r3, [pc, #8]	; (800c340 <raise+0xc>)
 800c336:	4601      	mov	r1, r0
 800c338:	6818      	ldr	r0, [r3, #0]
 800c33a:	f7ff bfd3 	b.w	800c2e4 <_raise_r>
 800c33e:	bf00      	nop
 800c340:	20000024 	.word	0x20000024

0800c344 <_kill_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	; (800c364 <_kill_r+0x20>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	f7f4 fca5 	bl	8000ca0 <_kill>
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	d102      	bne.n	800c360 <_kill_r+0x1c>
 800c35a:	682b      	ldr	r3, [r5, #0]
 800c35c:	b103      	cbz	r3, 800c360 <_kill_r+0x1c>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd38      	pop	{r3, r4, r5, pc}
 800c362:	bf00      	nop
 800c364:	20008414 	.word	0x20008414

0800c368 <_getpid_r>:
 800c368:	f7f4 bc92 	b.w	8000c90 <_getpid>

0800c36c <_fstat_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4d07      	ldr	r5, [pc, #28]	; (800c38c <_fstat_r+0x20>)
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	4611      	mov	r1, r2
 800c378:	602b      	str	r3, [r5, #0]
 800c37a:	f7f4 fcf2 	bl	8000d62 <_fstat>
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	d102      	bne.n	800c388 <_fstat_r+0x1c>
 800c382:	682b      	ldr	r3, [r5, #0]
 800c384:	b103      	cbz	r3, 800c388 <_fstat_r+0x1c>
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	bd38      	pop	{r3, r4, r5, pc}
 800c38a:	bf00      	nop
 800c38c:	20008414 	.word	0x20008414

0800c390 <_isatty_r>:
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4d06      	ldr	r5, [pc, #24]	; (800c3ac <_isatty_r+0x1c>)
 800c394:	2300      	movs	r3, #0
 800c396:	4604      	mov	r4, r0
 800c398:	4608      	mov	r0, r1
 800c39a:	602b      	str	r3, [r5, #0]
 800c39c:	f7f4 fcf1 	bl	8000d82 <_isatty>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d102      	bne.n	800c3aa <_isatty_r+0x1a>
 800c3a4:	682b      	ldr	r3, [r5, #0]
 800c3a6:	b103      	cbz	r3, 800c3aa <_isatty_r+0x1a>
 800c3a8:	6023      	str	r3, [r4, #0]
 800c3aa:	bd38      	pop	{r3, r4, r5, pc}
 800c3ac:	20008414 	.word	0x20008414

0800c3b0 <_init>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	bf00      	nop
 800c3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3b6:	bc08      	pop	{r3}
 800c3b8:	469e      	mov	lr, r3
 800c3ba:	4770      	bx	lr

0800c3bc <_fini>:
 800c3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3be:	bf00      	nop
 800c3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c2:	bc08      	pop	{r3}
 800c3c4:	469e      	mov	lr, r3
 800c3c6:	4770      	bx	lr
